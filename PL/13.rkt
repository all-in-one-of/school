#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 3703 0 28 3 11 #"#lang pl 13"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";;; Syntax"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"#| The BNF:"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"   <SLUG> ::= <num>"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"            | <str>"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"            | <id>"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"            | { bind {{ <id> <SLUG> } ... } <SLUG> }"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"            | { with-stx {<id> { <id> ... }"
0 0 17 29 1 #"\n"
0 0 17 3 59
#"                               { <pattern> <pattern> } ...}"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                  <SLUG> }"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"            | { fun { <id> ... } <SLUG> }"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"            | { if <SLUG> <SLUG> <SLUG> }"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"            | { <SLUG> <SLUG> ... }"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; A matching abstract syntax tree datatype:"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;   (note: no WithStx constructor -- it is preprocessed away)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Num"
0 0 24 3 2 #"  "
0 0 14 3 6 #"Number"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Str"
0 0 24 3 2 #"  "
0 0 14 3 6 #"String"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"Id"
0 0 24 3 3 #"   "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"Bind"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 2 #") "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Fun"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #") "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"Call"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"If"
0 0 24 3 3 #"   "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"unique-list?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; Tests whether a list is unique, used to guard Bind and Fun values"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unique-list?"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 12 #"unique-list?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; This built-in is used in the following code:"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; make-transformer : (Listof Symbol) (Listof (List Sexpr Sexpr))"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;                    -> (Sexpr -> Sexpr)"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; consumes a list of pattern pairs, and creates a transformer"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; function (transforms an s-expression into an s-expression)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Sexpr"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; parses *and* macro-expands s-expressions; the second argument is"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; the association list of transformers at this point."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 1 #" "
0 0 14 3 12 #"transformers"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 65
#";; convenient function for common cases where we recurse with the"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 20 #";; same transformers"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 3 #") ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 1 #" "
0 0 14 3 12 #"transformers"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 11 #"transformer"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"assq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 2 #") "
0 0 14 3 12 #"transformers"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 11 #"transformer"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 55 #";; if there is a transformer by this name, apply it and"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 27 #";; continue with the result"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"parse*"
0 0 24 3 3 #" (("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 11 #"transformer"
0 0 24 3 2 #") "
0 0 14 3 5 #"sexpr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 56 #";; if we see `with-stx', then recursively parse with the"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 38 #";; additional transformer that we make"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"with-stx"
0 0 24 3 1 #" "
0 0 14 3 4 #"more"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"with-stx"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol:"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol:"
0 0 24 3 1 #" "
0 0 14 3 8 #"keywords"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 24 3 3 #") ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 4 #"body"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-transformer"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 8 #"keywords"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 24 3 3 #"] ["
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 7 #"pattern"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 12 #"transformers"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 19 3 29 #"\"bad `with-stx' syntax in ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 7 #"number:"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 6 #")    ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 7 #"symbol:"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 2 #"Id"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 7 #"string:"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 6 #")    ("
0 0 14 3 3 #"Str"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 14 3 4 #"more"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bind"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol:"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #") ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 6 #"nameds"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unique-list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"Bind"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 14 3 6 #"nameds"
0 0 24 3 3 #") ("
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 19 3 32 #"\"`bind' got duplicate names: ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 19 3 25 #"\"bad `bind' syntax in ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"more"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol:"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unique-list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 3 #"Fun"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 19 3 31 #"\"`fun' got duplicate names: ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 19 3 24 #"\"bad `fun' syntax in ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"more"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"If"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 15 3 4 #"cond"
0 0 24 3 3 #") ("
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 3 #") ("
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"bad `if' syntax in ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sexpr:"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 17 3 30 #"; other lists are applications"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"Call"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"parse*"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"bad syntax in ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 6 #")]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; Parses a string containing an SLUG expression to a SLUG AST."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string->sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";;; Values and environments"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"EmptyEnv"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"FrameEnv"
0 0 24 3 1 #" "
0 0 14 3 5 #"FRAME"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"RktV"
0 0 24 3 2 #"  "
0 0 14 3 3 #"Any"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"FunV"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 2 #") "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"ExprV"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"PrimV"
0 0 24 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; I/O descriptions"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; these will hold VALs which should evaluate to the commented types"
 #";"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";; Slug is not statically typed, so we can't do better than throw"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; run-time errors if wrong values turn out"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"IO"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"Print"
0 0 24 3 4 #"    "
0 0 14 3 3 #"VAL"
0 0 24 3 7 #"]      "
0 0 17 3 8 #"; String"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"ReadLine"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 7 #"]      "
0 0 17 3 24 #"; receiver: String -> IO"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"Begin2"
0 0 24 3 3 #"   "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #"]  "
0 0 17 3 7 #"; IO IO"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 11 #";; mutation"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"NewRef"
0 0 24 3 3 #"   "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #"]  "
0 0 17 3 28 #"; init, receiver for new ref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"UnRef"
0 0 24 3 4 #"    "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #"]  "
0 0 17 3 29 #"; ref, receiver for its value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"SetRef"
0 0 24 3 3 #"   "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #"]) "
0 0 17 3 16 #"; ref, new value"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; a frame is an association list of names and values."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"FRAME"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #") "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; extends an environment with a new frame."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"FrameEnv"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"arity mismatch for names: ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; looks for a name in an environment, searching through each frame."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"EmptyEnv"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"no binding for ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"FrameEnv"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"assq"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"unwrap-rktv"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; helper for `racket-func->prim-val': strict and unwrap a RktV"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; wrapper in preparation to be sent to the primitive function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"unwrap-rktv"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"racket-func"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"bad input: ~s\""
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"wrap-in-val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; helper that ensures a VAL output using RktV wrapper when needed,"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; but leaving as is otherwise"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"wrap-in-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"VAL?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Function"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; converts a racket function to a primitive evaluator function whic"
 #"h"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";; is a PrimV holding a ((Listof VAL) -> VAL) function.  (the"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; resulting function will use the list function as is, and it is th"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";; list function's responsibility to throw an error if it's given a"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; bad number of arguments or bad input types.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket-func"
0 0 24 3 1 #" "
0 0 14 3 7 #"strict?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-func"
0 0 24 3 2 #" ("
0 0 14 3 26 #"make-untyped-list-function"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket-func"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"PrimV"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 7 #"strict?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"unwrap-rktv"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 4 #"args"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"wrap-in-val"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-func"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; The global environment has a few primitives:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 18 #"global-environment"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"global-environment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"FrameEnv"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"  "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"number->string"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"string->number"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 14 #"string->number"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 14 #";; note flags:"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cons"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"list"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rest"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 40 #";; IO constructors -- all are non-strict"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"print"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 5 #"Print"
0 0 24 3 4 #"    "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 6 #"     ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 8 #"ReadLine"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 6 #"begin2"
0 0 24 3 4 #"   ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 6 #"Begin2"
0 0 24 3 3 #"   "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"newref"
0 0 24 3 4 #"   ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 6 #"NewRef"
0 0 24 3 3 #"   "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"unref"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 5 #"UnRef"
0 0 24 3 4 #"    "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"set-ref!"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racket-func->prim-val"
0 0 24 3 1 #" "
0 0 14 3 6 #"SetRef"
0 0 24 3 3 #"   "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 9 #";; values"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #" ("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"null"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"EmptyEnv"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Evaluation"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"eval-promise"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; used instead of `eval' to create an evaluation promise"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"eval-promise"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ExprV"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ann"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"strict"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; forces a (possibly nested) ExprV promise, returns a VAL that is n"
 #"ot"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #";; an ExprV"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"ExprV"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"cache"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 5 #"cache"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 5 #"cache"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 3 #"val"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #" "
0 0 14 3 3 #"ENV"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; evaluates SLUG expressions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 20 #";; convenient helper"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"eval*"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"SLUG"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"eval*"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-promise"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #")   ("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Str"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")   ("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"Id"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Bind"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 2 #" ("
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"eval*"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Fun"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"FunV"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Call"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-exprs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"fval"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 2 #" ("
0 0 14 3 5 #"eval*"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 8 #"arg-vals"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"eval*"
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-exprs"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"fval"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 5 #"PrimV"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 4 #"FunV"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 7 #"fun-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 24 3 1 #" "
0 0 14 3 7 #"fun-env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"function call with a non-function: ~s\""
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 4 #"fval"
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"If"
0 0 24 3 1 #" "
0 0 14 3 9 #"cond-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"eval*"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 2 #" ("
0 0 14 3 5 #"eval*"
0 0 24 3 1 #" "
0 0 14 3 9 #"cond-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 2 #"] "
0 0 17 3 32 #"; Racket value => use as boolean"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 5 #"])   "
0 0 17 3 30 #"; other values are always true"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 9 #"then-expr"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 9 #"else-expr"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; evaluate a SLUG program contained in a string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 14 3 18 #"global-environment"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"run"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 37 #"\"evaluation returned a bad value: ~s\""
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";;; Refs -- similar to a box, but always holds an `Any' value"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; This should be considered an internal definition, use only the"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; following functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"REF"
0 0 24 3 2 #" ["
0 0 14 3 3 #"Ref"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Boxof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; These are the public interface functions, use them similarly to h"
 #"ow"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";; you'd use box functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"REF"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"unref"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"REF"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unref"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #" [("
0 0 14 3 3 #"Ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"set-ref!"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"REF"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"set-ref!"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #" [("
0 0 14 3 3 #"Ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; you'll also need a predicate -- instead of using `REF?', define a"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; public `ref?' (it will get the same predicate type, which has a"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; special meaning in typed racket):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ref?"
0 0 24 3 1 #" "
0 0 14 3 4 #"REF?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; I/O execution"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 13 #"execute-print"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; executes a `print' description"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"execute-print"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #" [("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 4 #")] ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"])])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"cannot `print' a non-string value\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"execute-begin2"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; executes a `begin2' description"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"execute-begin2"
0 0 24 3 1 #" "
0 0 14 3 3 #"1st"
0 0 24 3 1 #" "
0 0 14 3 3 #"2nd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"execute-val"
0 0 24 3 1 #" "
0 0 14 3 3 #"1st"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"execute-val"
0 0 24 3 1 #" "
0 0 14 3 3 #"2nd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 16 #"execute-receiver"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 2 #" ("
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; helper for executing receivers, wraps the value in a RktV, and"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; calls the receiver with the value, if it is valid.  Note that the"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; value is actually a `producer' thunk, because it might involve so"
 #"me"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; side-effect (like reading) that we want to avoid if the receiver "
 #"is"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #";; invalid."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"execute-receiver"
0 0 24 3 1 #" "
0 0 14 3 8 #"receiver"
0 0 24 3 1 #" "
0 0 14 3 8 #"producer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 8 #"receiver"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"FunV"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"new-env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"extend"
0 0 24 3 1 #" "
0 0 14 3 5 #"names"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"wrap-in-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"producer"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"execute-val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"execute-receiver"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"expecting a receiver function\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"execute-read"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; executes a `read' description"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"execute-read"
0 0 24 3 1 #" "
0 0 14 3 8 #"receiver"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"execute-receiver"
0 0 24 3 1 #" "
0 0 14 3 8 #"receiver"
0 0 24 3 1 #" "
0 0 14 3 9 #"read-line"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"execute-newref"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; executes a `newref' description"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"execute-newref"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 8 #"receiver"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"execute-receiver"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 1 #" "
0 0 14 3 8 #"receiver"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 13 #"execute-unref"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; executes an `unref' description"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"execute-unref"
0 0 24 3 1 #" "
0 0 14 3 2 #"rv"
0 0 24 3 1 #" "
0 0 14 3 8 #"receiver"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 11 #"unwrap-rktv"
0 0 24 3 1 #" "
0 0 14 3 2 #"rv"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ref?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 16 #"execute-receiver"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 1 #" "
0 0 14 3 8 #"receiver"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"unref"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"unref"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Expected a ref\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"execute-setref"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; executes a `setref' description"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"execute-setref"
0 0 24 3 1 #" "
0 0 14 3 2 #"rv"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 11 #"unwrap-rktv"
0 0 24 3 1 #" "
0 0 14 3 2 #"rv"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ref?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"set-ref!"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"setref"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Expected a ref\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"execute-val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAL"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; extracts an IO from a VAL and executes it"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"execute-val"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 2 #"io"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 4 #"RktV"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"IO?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"])])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 2 #"io"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"execute-val"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"expecting an IO value: ~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 2 #"io"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 5 #"Print"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 8 #")      ("
0 0 14 3 13 #"execute-print"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 8 #"ReadLine"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")   ("
0 0 14 3 12 #"execute-read"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 6 #"Begin2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 5 #")   ("
0 0 14 3 14 #"execute-begin2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 6 #"NewRef"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 14 #"execute-newref"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 5 #"UnRef"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")  ("
0 0 14 3 13 #"execute-unref"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 6 #"SetRef"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 14 #"execute-setref"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 6 #")]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"run-io"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; evaluate a SLUG program contained in a string, and execute the"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; resulting IOV description"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"execute-val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 14 3 18 #"global-environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #";;; Tests"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"{{fun {x} {+ x 1}} 4}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"{bind {{add3 {fun {x} {+ x 3}}}} {add3 1}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"{bind {{add3 {fun {x} {+ x 3}}}"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"                   {add1 {fun {x} {+ x 1}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 46 #"              {bind {{x 3}} {add1 {add3 x}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"{bind {{identity {fun {x} x}}"
0 0 19 29 1 #"\n"
0 0 19 3 43 #"                   {foo {fun {x} {+ x 1}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 36 #"              {{identity foo} 123}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 3 #"124"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"{bind {{x 3}}"
0 0 19 29 1 #"\n"
0 0 19 3 43 #"              {bind {{f {fun {y} {+ x y}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 29 #"                {bind {{x 5}}"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"                  {f 4}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{{{fun {x} {x 1}}"
0 0 19 29 1 #"\n"
0 0 19 3 42 #"              {fun {x} {fun {y} {+ x y}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"             123}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 3 #"124"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; More tests for complete coverage"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"{bind x 5 x}\""
0 0 24 3 7 #")      "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"bad `bind' syntax\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"{fun x x}\""
0 0 24 3 10 #")         "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"bad `fun' syntax\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"{if x}\""
0 0 24 3 13 #")            "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"bad `if' syntax\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"{}\""
0 0 24 3 17 #")                "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"bad syntax\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"{bind {{x 5} {x 5}} x}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"bind* duplicate names\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"{fun {x x} x}\""
0 0 24 3 6 #")     "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"fun* duplicate names\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"{+ x 1}\""
0 0 24 3 12 #")           "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"no binding for\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"{+ 1 {fun {x} x}}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"bad input\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"{+ 1 {fun {x} x}}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"bad input\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"{1 2}\""
0 0 24 3 14 #")             "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"with a non-function\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"{{fun {x} x}}\""
0 0 24 3 6 #")     "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"arity mismatch\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{if {< 4 5} 6 7}\""
0 0 24 3 3 #")  "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{if {< 5 4} 6 7}\""
0 0 24 3 3 #")  "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"{if + 6 7}\""
0 0 24 3 9 #")        "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{fun {x} x}\""
0 0 24 3 8 #")       "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"returned a bad value\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Test laziness"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"{{fun {x} 1} {/ 9 0}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"{{fun {x} 1} {{fun {x} {x x}} {fun {x} {x x}}}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 50 #"\"{bind {{x {{fun {x} {x x}} {fun {x} {x x}}}}} 1}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Test lazy constructors"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"{bind {{l {list 1 {/ 9 0} 3}}}"
0 0 19 29 1 #"\n"
0 0 19 3 53 #"              {+ {first l} {first {rest {rest l}}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; More tests for the SLUG extensions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"'foo'\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"{with-stx 1}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"bad `with-stx' syntax\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"{with-stx {with {=}"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"                        {{with x = val expr}"
0 0 19 29 1 #"\n"
0 0 19 3 47 #"                         {bind {{x val}} expr}}"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"                        {{with x _ val expr}"
0 0 19 29 1 #"\n"
0 0 19 3 28 #"                         1}}"
0 0 19 29 1 #"\n"
0 0 19 3 52 #"              {with x = 'blah' {first {list x x}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blah\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; IO tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"{fun {} 1}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"expecting an IO value\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"{print +}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"cannot `print' a non-string value\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"{read 3}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"expecting a receiver function\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"{print 'foo'}\""
0 0 24 3 2 #") "
0 0 14 3 8 #"=output>"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"{begin2 {print 'foo'} {print 'bar'}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 8 #"=output>"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"foobar\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 6 #"input:"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blah\""
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"run-io"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"{read {fun {x} {begin2 {print x} {print x}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 8 #"=output>"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"blahblah\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 6 #"input:"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 37 #"\"{begin2 {print 'What is your name?'}"
0 0 19 29 1 #"\n"
0 0 19 3 28 #"           {read {fun {name}"
0 0 19 29 1 #"\n"
0 0 19 3 52 #"                   {begin2 {print 'Your name is '''}"
0 0 19 29 1 #"\n"
0 0 19 3 47 #"                           {begin2 {print name}"
0 0 19 29 1 #"\n"
0 0 19 3 55 #"                                   {print '''\\n'}}}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"=output>"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"What is your name?\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Your name is 'foo'\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; test two macros"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{with-stx {let {}"
0 0 19 29 1 #"\n"
0 0 19 3 54 #"                           {{let {{var val} ...} body}"
0 0 19 29 1 #"\n"
0 0 19 3 60
#"                            {{fun {var ...} body} val ...}}}"
0 0 19 29 1 #"\n"
0 0 19 3 32 #"              {with-stx {let* {}"
0 0 19 29 1 #"\n"
0 0 19 3 51 #"                              {{let* {} body} body}"
0 0 19 29 1 #"\n"
0 0 19 3 70
(
 #"                              {{let* {{id1 expr1} {id expr} ...} bod"
 #"y}"
) 0 0 19 29 1 #"\n"
0 0 19 3 49 #"                               {let {{id1 expr1}}"
0 0 19 29 1 #"\n"
0 0 19 3 54 #"                                 {let* {{id expr} ...}"
0 0 19 29 1 #"\n"
0 0 19 3 43 #"                                   body}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 53 #"                {let* {{x 1} {y {+ x 1}}} {+ x y}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; macros for I/O"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 6 #"input:"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"Foo\\nfoo@bar.com\""
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 19 #"\"{with-stx {do {<-}"
0 0 19 29 1 #"\n"
0 0 19 3 51 #"                 {{do {id <- {read}} next more ...}"
0 0 19 29 1 #"\n"
0 0 19 3 55 #"                  {read {fun {id} {do next more ...}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 48 #"                 {{do {print str} next more ...}"
0 0 19 29 1 #"\n"
0 0 19 3 58
#"                  {begin2 {print str} {do next more ...}}}"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"                 {{do expr}"
0 0 19 29 1 #"\n"
0 0 19 3 24 #"                  expr}}"
0 0 19 29 1 #"\n"
0 0 19 3 39 #"     {do {print 'What is your name?\\n'}"
0 0 19 29 1 #"\n"
0 0 19 3 25 #"         {name <- {read}}"
0 0 19 29 1 #"\n"
0 0 19 3 40 #"         {print 'What is your email?\\n'}"
0 0 19 29 1 #"\n"
0 0 19 3 26 #"         {email <- {read}}"
0 0 19 29 1 #"\n"
0 0 19 3 37 #"         {print 'Your address is '''}"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"         {print name}"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"         {print ' <'}"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"         {print email}"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"         {print '>''\\n'}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"=output>"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"What is your name?\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"What is your email?\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"Your address is 'Foo <foo@bar.com>'\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 24 #"\"{bind {{incref {fun {b}"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"                   {unref b"
0 0 19 29 1 #"\n"
0 0 19 3 34 #"                     {fun {curval}"
0 0 19 29 1 #"\n"
0 0 19 3 53 #"                       {set-ref! b {+ 1 curval}}}}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"    {newref 0"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"      {fun {i}"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"        {begin2"
0 0 19 29 1 #"\n"
0 0 19 3 20 #"          {incref i}"
0 0 19 29 1 #"\n"
0 0 19 3 17 #"          {begin2"
0 0 19 29 1 #"\n"
0 0 19 3 35 #"            {print 'i now holds: '}"
0 0 19 29 1 #"\n"
0 0 19 3 20 #"            {unref i"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"              {fun {v}"
0 0 19 29 1 #"\n"
0 0 19 3 50 #"                {begin2 {print {number->string v}}"
0 0 19 29 1 #"\n"
0 0 19 3 45 #"                        {print '\\n'}}}}}}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"=output>"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"i now holds: 1\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 19 #"\"{with-stx {do {<-}"
0 0 19 29 1 #"\n"
0 0 19 3 54 #"                 {{do {id <- {f x ...}} next more ...}"
0 0 19 29 1 #"\n"
0 0 19 3 58
#"                  {f x ... {fun {id} {do next more ...}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 41 #"                 {{do expr next more ...}"
0 0 19 29 1 #"\n"
0 0 19 3 51 #"                  {begin2 expr {do next more ...}}}"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"                 {{do expr}"
0 0 19 29 1 #"\n"
0 0 19 3 24 #"                  expr}}"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"    {bind {{incref {fun {b}"
0 0 19 29 1 #"\n"
0 0 19 3 46 #"                     {do {curval <- {unref b}}"
0 0 19 29 1 #"\n"
0 0 19 3 54 #"                         {set-ref! b {+ 1 curval}}}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"      {do {i <- {newref 0}}"
0 0 19 29 1 #"\n"
0 0 19 3 20 #"          {incref i}"
0 0 19 29 1 #"\n"
0 0 19 3 33 #"          {print 'i now holds: '}"
0 0 19 29 1 #"\n"
0 0 19 3 26 #"          {v <- {unref i}}"
0 0 19 29 1 #"\n"
0 0 19 3 36 #"          {print {number->string v}}"
0 0 19 29 1 #"\n"
0 0 19 3 26 #"          {print '\\n'}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"=output>"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"i now holds: 1\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; macros for I/O and refs (note how a `do' block is treated as just"
 #" a"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";; value, since it is one)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 19 #"\"{with-stx {do {<-}"
0 0 19 29 1 #"\n"
0 0 19 3 54 #"                 {{do {id <- {f x ...}} next more ...}"
0 0 19 29 1 #"\n"
0 0 19 3 58
#"                  {f x ... {fun {id} {do next more ...}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 41 #"                 {{do expr next more ...}"
0 0 19 29 1 #"\n"
0 0 19 3 51 #"                  {begin2 expr {do next more ...}}}"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"                 {{do expr}"
0 0 19 29 1 #"\n"
0 0 19 3 24 #"                  expr}}"
0 0 19 29 1 #"\n"
0 0 19 3 30 #"     {bind {{incref   {fun {b}"
0 0 19 29 1 #"\n"
0 0 19 3 49 #"                        {do {curval <- {unref b}}"
0 0 19 29 1 #"\n"
0 0 19 3 56 #"                            {set-ref! b {+ 1 curval}}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 34 #"            {printref {fun {b sfx}"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"                        {do {v <- {unref b}}"
0 0 19 29 1 #"\n"
0 0 19 3 54 #"                            {print {number->string v}}"
0 0 19 29 1 #"\n"
0 0 19 3 42 #"                            {print sfx}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 56 #"            {thrice   {fun {code} {do code code code}}}}"
0 0 19 29 1 #"\n"
0 0 19 3 28 #"       {do {i <- {newref 0}}"
0 0 19 29 1 #"\n"
0 0 19 3 30 #"           {print 'i holds: '}"
0 0 19 29 1 #"\n"
0 0 19 3 53 #"           {thrice {do {incref i} {printref i ', '}}}"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"           {incref i} {printref i '.\\n'}}}}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"=output>"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"i holds: 1, 2, 3, 4.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Negative tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 23 #"\"{unref 4 {fun {v} v}}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Expected a ref\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"run-io"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 16 #"\"{set-ref! 4 2}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Expected a ref\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; ================================================================"
 #"=="
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"minutes-spent"
0 0 24 3 1 #" "
0 0 21 3 3 #"750"
0 0 24 3 1 #")"
0           0           0 0           0 13 0 51 3 11 #"Welcome to "
0 0 53 3 8 #"DrRacket"
0 0 51 3 21 #", version 6.1.1 [3m]."
0 0 51 29 1 #"\n"
0 0 51 3 10 #"Language: "
0 0 54 3 14 #"pl 13 [custom]"
0 0 51 3 16 #"; memory limit: "
0 0 54 3 6 #"128 MB"
0 0 51 3 1 #"."
0 0 51 29 1 #"\n"
0 0 6 3 16 #"42 tests passed."
0 0 6 29 1 #"\n"
0 0 4 3 2 #"> "
0           0
