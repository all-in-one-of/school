/***********************************************************
	
	Eat 3D - Shader Production DVD 
	
	09_cube_mapped.cgfx 
	
	This shader is our basic phong shader, with an added cube map.
	
	- Luiz 

**************************************************************/

//////////////////////////////////////////////////////////////
// CGFX Matrices Section 
float4x4 WorldViewProjection     : WorldViewProjection   < string UIWidget = "None"; >;
float4x4 WorldInverseTranspose   : WorldInverseTranspose < string UIWidget = "None"; >;
float4x4 ViewInverse             : ViewInverse           < string UIWidget = "None"; >;
float4x4 World                   : World                 < string UIWidget = "None"; >;

// Maya Description 
string description = "Eat 3D cubemapped shader";

//////////////////////////////////////////////////////////////
// Parameters section 

float3 shaderColor : Diffuse
<
	string UIName = "Shader Color";
> = {1.0f, 1.0f, 1.0f};

float3 lightDirection : Direction
<
	string UIName = "Light Direction";
> = {0.0f, 1.0f, 0.0f};

float3 ambientColor : Diffuse
<
	string UIName = "Ambient Color";
> = {0.15f, 0.15f, 0.15f};

float fresnelPower 
<
	string UIWidget = "slider";
	string UIName = "Fresnel Power";
	float UIMin = 0.0f;
	float UIMax = 10.0f;
	float UIStep = 0.01f;
	
> = 3.0f;

float specularPower 
<
	string UIWidget = "slider";
	string UIName = "Specular Power";
	float UIMin = 0.1f;
	float UIMax = 100.0f;
	float UIStep = 0.01f;
	
> = 30.0f;

float3 specularColor : Diffuse
<
	string UIName = "Specular Color";
> = {1.0f, 1.0f, 1.0f};

texture reflectionTexture
<
	string name = "default_cube.dds";
	string UIName = "Reflection Texture";
	string ResourceType = "Cube";
>;

samplerCUBE reflectionMap = sampler_state
{

	Texture = <reflectionTexture>;
	WrapR = ClampToEdge;
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;

};


//////////////////////////////////////////////////////////////
// Structs section 
// input from application
struct a2v {
	float4 position  : POSITION;
	float2 texCoord  : TEXCOORD0;
	float4 normal    : NORMAL;
};

// output to fragment program
struct v2f {
        float4 position        : POSITION;
		float2 texCoord		   : TEXCOORD0;
		float3 worldNormal     : TEXCOORD1;
		float3 eyeVector 	   : TEXCOORD4;
};



//////////////////////////////////////////////////////////////
// Vertex Shader 
v2f vShader(a2v In)
{
    v2f Out;
    Out.position = mul(WorldViewProjection, In.position);
	
	Out.worldNormal   = mul(WorldInverseTranspose, In.normal).xyz;
	
	float3 worldSpacePos = mul(World, In.position);
	float3 worldCameraPos = float3(ViewInverse[0].w, ViewInverse[1].w, ViewInverse[2].w); 
	Out.eyeVector = worldCameraPos - worldSpacePos;
	
	Out.texCoord = In.texCoord;
	
    return Out;
}

//////////////////////////////////////////////////////////////
// Pixel Shader 
float4 pShader(v2f In) : COLOR
{
	float4 outColor;
	
	
	float3 worldNormal = normalize(In.worldNormal) ;
	// a few vectors used 
	float3 lightDir = normalize(-lightDirection);
	float3 eyeVector = normalize(In.eyeVector);
	float3 reflectionVector = - reflect(eyeVector, worldNormal);

	// read in the cube map
	float3 cubeMap = texCUBE(reflectionMap, reflectionVector);
	
	// diffuse lighting 
	float3 lambert = saturate(dot(lightDir, worldNormal));
	
	// specularity 
	float3 specular = pow(saturate(dot(reflectionVector, lightDir)), specularPower) * specularColor ;
	
	// rim lighting 
	float3 fresnel = pow(1- saturate(dot(eyeVector, worldNormal)), fresnelPower) * (lambert + ambientColor);

	float3 totalSpec = (fresnel * cubeMap)  + specular  ;
	
	outColor.rgb = (lambert + ambientColor) * (shaderColor ) + totalSpec;
	outColor.a = 1.0f;
	
	return outColor;
}

//////////////////////////////////////////////////////////////
// Techniques
technique Simple
{
    pass one
    {
		VertexShader = compile vp40 vShader();
		PixelShader = compile fp40 pShader();
    }
}