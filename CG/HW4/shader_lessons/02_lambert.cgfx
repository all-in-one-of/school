/***********************************************************
	
	Eat 3D - Shader Production DVD 
	
	02_lambert.cgfx 
	
	This shader is a step away from the base.cgfx. We've added a light direction
	and passed the normals to the pixel shader, as well as doing a dot between
	the light and the normal
	
	- Luiz 

**************************************************************/

//////////////////////////////////////////////////////////////
// CGFX Matrices Section 
float4x4 WorldViewProjection     : WorldViewProjection   < string UIWidget = "None"; >;
float4x4 WorldInverseTranspose   : WorldInverseTranspose < string UIWidget = "None"; >;
float4x4 ViewInverse             : ViewInverse           < string UIWidget = "None"; >;
float4x4 World                   : World                 < string UIWidget = "None"; >;

// Maya Description 
string description = "Eat 3D lambert shader";

//////////////////////////////////////////////////////////////
// Parameters section 

float3 shaderColor : Diffuse
<
	string UIName = "Shader Color";
> = {1.0f, 1.0f, 1.0f};

float3 lightDirection : Direction
<
	string UIName = "Light Direction";
> = {0.0f, 1.0f, 0.0f};

//////////////////////////////////////////////////////////////
// Structs section 
// input from application
struct a2v {
	float4 position  : POSITION;
	float4 normal    : NORMAL;
};

// output to fragment program
struct v2f {
        float4 position        : POSITION;
		float3 worldNormal     : TEXCOORD0;
};



//////////////////////////////////////////////////////////////
// Vertex Shader 
v2f vShader(a2v In)
{
    v2f Out;
    Out.position = mul(WorldViewProjection, In.position);
	Out.worldNormal = mul(WorldInverseTranspose, In.normal).xyz;
	
    return Out;
}

//////////////////////////////////////////////////////////////
// Pixel Shader 
float4 pShader(v2f In) : COLOR
{
	float4 outColor;
	
	float3 worldNormal = normalize(In.worldNormal);
	float3 lightDir = normalize(-lightDirection);
	
	float3 lambert = saturate(dot(lightDir, worldNormal));
	outColor.rgb = lambert  * shaderColor;
	
	outColor.a = 1.0f;
	
	
	return outColor;
}

//////////////////////////////////////////////////////////////
// Techniques
technique Simple
{
    pass one
    {
		VertexShader = compile vp30 vShader();
		PixelShader = compile fp30 pShader();
    }
}