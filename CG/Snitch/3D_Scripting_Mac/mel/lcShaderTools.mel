/////////////////////////////////////////////////////////////////////////////////
//  lcShaderTools.mel
//
//  Written to help create and interact with CGFX shader for maya's viewport
//
//  To use: run script with - lcShaderTools;
//
//  NOTE 1:
//    This script should work with any cgfx shader as long as certain conditions are met.
//    The script supports shaders with up to 3 lights - these can be point lights or directional lights in any combination.
//    The script creates Maya directional lights as the reference for the Shaders but they work for positional and directional information - it doesnt matter if your shader uses point lights even though in Maya a directional light is displayed.
//    The CGFX shader must have its light name and light color UI attributes named as follows:
//    light1Pos or light1Dir and light1Color
//    This script also looks for an Ambient Color attribute so that 'ambient lighting' can be globaly adjusted across all shaders;
//    use name `ambientColor` for user tweakable variable name for proper link-up.
//
//  NOTE 2:
//    Uses functions:
//    cgfxShader_connectVector(a,b) from AEcgfxShaderTemplate.mel
//    - These mel scripts should be a part of every Maya install from version 2009+ (cannot confirm existance in earlier versions)
//
//  NOTE 3:
//    Scale the light rig with the internal scale slider - either change value by typing - or Middle Mouse Button Drag (horizontal drag)
//    This scales the light rig 'Visualy' but does not change any transform node scale Attr's which would be bad for the .fx and .cgfx shaders and give incorrect lighting results
//
//  Author : Leonardo Covarrubias
//  Created: 11/06/2009
//  blog.leocov.com
//  www.leocov.com
//
//  Licenced under Creative Commons Attribution 3.0 Unported License
//  http://creativecommons.org/licenses/by/3.0/
//
//  Change Log:
//
//  1.0 - 11/06/2009 - inital release
//  1.1 - 03/08/2010 - added global ambient color checkbox to turn off adjusting all shaders ambient color attr's oportunity here for future revisions to make the slider only control the selected objects shaders when global checkbox is off
//  1.2 - 03/10/2010 - added ability to scale the light rig visualy only - no transform node scale is applied to any object
//  2.0 - 01/13/2011 - update and change-over from old script, now with new name and new functionality - removed HLSL functionality
//  2.1 - 02/07/2011 - color sliders are now interactive
//  2.2 - 02/15/2011 - file open dialog improved to work better with maya 2011 but retain backwards compatibility
//  2.3 - 03/21/2011 - added pointlight attributes, organization
//
/////////////////////////////////////////////////////////////////////////////////


//Current version number and latest update date
global string $lcSh_version = "2.3";
global string $lcSh_date = "Mar 21, 2011";


/////////////////////////////////////////////////////////////////////////////////
// UI Setup /////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
global proc lcShaderTools(){

    if(!`pluginInfo -q -loaded cgfxShader`){
      loadPlugin cgfxShader;
      pluginInfo -edit -autoload true cgfxShader;
    }

    global string $lcSh_version;
    global string $lcSh_date;
    int $w = 240;

//set main window
    if (`window -q -ex lcSh_Win`) deleteUI lcSh_Win;
    if (`window -q -ex lcSh_HelpWin`) deleteUI lcSh_HelpWin;

    window -title ("lcShaderTools - v"+$lcSh_version)
           -rtf 1
           -mxb 0
           -w $w
           lcSh_Win;

    menuBarLayout lcSh_MBL;
    menu -label "Tools" -tearOff true -p lcSh_MBL lcSh_Menu;
      menuItem -label "Load CGFX Plugin" -c "loadPlugin cgfxShader" -p lcSh_Menu;
      menuItem -divider true;
      menuItem -label "Reload Textures" -c "lcSh_reloadTextureNodes()" -p lcSh_Menu;
      //menuItem -label "**Save Light Config" -p lcSh_Menu;
    menu -label "Help" -helpMenu true -p lcSh_MBL lcSh_Help;
      menuItem -label "Help Notes..." -c "toggleWindowVisibility lcSh_HelpWin" -p lcSh_Help;

    columnLayout -cw $w
                 -cal "left"
                 lcSh_mainCol;
    separator -style "none"
              -h 10
              -w $w;

    rowColumnLayout -nc 2
                    -cw 1 120
                    -cw 2 120
                    -cal 2 "left"
                    lcSh_doubleCol;

    rowColumnLayout -nc 2
                    -cw 1 12
                    -cw 2 108
                    -cal 2 "left"
                    lcSh_nameCol;

    text -l " 1." -w 12 -al "left";
    textField -tx "NewShaderName" -w 108 -h 25 shaderName;

    setParent "..";

//    rowColumnLayout -nc 2
//                    -cw 1 12
//                    -cw 2 108
//                    -cal 2 "left"
//                    lcSh_shaderCol;

//    text -l " 2." -w 12 -al "left";
    button -l "2. Make CGFX"  -c "lcSh_makeCGFX()" -w 120 -h 25 -bgc 0.6 0.6 0.8;

//    setParent "..";

    button -l "3. Make Lights"         -c "lcSh_makeLights()" -w 120 -h 25 -bgc 0.6 0.8 0.6;
    button -l "4. Link/Relink Lights"  -c "lcSh_linkLights()" -w 120 -h 25;

    setParent "lcSh_mainCol";

    separator -style "none"
              -h 10
              -w $w;

    text -w $w -al "center" -fn "boldLabelFont" -l ("Rotate Lights");

    floatSlider -w $w -h 25 -min 0 -max 360 -s 1 -dc "lcSh_rotateLights()" rotSlider;
    button -l "Swap Light 1 Position (Persp<>Spinner)" -c "lcSh_lightSwap()" -w $w -h 25 -al "center" -bgc 0.9 0.76 0.45;

//    rowColumnLayout -nc 2
//                    -cw 1 (($w)*.8)
//                    -cw 2 (($w)*.2)
//                    lcSh_visScaleCol;
//    text -al "right" -l "Light Rig Scale  =  ";
//    floatField -min 1 -pre 0 -s 1 -bgc 0.25 0.25 0.25 -v 1 -cc "lcSh_lightRigScale()" -dc "lcSh_lightRigScale()" visScale;
//    setParent "lcSh_mainCol";

    separator -style "none"
              -h 10
              -w $w;

    text -w $w -al "left" -fn "boldLabelFont" -l ("Directional Lights:");
    colorSliderGrp -l "Light 1" -w $w -cw3 60 60 120 -rgb 1.0  1.0   1.0   -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" light1Color;
    colorSliderGrp -l "Light 2" -w $w -cw3 60 60 120 -rgb 0.25 0.165 0.093 -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" light2Color;
    colorSliderGrp -l "Light 3" -w $w -cw3 60 60 120 -rgb 0.11 0.2   0.25  -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" light3Color;

    separator -style "none"
              -h 10
              -w $w;

    text -w $w -al "left" -fn "boldLabelFont" -l ("Point Lights:");
    colorSliderGrp -l "Light 4" -w $w -cw3 60 60 120 -rgb 0.0  0.0   0.0   -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" light4Color;
    floatSliderGrp -l "Atten 4" -w $w -cw3 60 60 120 -ad3 3 -field true -minValue   0.0 -maxValue 100.0 -fieldMinValue  0.0 -fieldMaxValue 5000.0 -value 1.0 -s 0.1  -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" light4Atten;
    colorSliderGrp -l "Light 5" -w $w -cw3 60 60 120 -rgb 0.0  0.0   0.0   -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" light5Color;
    floatSliderGrp -l "Atten 5" -w $w -cw3 60 60 120 -ad3 3 -field true -minValue   0.0 -maxValue 100.0 -fieldMinValue  0.0 -fieldMaxValue 5000.0 -value 1.0 -s 0.1  -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" light5Atten;
    colorSliderGrp -l "Light 6" -w $w -cw3 60 60 120 -rgb 0.0  0.0   0.0   -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" light6Color;
    floatSliderGrp -l "Atten 6" -w $w -cw3 60 60 120 -ad3 3 -field true -minValue   0.0 -maxValue 100.0 -fieldMinValue  0.0 -fieldMaxValue 5000.0 -value 1.0 -s 0.1  -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" light6Atten;

    separator -style "none"
              -h 10
              -w $w;


    text -w $w -al "left" -fn "boldLabelFont" -l ("Global Controls:");
    checkBox -l "Enable Global Controls" -v 1 globalControls;
    floatSliderGrp -l "Tonemap"     -w $w -cw3 60 60 120 -ad3 3 -field true -minValue   0.0 -maxValue  1.0 -fieldMinValue   0.0 -fieldMaxValue   1.0 -value 0.0 -s 0.01 -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" sceneTonemapping;
    floatSliderGrp -l "Exposure"    -w $w -cw3 60 60 120 -ad3 3 -field true -minValue -10.0 -maxValue 10.0 -fieldMinValue -10.0 -fieldMaxValue  10.0 -value 0.0 -s 0.01 -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" sceneExposure;
    colorSliderGrp -l "Ambient"     -w $w -cw3 60 60 120 -rgb 0.0 0.0 0.0 -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" sceneAmbientColor;
    floatSliderGrp -l "Glbl Atten"  -w $w -cw3 60 60 120 -ad3 3 -field true -minValue   0.0 -maxValue 100.0 -fieldMinValue  0.0 -fieldMaxValue 5000.0 -value 1.0 -s 0.1  -cc "lcSh_adjustAttrs()" -dc "lcSh_adjustAttrs()" sceneAtten;


    separator -style "none"
              -h 10
              -w $w;

    button -l "5. Reload all CGFX Shaders"  -c "lcSh_refreshShaders()"     -w $w -h 25 -al "center" -bgc 0.8 0.6 0.6;
    button -l "6. Reload all Texture Nodes" -c "lcSh_reloadTextureNodes()" -w $w -h 25 -al "center";

    separator -style "in"
              -h 10
              -w $w;
    text -label ("Leonardo Covarrubias - " + $lcSh_date + " ")
         -al "right"
         -w $w;

    //open the UI Window
    showWindow lcSh_Win;

    ///////////////////////////////////////////////////////////////////
    // Help Window
    int $wH = 400;
    int $hH = 250;

    window -title ("HELP - lcShaderTools - v"+$lcSh_version)
           -retain
           -rtf 1
           -mxb 0
           -s 0
           -w $wH
           -h $hH
           lcSh_HelpWin;
    columnLayout -cw $wH
                 -cal "center"
                 lcSh_Help_mc;
    text -l "General Help Topics"
         -al "center"
         -w $wH;
    scrollField -w $wH
                -h ($hH-15)
                -ww 1
                -editable 0
                -ip 1
                -tx ("The latest .cgfx shader files are always located here\n http://blog.leocov.com/p/downloads.html \n\n 1. Make sure you are in Viewport Shaded and Textured Mode by pressing 6 on the keyboard.\n\n 2. If Neccessary you can load the cgfxShader.mll plug in from the script windows' Tools Menu.\n\n 3. Be careful moving UV's on combined objects with the shader, you risk a crash.\n\n4. To see your textures in the UV Editor, use the UV Editor's Textures Menu and select the appropriate one.\n\n 5. If all else fails, ask Leo.")
                lcSh_Help_scfl;

    ///////////////////////////////////////////////////////////////
    // Extra Stuff
    if(`attributeExists "lcSh_scale" lcShaderTools`) {
      floatField -e -v `getAttr lcShaderTools.lcSh_scale` visScale;
    }
}

/////////////////////////////////////////////////////////////////////////////////
// Functions List ///////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Make CGFX shader nodes
global proc lcSh_makeCGFX(){
    string $sel[] = `ls -sl`;

    string $shaderName = `textField -q -tx shaderName`;
    if($shaderName == "NewShaderName")$shaderName  = "cgfxShader";

    string $cgfxFile[];
    if (`about -api` > 201100){ //test for api version of maya 2011 or greater
      $cgfxFile = `fileDialog2 -cap "Select a CGFX Shader to Apply" -fm 1 -ff "CGFX Shader (*.cgfx)"`; // fileDialog2 is new for 2011
    }else{
      $cgfxFile[0] = `fileDialog -m 0 -dm "*.cgfx" -t "Open a CGFX .cgfx Shader File"`;
    }

    string $shader = `shadingNode -asShader cgfxShader -name $shaderName`;
    string $sg   = `sets -renderable true -noSurfaceShader true -empty -n ($shader+"SG")`;
    connectAttr -f ($shader+".outColor") ($sg+".surfaceShader");
    cgfxShader -e -fx $cgfxFile[0] $shader;

    int $i = 0;
    while ($sel[$i]!=""){
        select -r $sel[$i];
        sets -e -forceElement ($sg);
        $i++;
    }

    print ("**** Created CGFX Shader: "+$shader+" ****\n");

    //link lights and tweak their rotations to update shaders
    lcSh_linkLights();
    lcSh_tweakLights();
}

/////////////////////////////////////////////////////////////////////////////////
// Get a list of all CGFX shaders in the scene
global proc string[] lcSh_getCGFXShaders(){
    string $L[] = `ls -type cgfxShader`;
    return $L;
}

/////////////////////////////////////////////////////////////////////////////////
// Refresh/Reload all the shaders in the scene - tends to also reload file nodes
global proc lcSh_refreshShaders(){

    print("//////////////////////////////////////////////////////////////////////\n");
    print("//////////// Reloating All Viewport Shaders - Please Wait ////////////\n");
    print("//////////////////////////////////////////////////////////////////////\n\n");

    $i = 0;
    string $C[] = lcSh_getCGFXShaders();
    if($C[0]=="") print("**** No CGFX Shader Nodes found in this Scene ****\n");
    while ($C[$i]!="")
    {
        string $shader = $C[$i];
        $i += 1;
        string $cgfxFile = `getAttr ($shader+".shader")`;
        if($cgfxFile!="")
        {
            setAttr -type "string" ($shader+".shader") $cgfxFile;
            cgfxShader -e -fx $cgfxFile $shader;
        }
    }

    //link lights and tweak their rotations to update shaders
    lcSh_linkLights();
    lcSh_tweakLights();
}

/////////////////////////////////////////////////////////////////////////////////
// Create the light rig
global proc lcSh_makeLights(){
    if(`objExists lcShaderTools`) delete lcShaderTools;
    if(`objExists lcSh_loc`) delete lcSh_loc;
    if(`objExists lcSh_spin`) delete lcSh_spin;
    if(`objExists lcSh_light1`) delete lcSh_light1;
    if(`objExists lcSh_light2`) delete lcSh_light2;
    if(`objExists lcSh_light3`) delete lcSh_light3;
    if(`objExists lcSh_light4`) delete lcSh_light4;
    if(`objExists lcSh_light5`) delete lcSh_light5;
    if(`objExists lcSh_light6`) delete lcSh_light6;
    if(`objExists lcSh_ldirDefault`) delete lcSh_ldirDefault;
    if(`objExists lcSh_lightMover`) delete lcSh_lightMover;

    if(!`objExists lcShaderTools`){
        group -em -n "lcShaderTools";
    }
    if(!`objExists lcSh_loc`){
        spaceLocator -n "lcSh_loc";
        setAttr "lcSh_loc.localScale" 0 0 0;
    }
    if(!`objExists lcSh_spin`){
        group -em -n "lcSh_spin";
    }
    //light1
    if(!`objExists lcSh_light1`){
      directionalLight -n "lcSh_light1";
    }
    //light2
    if(!`objExists lcSh_light2`){
        directionalLight -n "lcSh_light2";
        move 20 0 -20 lcSh_light2;
        rotate 45 135 0 lcSh_light2;
    }
    //light3
    if(!`objExists lcSh_light3`){
        directionalLight -n "lcSh_light3";
        move -20 0 -20 lcSh_light3;
        rotate 45 -135 0 lcSh_light3;
    }
    //light4
    if(!`objExists lcSh_light4`){
      pointLight -n "lcSh_light4";
      move 0 10 10 lcSh_light4;
    }
    //light5
    if(!`objExists lcSh_light5`){
        pointLight -n "lcSh_light5";
        move 10 10 -10 lcSh_light5;
    }
    //light6
    if(!`objExists lcSh_light6`){
        pointLight -n "lcSh_light6";
        move -10 10 -10 lcSh_light6;
    }

    //Default location Locator/mover for Light 1 - this enables swap of light 1 from camera to rig and back
    if(!`objExists lcSh_lightMover`){
        spaceLocator -n "lcSh_lightMover";
        setAttr "lcSh_lightMoverShape.localScale" 0 0 0;
    }
    if(!`objExists lcSh_ldirDefault`){
        spaceLocator -n "lcSh_ldirDefault";
        move 0 20 20 lcSh_ldirDefault;
        rotate -45 0 0 lcSh_ldirDefault;
        setAttr "lcSh_ldirDefault.visibility" 0;
    }

    if(`objExists lcSh_light1`) parent lcSh_light1 lcSh_lightMover;
    if(`objExists lcSh_light2`) parent lcSh_light2 lcSh_spin;
    if(`objExists lcSh_light3`) parent lcSh_light3 lcSh_spin;
    if(`objExists lcSh_light4`) parent lcSh_light4 lcSh_loc;
    if(`objExists lcSh_light5`) parent lcSh_light5 lcSh_loc;
    if(`objExists lcSh_light6`) parent lcSh_light6 lcSh_loc;

    if(`objExists lcSh_spin`) parent lcSh_spin lcSh_loc;
    if(`objExists lcSh_loc`) parent lcSh_loc lcShaderTools;
    if(`objExists lcSh_ldirDefault`) parent lcSh_ldirDefault lcSh_spin;
    if(`objExists lcSh_lightMover`) parent lcSh_lightMover lcShaderTools;

    //Constraints
    pointConstraint -name "lcSh_pointConst" persp lcSh_ldirDefault lcSh_lightMover;
    pointConstraint -e -w 1 lcSh_ldirDefault lcSh_lightMover;
    pointConstraint -e -w 0 persp lcSh_lightMover;

    orientConstraint -name "lcSh_orientconst" persp lcSh_ldirDefault lcSh_lightMover;
    orientConstraint -e -w 1 lcSh_ldirDefault lcSh_lightMover;
    orientConstraint -e -w 0 persp lcSh_lightMover;


    if(`currentUnit -query -linear`=="m"){
      float $scale = 100;
      setAttr "lcSh_lightShape1.locatorScale" $scale;
      setAttr "lcSh_lightShape2.locatorScale" $scale;
      setAttr "lcSh_lightShape3.locatorScale" $scale;
    }


//    //reset the light scale floatField
//    floatField -e -v 1 visScale;

//    //add a attr to store the scale of the rig between sessions
//    if(!`attributeExists "lcSh_scale" lcShaderTools`) {
//      addAttr -ln "lcSh_scale"  -at double  -min 1 -dv 1 lcShaderTools;
//      setAttr "lcShaderTools.lcSh_scale" 1;
//    }

    //link lights clear selection
    lcSh_linkLights();
    select -cl;
}

/////////////////////////////////////////////////////////////////////////////////
// Link light positions/direction to shaders
global proc lcSh_linkLights(){
    int $i = 0;

    $i = 0;
    string $C[] = lcSh_getCGFXShaders ();
    while ($C[$i]!="")
    {
        string $shdr = $C[$i];
        string $plug;
        string $src;
        //Light1
        if(`objExists lcSh_light1` && `attributeExists "light1Dir" $shdr`){
            $plug = $shdr+".light1Dir";
            $src = "lcSh_light1";
            cgfxShader_connectVector($plug, $src);
        }
        //Light2
        if(`objExists lcSh_light2` && `attributeExists "light2Dir" $shdr`){
            $plug = $shdr+".light2Dir";
            $src = "lcSh_light2";
            cgfxShader_connectVector($plug, $src);
        }
        //Light3
        if(`objExists lcSh_light3` && `attributeExists "light3Dir" $shdr`){
            $plug = $shdr+".light3Dir";
            $src = "lcSh_light3";
            cgfxShader_connectVector($plug, $src);
        }
        //Light4
        if(`objExists lcSh_light4` && `attributeExists "light4Pos" $shdr`){
            $plug = $shdr+".light4Pos";
            $src = "lcSh_light4";
            cgfxShader_connectVector($plug, $src);
        }
        //Light5
        if(`objExists lcSh_light5` && `attributeExists "light5Pos" $shdr`){
            $plug = $shdr+".light5Pos";
            $src = "lcSh_light5";
            cgfxShader_connectVector($plug, $src);
        }
        //Light6
        if(`objExists lcSh_light6` && `attributeExists "light6Pos" $shdr`){
            $plug = $shdr+".light6Pos";
            $src = "lcSh_light6";
            cgfxShader_connectVector($plug, $src);
        }
        $i += 1;
    }

    //Link light Colors
    lcSh_adjustAttrs();
}

/////////////////////////////////////////////////////////////////////////////////
// Link script light color swatches to shader UI light colors and actual light node colors
global proc lcSh_adjustAttrs(){
  int $i = 0;

  float $col1[]   = `colorSliderGrp -q -rgb light1Color`;
  float $col2[]   = `colorSliderGrp -q -rgb light2Color`;
  float $col3[]   = `colorSliderGrp -q -rgb light3Color`;
  float $col4[]   = `colorSliderGrp -q -rgb light4Color`;
  float $col5[]   = `colorSliderGrp -q -rgb light5Color`;
  float $col6[]   = `colorSliderGrp -q -rgb light6Color`;
  float $colAmb[] = `colorSliderGrp -q -rgb sceneAmbientColor`;

  if(`objExists lcSh_light1`) setAttr -type double3 "lcSh_lightShape1.color" $col1[0] $col1[1] $col1[2];
  if(`objExists lcSh_light2`) setAttr -type double3 "lcSh_lightShape2.color" $col2[0] $col2[1] $col2[2];
  if(`objExists lcSh_light3`) setAttr -type double3 "lcSh_lightShape3.color" $col3[0] $col3[1] $col3[2];
  if(`objExists lcSh_light4`) setAttr -type double3 "lcSh_lightShape4.color" $col4[0] $col4[1] $col4[2];
  if(`objExists lcSh_light5`) setAttr -type double3 "lcSh_lightShape5.color" $col5[0] $col5[1] $col5[2];
  if(`objExists lcSh_light6`) setAttr -type double3 "lcSh_lightShape6.color" $col6[0] $col6[1] $col6[2];

  $i = 0;
  string $C[] = lcSh_getCGFXShaders ();
  while ($C[$i]!="")
    {
        string $shader = $C[$i];
        $i += 1;
        if(`attributeExists "light1Color" $shader`) setAttr -type double3 ($shader+".light1Color") $col1[0] $col1[1] $col1[2];
        if(`attributeExists "light2Color" $shader`) setAttr -type double3 ($shader+".light2Color") $col2[0] $col2[1] $col2[2];
        if(`attributeExists "light3Color" $shader`) setAttr -type double3 ($shader+".light3Color") $col3[0] $col3[1] $col3[2];
        if(`attributeExists "light4Color" $shader`) setAttr -type double3 ($shader+".light4Color") $col4[0] $col4[1] $col4[2];
        if(`attributeExists "light5Color" $shader`) setAttr -type double3 ($shader+".light5Color") $col5[0] $col5[1] $col5[2];
        if(`attributeExists "light6Color" $shader`) setAttr -type double3 ($shader+".light6Color") $col6[0] $col6[1] $col6[2];

        if(`attributeExists "ambientColor" $shader` && `checkBox -q -v globalControls`) setAttr -type double3 ($shader+".ambientColor") $colAmb[0] $colAmb[1] $colAmb[2];
        if(`attributeExists "globalTonemap" $shader` && `checkBox -q -v globalControls`) setAttr ($shader+".globalTonemap") `floatSliderGrp -q -v sceneTonemapping`;
        if(`attributeExists "exposure" $shader` && `checkBox -q -v globalControls`) setAttr ($shader+".exposure") `floatSliderGrp -q -v sceneExposure`;

        if(`attributeExists "light4atten" $shader`) setAttr ($shader+".light4atten") (`floatSliderGrp -q -v sceneAtten`*`floatSliderGrp -q -v light4Atten`);
        if(`attributeExists "light5atten" $shader`) setAttr ($shader+".light5atten") (`floatSliderGrp -q -v sceneAtten`*`floatSliderGrp -q -v light5Atten`);
        if(`attributeExists "light6atten" $shader`) setAttr ($shader+".light6atten") (`floatSliderGrp -q -v sceneAtten`*`floatSliderGrp -q -v light6Atten`);
    }

}

/////////////////////////////////////////////////////////////////////////////////
// move lights a tiny bit to update shaders connections
global proc lcSh_tweakLights(){
    if(`objExists lcSh_light1`){
        move -r 0 0 1 lcSh_light1;
        move -r 0 0 -1 lcSh_light1;
    }
    if(`objExists lcSh_light2`){
        move -r 0 0 1 lcSh_light2;
        move -r 0 0 -1 lcSh_light2;
    }
    if(`objExists lcSh_light2`){
        move -r 0 0 1 lcSh_light3;
        move -r 0 0 -1 lcSh_light3;
    }
}

/////////////////////////////////////////////////////////////////////////////////
// Rotate the light rig with slider
global proc lcSh_rotateLights (){
    $angle = `floatSlider -q -v rotSlider`;
    rotate 0 $angle 0 lcSh_spin;
}

/////////////////////////////////////////////////////////////////////////////////
// Swap the Main Directional Light between spinner and persp camera
global proc lcSh_lightSwap(){
  if(`pointConstraint -q -w lcSh_ldirDefault lcSh_lightMover`)
  {
    pointConstraint -e -w 0 lcSh_ldirDefault lcSh_lightMover;
    pointConstraint -e -w 1 persp lcSh_lightMover;
    orientConstraint -e -w 0 lcSh_ldirDefault lcSh_lightMover;
    orientConstraint -e -w 1 persp lcSh_lightMover;
    setAttr "lcSh_light1.visibility" 0;
    setAttr "lcSh_light1.rotate" -25 25 0;
    setAttr "lcSh_light1.translate" 0 0 0;
  }else{
    pointConstraint -e -w 1 lcSh_ldirDefault lcSh_lightMover;
    pointConstraint -e -w 0 persp lcSh_lightMover;
    orientConstraint -e -w 1 lcSh_ldirDefault lcSh_lightMover;
    orientConstraint -e -w 0 persp lcSh_lightMover;
    setAttr "lcSh_light1.visibility" 1;
    setAttr "lcSh_light1.rotate" 0 0 0;
    setAttr "lcSh_light1.translate" 0 0 0;
  }

}

///////////////////////////////////////////////////////////////////////////////////
//// Visualy Scale the light rig without changing any transform node scale - instead move the lights and increase their locator size
//global proc lcSh_lightRigScale(){
//  float $scale = `floatField -q -v visScale`;
//
//  if(`objExists lcSh_lightShape1` && `objExists lcSh_light2` && `objExists lcSh_light3`){
//    move -ls (0*$scale)   (20*$scale) (20*$scale) lcSh_ldirDefault;
//    move -ls (20*$scale)  (0*$scale)  (-20*$scale) lcSh_light2;
//    move -ls (-20*$scale) (0*$scale)  (-20*$scale) lcSh_light3;
//
//    setAttr "lcSh_lightShape1.locatorScale" $scale;
//    setAttr "lcSh_lightShape2.locatorScale" $scale;
//    setAttr "lcSh_lightShape3.locatorScale" $scale;
//
//    setAttr "lcSh_locShape.localScaleX" $scale;
//    setAttr "lcSh_locShape.localScaleY" $scale;
//    setAttr "lcSh_locShape.localScaleZ" $scale;
//
//    setAttr "lcShaderTools.lcSh_scale" $scale;
//  }
//}

/////////////////////////////////////////////////////////////////////////////////
// Reload Scene File Texture Nodes
global proc lcSh_reloadTextureNodes()
{
  string $sel[] = `ls -type file`;
    int $i = 0;
    while ($sel[$i]!="")
    {
        string $fnode = $sel[$i];
        $i += 1;
        string $path = `getAttr ($fnode+".fileTextureName")`;
        if($path!="")
        {
            setAttr -type "string" ($fnode+".fileTextureName") $path;
        }
    }
}

//EOC