/////////////////////////////////////////////////////////////////author: Patrick Drewello//Manchester School of Architecture//date:2010.02.16//function: setup repel particles in scene///////////////////////////////////////////////////////////////clearCache -all;string $repel_obs [] = `ls -tr "REPEL*"`;string $bBox1[] = `ls -tr "BooleanBox"`; 							float $minValue[] = `getAttr ($bBox1[0] + ".boundingBoxMin")`;	//define max and min values of bounding box	float $maxValue[] = `getAttr ($bBox1[0] + ".boundingBoxMax")`; 		vector $sub_vec;	vector $bBox1_vec = <<(($minValue[0] + $maxValue[0])*.5), (($minValue[1] + $maxValue[1])*.5), (($minValue[2] + $maxValue[2])*.5)>>;for ($ii=0;$ii<size($repel_obs);$ii++){for ($i=0;$i<size($repel_obs);$i++){	float $repel_coord [] = `getAttr ($repel_obs[$i] + ".center")`;	vector $repel_vec = <<($repel_coord[0]), ($repel_coord[1]), ($repel_coord[2])>>; 		//float $repel_XMax []= `getAttr ($repel_obs[$i] + ".boundingBoxMax")`;		//define max and min values of each sphere		//float $repel_XMin []= `getAttr ($repel_obs[$i] + ".boundingBoxMin")`;				$sub_vec = $bBox1_vec - $repel_vec;				if (($repel_coord [0] < $maxValue [0] && $repel_coord [0] > $minValue [0]) && ($repel_coord [1] < $maxValue [1] && $repel_coord [1] > $minValue [1]) && ($repel_coord [2] < $maxValue [2] && $repel_coord [2] > $minValue [2])) {			print "1.repel_object_within_window_";			print ("\n");			} else {			print "2.not_within_window_";			print ("\n");			select $repel_obs[$i];//			pointConstraint -o `geAttr($bBox1[0]) + ".center"`;			move -r (($sub_vec.x)*0.95) (($sub_vec.y)*0.95) (($sub_vec.z)*0.95) $repel_obs[$i];			currentTime ($i);			}}}