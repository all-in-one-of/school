/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: advance biped setup
''    Author:  
''    Last Updated: Apr 26, 2009
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/animation/5218.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/
/*'========================================================================='' NAME: CSSADSET'' AUTHOR   :  ali reza khodakarami' DATE     : 2/Jul/2008' EMAIL    : ali@3ddigitize.com' WEB SITE : www.3ddigitize.com' INSTALLATION: In command line write : "source AdvanceBipedSetup.mel;CSSADSET;". Then middle 			mouse drage to shelf and make a MEL button for it.' COMMENT: Well after years of rigging characters by hand and spending a lot of time 		on setup , started to write some scripts for rigging characters automatically		, and this is the final resault of them (after writing 3 or 4 before this !)		This script goes step by step and the only job you have is just set your		bone positions at first step and just guid it on times it needs settings in		different windows.		This rigging is based on "Alias Hyper Real Body Setup" training kit.		The second section is manual section for adding things that are not in the		script.		I must say that I have used some ready MELs from highend3d.com and some from		other people , so for making your job easy I gathered all of them in this 		script. Just take a look at the manual section and you'll find some known ones		like "Rivet" , "Volum Wire" , "Control Circle Creator" , "Stretchy IK" ,		"Piston Rigging" and "Bone On Curve".		Remember that this script is for rigging Biped character and quadruped , 		bird , and insect characters will be the next job.'' Contents :  1- Automatic rigging process  2- Character has user setup for deferent parts so if you don't need them uncheck them  3- Character can have stretchy spine , hand , leg , head , ear , sensor , vacume , tail , and eye  4- Character can have auto clavicle  5- Character can have IK / FK blending  6- Character can have auto adjust hip  7- Character can have auto scapula  8- Character can have deferent parenting for each helper handle for scene needs  9- script will create a low res geometry automatically  10- Character have two deferent rigging system as control (wich has ik and other settings) , 	and boundry (wich has just bones). the control will have low rez geo for real time animation	and the boundry will skinned to mesh and connects to control later on when you want to render !  11- Character has dynamic system for tail, sensor, ear, and vacume letting you have secondary motion      with complete control on animating the same part without needing to play every frame as other dynamics'		'' added on version 3 :	1- some minor changes in code , now you can choose finalize character from setup menu as many times as you want	   without getting error message	2- added dynamic options for Tail, Sensor, Ears ,and vacume with complete working with your previous helper system	   with letting you have secondary motions in playback (everyframe as other dynamics)' added on version 2 :	1- windows are resized depending on your settings	2- on parenting attribute of helpers added none condition to use later for attaching motion builder exported animation	3- motion builder animation plotting to character system added in setup menu' added options in version 1.5 :	1- geometry eyes setup	2- ulnar and radial bones for forearm		'' bugs fixed in version 1.5 :	1- bugs fixed for autoclavicle that caused bones to deform uncorrectly	2- deleting the history for lowrez geos when you reshape them for highrez living you the ability to use the radius attribute for them	3- scale constrainting lowrez geos when you reshape them for highrez living you the ability to scale them after creating them	4- bugs fixed for error when you delete hand fingers after creating the locator helper system and want to finalize your rig with ik/fk switch	5- fixed uncorrect parenting for top left sensor and ear helpers in replacment system''' I tested it in one project on maya 2008 but it must work on maya 7 and upper ,   just email me any bugs u get (if there was any!) and remember to email the settings , exact   error and level of process that you found bug.'''' Thanks for using my mel, you are free to use it in commercial projects , just let me know if   you had done something greate with this script.'''' Known bugs : none'''==========================================================================*///*************************************************************************************************************//*******************************************   Make dynamic iks    *******************************************//*************************************************************************************************************proc css_adset_dynik (string $nm){if (`objExists ($nm+"_?_ClsHandle")`) delete ($nm+"_?_ClsHandle");if (`objExists ($nm+"_IK_HND")`) delete ($nm+"_IK_HND");int $jnnum;string $tmp[];if ($nm=="L_Ear"||$nm=="R_Ear") $jnnum=`getAttr Character_HLP.earNum`;if ($nm=="L_Sen"||$nm=="R_Sen") $jnnum=`getAttr Character_HLP.sensorNum`;if ($nm=="Vac") $jnnum=`getAttr Character_HLP.vacumeNum`;if ($nm=="Tail") $jnnum=`getAttr Character_HLP.tailNum`;float $pos[],$pos2[],$pos3[],$pos4[];rename ($nm+"_Crv") "TMP_Dyn_Crv";rebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s ($jnnum-3) -d 3 -tol 0.01 "TMP_Dyn_Crv";for ($i=0;$i<$jnnum;$i++){$pos=`xform -q -ws -piv ($nm+"_"+($i+1)+"_SK_JNT")`;move $pos[0] $pos[1] $pos[2] ("TMP_Dyn_Crv.cv["+$i+"]");}css_TD_LockUnlock ("TMP_Dyn_Crv",1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0);DeleteHistory TMP_Dyn_Crv;select -r TMP_Dyn_Crv;parent -w;CenterPivot TMP_Dyn_Crv;makeCurvesDynamicHairs false false false;if (`objExists follicle2`){parent TMP_Dyn_Crv follicle1;delete follicle2;}if (`objExists curve2`) delete curve2;rename curve1 ($nm+"_Dyn_Crv");select -cl;setAttr "hairSystemShape1.drag" 0;setAttr "hairSystemShape1.friction" 0;setAttr "hairSystemShape1.motionDrag" 0;setAttr "hairSystemShape1.damp" 0;setAttr "hairSystemShape1.mass" 0;setAttr "hairSystemShape1.gravity" 0;setAttr "hairSystemShape1.dynamicsWeight" 0;setAttr "hairSystemShape1.startCurveAttract" 0.5;setAttr "hairSystemShape1.attractionDamp" 0.2;$pos=`xform -q -ws -piv ($nm+"_1_HLP")`;$pos2=`xform -q -ws -piv ($nm+"_2_HLP")`;$pos3=`xform -q -ws -piv ($nm+"_3_HLP")`;$pos4=`xform -q -ws -piv ($nm+"_4_HLP")`;joint -p $pos[0] $pos[1] $pos[2] ;joint -p $pos2[0] $pos2[1] $pos2[2] ;joint -e -zso -oj zxy -sao yup joint1;joint -p $pos3[0] $pos3[1] $pos3[2] ;joint -e -zso -oj zxy -sao yup joint2;joint -p $pos4[0] $pos4[1] $pos4[2] ;joint -e -zso -oj zxy -sao yup joint3;rename joint1 ($nm+"_Dyn_1_JNT");rename joint2 ($nm+"_Dyn_2_JNT");rename joint3 ($nm+"_Dyn_3_JNT");rename joint4 ($nm+"_Dyn_4_JNT");parentConstraint -mo -n ($nm+"_Dyn_1_CNS") ($nm+"_1_HLP") ($nm+"_Dyn_1_JNT");parentConstraint -mo -n ($nm+"_Dyn_2_CNS") ($nm+"_2_HLP") ($nm+"_Dyn_2_JNT");parentConstraint -mo -n ($nm+"_Dyn_3_CNS") ($nm+"_3_HLP") ($nm+"_Dyn_3_JNT");parentConstraint -mo -n ($nm+"_Dyn_4_CNS") ($nm+"_4_HLP") ($nm+"_Dyn_4_JNT");ikHandle -n ($nm+"_Dyn_IK_HND") -sj ($nm+"_1_SK_JNT") -ee ($nm+"_"+$jnnum+"_SK_JNT") -sol "ikSplineSolver" -c ($nm+"_Dyn_Crv") -ccv 0 -roc 1 -pcv 0 -snc 0 -scv 0 -cra 0 -tws "linear" -rtm 0;select -r ($nm+"_Dyn_1_JNT");select -add TMP_Dyn_Crv;bindSkin -ts -ta -cj -n($nm+"_Dyn_Sk_Cls");parent ($nm+"_Dyn_1_JNT") ($nm+"_1_SK_JNT_Jcon_JNT");parent hairSystem1Follicles H_EX_GRP;parent hairSystem1OutputCurves Cls_GRP;parent hairSystem1Follicles CRV_GRP;parent hairSystem1 H_EX_GRP;rename hairSystem1Follicles ($nm+"_Follicles");rename follicle1 ($nm+"_follicle");rename TMP_Dyn_Crv ($nm+"_Dyn_CN_Crv");rename hairSystem1 ($nm+"_hairSystem");rename hairSystem1OutputCurves ($nm+"_OutputCurves");parent ($nm+"_Follicles") H_EX_GRP;parent ($nm+"_Dyn_IK_HND") IK_GRP;}//*************************************************************************************************************//*********************************************   Main Window    **********************************************//*************************************************************************************************************global proc CSSADSET () {setObjectPickMask "Marker" false;setObjectPickMask "Joint" false;setObjectPickMask "Surface" false;setObjectPickMask "Deformer" false;setObjectPickMask "Dynamic" false;setObjectPickMask "Rendering" false;setObjectPickMask "Other" false;setObjectPickMask "Curve" false;if (`window -exists CSS_ADSET`) deleteUI CSS_ADSET;window -t "Advance Biped Setup" CSS_ADSET;columnLayout -adj 1 main_col;optionMenuGrp -l"Setup" -cw 1 50 -cc "css_adset_setup 19" adset_m_opm;menuItem -l"Select >>>>>>>>>>>>>>>>>>>>>>>";menuItem -l"Create Helper Replacement System";menuItem -l"Create Skeleton From Helpers";menuItem -l"Finalize Character";menuItem -l"Control And Boundry";menuItem -l"Connect Bondry to Control";menuItem -l"Lock / Unlock Weights";menuItem -l"Geometry Eyes Setup";menuItem -l"Connect M.B. Animation";rowColumnLayout -nc 2 -cw 1 125 -cw 2 125;button -l"<<< Mirror <<<" -c "adset_mir_l_2_r";button -l">>> Mirror >>>" -c "adset_mir_r_2_l";setParent..;separator;separator;frameLayout -cll 1 -cc {"int $t=`window -q -h CSS_ADSET`;window -e -wh 260 ($t-330) CSS_ADSET"} -cl 1 -ec {"int $t=`window -q -h CSS_ADSET`;window -e -wh 260 ($t+330) CSS_ADSET"} -l"Biped Options Section";rowColumnLayout -nc 2 -cw 1 125 -cw 2 125;checkBox -l"Has Foot" -v 1 -onc"css_adset_setup 1" -ofc"css_adset_setup 2" adset_foot_bx;checkBox -l"Has Hand" -v 1 -onc"css_adset_setup 3" -ofc"css_adset_setup 4" adset_hand_bx;checkBox -l"Has Head" -v 1 -onc"css_adset_setup 5" -ofc"css_adset_setup 6" adset_head_bx;checkBox -l"Has Ears" -onc"css_adset_setup 7" -ofc"css_adset_setup 8" adset_ear_bx;checkBox -l"Has Sensors" -onc"css_adset_setup 9" -ofc"css_adset_setup 10" adset_sens_bx;checkBox -l"Has Vacume" -onc"css_adset_setup 11" -ofc"css_adset_setup 12" adset_vac_bx;checkBox -l"Has Tail" -onc"css_adset_setup 13" -ofc"css_adset_setup 14" adset_tail_bx;checkBox -l"Has 3 Set Wings" -onc"checkBox -e -vis 1 -en 1 adset_ik_wing_bx;" -ofc"checkBox -e -vis 0 -en 0 -v 0 adset_ik_wing_bx;" adset_wing_bx;checkBox -l"Has Fingers in Hand" -onc "intSliderGrp -e -en 1 -v 5 adset_fin_num;" -ofc"intSliderGrp -e -en 0 -v 0 adset_fin_num;" -v 1 adset_hfing_bx;checkBox -l"Has Fingers in Foot" adset_ffing_bx;checkBox -l"IK Spine" -vis 1 -en 1 -v 1 -onc {"checkBox -e -en 1 -vis 1 -v 0 adset_st_body_bx;checkBox -e -en 1 -vis 1 -v 0 adset_st_neck_bx;"} -ofc {"checkBox -e -en 0 -vis 0 -v 0 adset_st_body_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_neck_bx;"} adset_ik_spin_bx;checkBox -l"IK Ear" -vis 0 -en 0 -onc {"checkBox -e -vis 1 -en 1 -v 0 adset_st_ear_bx;checkBox -e -vis 1 -v 0 -en 1 adset_Dyn_Ears_bx;"} -ofc {"checkBox -e -vis 0 -en 0 -v 0 adset_st_ear_bx;checkBox -e -vis 0 -v 0 -en 0 adset_Dyn_Ears_bx;"} adset_ik_ear_bx;checkBox -l"IK Sensor" -vis 0 -en 0 -onc {"checkBox -e -vis 1 -en 1 -v 0 adset_st_sens_bx;checkBox -e -vis 1 -v 0 -en 1 adset_Dyn_Sensor_bx;"} -ofc {"checkBox -e -vis 0 -en 0 -v 0 adset_st_sens_bx;checkBox -e -vis 0 -v 0 -en 0 adset_Dyn_Sensor_bx;"} adset_ik_sen_bx;checkBox -l"IK Vacume" -vis 0 -en 0 -onc {"checkBox -e -vis 1 -en 1 -v 0 adset_st_vac_bx;checkBox -e -vis 1 -v 0 -en 1 adset_Dyn_Vac_bx;"} -ofc {"checkBox -e -vis 0 -en 0 -v 0 adset_st_vac_bx;checkBox -e -vis 0 -v 0 -en 0 adset_Dyn_Vac_bx;"} adset_ik_vac_bx;checkBox -l"IK Tail" -vis 0 -en 0 -onc {"checkBox -e -vis 1 -en 1 -v 0 adset_st_tail_bx;checkBox -e -vis 1 -v 0 -en 1 adset_Dyn_Tail_bx;"} -ofc {"checkBox -e -vis 0 -en 0 -v 0 adset_st_tail_bx;checkBox -e -vis 0 -v 0 -en 0 adset_Dyn_Tail_bx;"} adset_ik_tail_bx;checkBox -l"IK Wings" -vis 0 -en 0 adset_ik_wing_bx;checkBox -l"Stretchy Body" adset_st_body_bx;checkBox -l"Stretchy Neck" adset_st_neck_bx;checkBox -l"Stretchy Foot" adset_st_foot_bx;checkBox -l"Stretchy Hands" adset_st_hand_bx;checkBox -l"Stretchy Head" adset_st_head_bx;checkBox -l"Stretchy Eyes" adset_st_eye_bx;checkBox -l"Stretchy Ears" -vis 0 -en 0 adset_st_ear_bx;checkBox -l"Stretchy Sensors" -vis 0 -en 0 adset_st_sens_bx;checkBox -l"Stretchy Vacume" -vis 0 -en 0 adset_st_vac_bx;checkBox -l"Stretchy Tail" -vis 0 -en 0 adset_st_tail_bx;checkBox -l"Dynamic Ears" -vis 0 -en 0 adset_Dyn_Ears_bx;checkBox -l"Dynamic Sensor" -vis 0 -en 0 adset_Dyn_Sensor_bx;checkBox -l"Dynamic Vacume" -vis 0 -en 0 adset_Dyn_Vac_bx;checkBox -l"Dynamic Tail" -vis 0 -en 0 adset_Dyn_Tail_bx;separator;separator;separator;separator;intSliderGrp -l"Fingers" -f 1 -cw 2 20 -adj 3 -cw 1 50 -v 5 -min 0 -max 5 -fmn 0 -fmx 5 -en 1 adset_fin_num;checkBox -l"FK / IK Switch" -v 1 adset_ikfk_bx;checkBox -l"Auto Shoulder Switch" -v 1 adset_shld_bx;checkBox -l"Auto Adjust Hip" adset_aut_hip_bx;button -l"Set to Default" -c"css_adset_setup 15" adset_set_dif_btn;button -l"Select ALL" -c"css_adset_setup 16" adset_set_all_btn;button -l"Clear All" -c"css_adset_setup 17" adset_set_non_btn;button -l"Set to Cartoony" -c"css_adset_setup 18" adset_set_crt_btn;setParent..;setParent..;separator;separator;frameLayout -cll 1 -cc {"int $t=`window -q -h CSS_ADSET`;window -e -wh 260 ($t-305) CSS_ADSET;"}  -cl 1 -ec {"int $t=`window -q -h CSS_ADSET`;window -e -wh 260 ($t+305) CSS_ADSET"} -l"Manual TD Section";rowColumnLayout -nc 8 -cw 1 31 -cw 2 31 -cw 3 31 -cw 4 32 -cw 5 31 -cw 6 31 -cw 7 31 -cw 8 32;iconTextButton -i "kinJoint.xpm" -l "Jnt" -c"JointTool" -st "iconAndTextVertical";iconTextButton -i "kinJoint.xpm" -l "Jnt O" -c"JointToolOptions" -st "iconAndTextVertical";iconTextButton -i "kinMirrorJoint_S.xpm" -l"Mir O" -c"MirrorJointOptions" -st "iconAndTextVertical";iconTextButton -i "orientJoint.xpm" -l"Ori" -c"joint -e -oj xzy -secondaryAxisOrient yup -ch -zso" -st "iconAndTextVertical";iconTextButton -i "orientJoint.xpm" -l"Ori O" -c"OrientJointOptions" -st "iconAndTextVertical";iconTextButton -i"poleVectorConstraint.xpm" -c "poleVectorConstraint -weight 1" -l"Pl V" -st "iconAndTextVertical";iconTextButton -i "locator.xpm" -c"spaceLocator" -l"Lc" -st "iconAndTextVertical";iconTextButton -i"menuIconDeformations.xpm" -c"CreateCluster" -l "clu" -st "iconAndTextVertical";iconTextButton -i "kinHandle.xpm" -l "IK" -c"IKHandleTool" -st "iconAndTextVertical";iconTextButton -i "kinHandle.xpm" -l "IK O" -c"IKHandleToolOptions" -st "iconAndTextVertical";iconTextButton -i "kinSplineHandle.xpm" -l"IK" -c"IKSplineHandleTool" -st "iconAndTextVertical";iconTextButton -i "kinSplineHandle.xpm" -l"IK O" -c"IKSplineHandleToolOptions" -st "iconAndTextVertical";iconTextButton -i "OFFSETCURVE.XPM" -l"1" -c "EPCurveTool;curveEPCtx -e -d 1 `currentCtx`;" -st "iconAndTextVertical";iconTextButton -i "OFFSETCURVE.XPM" -l"3" -c "EPCurveTool;curveEPCtx -e -d 3 `currentCtx`;" -st "iconAndTextVertical";iconTextButton -i "OFFSETCURVE.XPM" -l"5" -c "EPCurveTool;curveEPCtx -e -d 5 `currentCtx`;" -st "iconAndTextVertical";iconTextButton -i "OFFSETCURVE.XPM" -l"7" -c "EPCurveTool;curveEPCtx -e -d 7 `currentCtx`;" -st "iconAndTextVertical";iconTextButton -i"posConstraint.xpm" -c "pointConstraint -mo -weight 1" -l"Ps M" -st "iconAndTextVertical";iconTextButton -i"posConstraint.xpm" -c "PointConstraintOptions"-l"Ps O" -st "iconAndTextVertical";iconTextButton -i"posConstraint.xpm" -c "pointConstraint -weight 1" -l"Ps Z" -st "iconAndTextVertical";iconTextButton -i"orientConstraint.xpm" -c "orientConstraint -mo -weight 1" -l"Or M" -st "iconAndTextVertical";iconTextButton -i"orientConstraint.xpm" -c "OrientConstraintOptions" -l"Or O" -st "iconAndTextVertical";iconTextButton -i"orientConstraint.xpm" -c "orientConstraint -weight 1" -l"Or Z" -st "iconAndTextVertical";iconTextButton -i"parentConstraint.xpm" -l"Pr M" -c "parentConstraint -mo -weight 1" -st "iconAndTextVertical";iconTextButton -i"parentConstraint.xpm" -l"Pr O" -c "ParentConstraintOptions" -st "iconAndTextVertical";iconTextButton -i"aimConstraint.xpm" -l"Am M" -c"aimConstraint -mo -weight 1" -st "iconAndTextVertical";iconTextButton -i"aimConstraint.xpm" -l"Am O" -c"AimConstraintOptions" -st "iconAndTextVertical";iconTextButton -i"aimConstraint.xpm" -l"Am Z" -c"aimConstraint -weight 1" -st "iconAndTextVertical";iconTextButton -i"EXTEND.XPM" -c"createNode curveInfo" -l"Inf" -st "iconAndTextVertical";iconTextButton -i"render_condition.xpm" -c"createNode condition" -l"Con" -st "iconAndTextVertical";iconTextButton -i"render_multiplyDivide.xpm" -c"createNode multiplyDivide" -l"M D" -st "iconAndTextVertical";iconTextButton -i"render_distanceBetween.xpm" -c"createNode distanceBetween" -l"Dis" -st "iconAndTextVertical";iconTextButton -i"RENDER_REVERSE.XPM" -c"createNode reverse" -l"Rvr" -st "iconAndTextVertical";for ($i=0;$i<16;$i++) separator;iconTextButton -i"POLYNORMALSCONFORM.XPM" -c"templateSkeleton_createTemp_doIt" -l"O S" -st "iconAndTextVertical";iconTextButton -i"POLYNORMALSPROPAGATE.XPM" -c"templateSkeleton_reBuildChain_doIt" -l"O F" -st "iconAndTextVertical";iconTextButton -i"importSmoothSkin.xpm" -c"css_adset_mn_ex" -l"MB" -st "iconAndTextVertical";iconTextButton -i"ghost.xpm" -c"adset_cn_attr" -l"ATTR" -st "iconAndTextVertical";iconTextButton -i"circle.xpm" -c"adset_cnt_crc" -l"C C" -st "iconAndTextVertical";iconTextButton -i"polySmoothProxy.xpm" -c"makeReference" -l"TMP" -st "iconAndTextVertical";iconTextButton -i"MOVEEP.XPM" -c"adset_wir_win" -l"Wir" -st "iconAndTextVertical";iconTextButton -i"IKSPLINEMANIP.XPM" -c"adset_st_win" -l"S IK" -st "iconAndTextVertical";iconTextButton -i"KININSERT.XPM" -c"adset_man_con_bon" -l"CON" -st "iconAndTextVertical";iconTextButton -i"MENUICONBODIES.XPM" -c"PistonSetup;" -l"PST" -st "iconAndTextVertical";iconTextButton -i"SPRING.XPM" -c"SpringSetup;" -l"SPR" -st "iconAndTextVertical";iconTextButton -i"SRT.XPM" -c"CenterPivot" -l"C P" -st "iconAndTextVertical";iconTextButton -i"TEXT.XPM" -c"FreezeTransformationsOptions" -l"F T" -st "iconAndTextVertical";iconTextButton -i"PTPOSCRVCONSTRAINT.XPM" -c"performadset_BonesOnCurve 1;" -l"BoC" -st "iconAndTextVertical";iconTextButton -i"PTPOSSURFCONSTRAINT.XPM" -c"rivet" -l"Riv" -st "iconAndTextVertical";iconTextButton -i"RENDER_PLUSMINUSAVERAGE.XPM" -c"createNode plusMinusAverage" -l"+ -" -st "iconAndTextVertical";setParent..;setParent..;setParent..;separator;separator;optionMenuGrp -l"Helper" -cw 1 50 -cc"css_adset_setup 20" adset_h_opm;menuItem -l"Select >>>>>>>>>>>>>>>>>>>>>>>";menuItem -l"Jack 6";menuItem -l"Jack 5";menuItem -l"Jack 4";menuItem -l"Jack 3";menuItem -l"Jack 2";menuItem -l"Jack 1";menuItem -l"Arrow 4";menuItem -l"Arrow 2";menuItem -l"Arrow 1";menuItem -l"Sphere";menuItem -l"Square";menuItem -l"Cube";menuItem -l"Circle";menuItem -l"Pyramid";menuItem -l"H Slider";menuItem -l"V Slider";menuItem -l"Square Slider";menuItem -l"Cube Slider";menuItem -l"Parent Shape Under Selection";menuItem -l"Circle & Arrow 4";showWindow CSS_ADSET;window -e -w 258 -h 166 CSS_ADSET;}//*************************************************************************************************************//*********************************************   MB Lc Create   **********************************************//*************************************************************************************************************global proc css_adset_mb_lc (){string $nm[],$tmp[];$nm={"L_Foot","R_Foot","L_Knee","R_Knee","Root","L_Hand","L_Elbow","R_Hand","R_Elbow","Sp_1","Sp_2","Sp_3","Clavicle","Neck_B","Neck_M","Head","R_Shoulder","L_Shoulder"};for ($obj in $nm){if (`objExists ($obj+"_HLP")`){$tmp=`spaceLocator`;parentConstraint -n "mb_tmp_cnt" ($obj+"_HLP") $tmp;delete mb_tmp_cnt;scale .3 .3 .3 $tmp;rename $tmp ($obj+"_MB_Lc");}}select -cl;}//*************************************************************************************************************//*********************************************   MB Lc Connect  **********************************************//*************************************************************************************************************global proc css_adset_lc_ex (){string $nm[],$jn[];$nm={"L_Foot","R_Foot","L_Knee","R_Knee","Root","L_Hand","L_Elbow","R_Hand","R_Elbow","Sp_1","Sp_2","Sp_3","Clavicle","Neck_B","Neck_M","Head","R_Shoulder","L_Shoulder"};$jn={"LeftFoot","RightFoot","LeftLeg","RightLeg","Hips","LeftHand","LeftForearm","RightHand","RightForearm","Spine","Spine1","Spine2","Spine3","Neck","Neck1","Head","RightShoulder","LeftShoulder"};int $i=0;for ($obj in $nm){if (`objExists ($obj+"_MB_Lc")`){parent ($obj+"_MB_Lc") $jn[$i];$i++;}}select -cl;}//*************************************************************************************************************//*********************************************   MB HLP Connect **********************************************//*************************************************************************************************************global proc css_adset_anim_in (){string $nm[];$nm={"L_Foot","R_Foot","L_Knee","R_Knee","Root","L_Hand","L_Elbow","R_Hand","R_Elbow","Sp_1","Sp_2","Sp_3","Clavicle","Neck_B","Neck_M","Head","R_Shoulder","L_Shoulder"};for ($obj in $nm){if (`objExists ($obj+"_HLP")`){if (`attributeExists "Parenting" ($obj+"_HLP")`) setAttr ($obj+"_HLP.Parenting") 0;parentConstraint -n ($obj+"_MB_CON") ($obj+"_MB_Lc") ($obj+"_H_GRP");}}if (`attributeExists "L_Clavicle_B_ACLV_JNTW0" "L_Shoulder_MB_CON"`) setAttr ("L_Shoulder_MB_CON.L_Clavicle_B_ACLV_JNTW0") 0;if (`attributeExists "R_Clavicle_B_ACLV_JNTW0" "R_Shoulder_MB_CON"`) setAttr ("R_Shoulder_MB_CON.R_Clavicle_B_ACLV_JNTW0") 0;}//*************************************************************************************************************//*********************************************   MB Con Window  **********************************************//*************************************************************************************************************global proc css_mb_con_win (){if (`window -exists CSS_MBCON`) deleteUI CSS_MBCON;window -t "M.B. Connect" CSS_MBCON;columnLayout -adj 1;button -l "Create Locators" -c"css_adset_mb_lc";button -l "Rename Joints For M.B." -c"css_adset_mn_ex";button -l "Connect locators to Joints" -c"css_adset_lc_ex";button -l "Connect Helpers to Locators" -c"css_adset_anim_in";showWindow CSS_MBCON;window -e -wh 200 123 CSS_MBCON;}//*************************************************************************************************************//*********************************************  Ulna Radia Finalize  *****************************************//*************************************************************************************************************global proc css_ul_rad_final (){string $prnt="L_Elbow_SK_JNT";string $chld="L_Ulna_S_SK_JNT";string $cntrl="L_Ulna";crt_jcon_jori ($prnt,$chld,$cntrl);string $prnt="L_Elbow_SK_JNT";string $chld="L_Radius_S_SK_JNT";string $cntrl="L_Radius";crt_jcon_jori ($prnt,$chld,$cntrl);string $prnt="R_Elbow_SK_JNT";string $chld="R_Ulna_S_SK_JNT";string $cntrl="R_Ulna";crt_jcon_jori ($prnt,$chld,$cntrl);string $prnt="R_Elbow_SK_JNT";string $chld="R_Radius_S_SK_JNT";string $cntrl="R_Radius";crt_jcon_jori ($prnt,$chld,$cntrl);parent L_Ulna_S_BN_JNT L_Elbow_BN_JNT;parent L_Radius_S_BN_JNT L_Elbow_BN_JNT;parent R_Ulna_S_BN_JNT R_Elbow_BN_JNT;parent R_Radius_S_BN_JNT R_Elbow_BN_JNT;parent R_Radius_S_SK_JNT_Jcon_JNT JNT_GRP;parent L_Radius_S_SK_JNT_Jcon_JNT JNT_GRP;parent R_Ulna_S_SK_JNT_Jcon_JNT JNT_GRP;parent L_Ulna_S_SK_JNT_Jcon_JNT JNT_GRP;parent L_Ulna_S_SK_JNT_Ori_NOD Ori_GRP;parent R_Ulna_S_SK_JNT_Ori_NOD Ori_GRP;parent L_Radius_S_SK_JNT_Ori_NOD Ori_GRP;parent R_Radius_S_SK_JNT_Ori_NOD Ori_GRP;float $pos[];$pos=`xform -q -ws -piv L_Wrist_SK_JNT`;string $tmp[];$tmp=`spaceLocator`;move $pos[0] $pos[1] $pos[2] $tmp[0];rename $tmp[0] L_Wrist_Lc;connectAttr L_Wrist_SK_JNT.rx L_Wrist_Lc.rx;ikHandle -sol "ikRPsolver" -sj L_Ulna_S_SK_JNT -ee L_Ulna_E_SK_JNT -n "L_Ulna_IK_HND";ikHandle -sol "ikRPsolver" -sj L_Radius_S_SK_JNT -ee L_Radius_E_SK_JNT -n "L_Radius_IK_HND";parentConstraint -mo -n "L_Radius_IK_CNT" L_Wrist_SK_JNT L_Radius_IK_HND;parentConstraint -mo -n "L_Ulna_IK_CNT" L_Wrist_SK_JNT L_Ulna_IK_HND;parent L_Ulna_IK_HND IK_GRP;parent L_Radius_IK_HND IK_GRP;parent L_Wrist_Lc H_EX_GRP;pointConstraint -mo -n "L_Wrist_Lc_CNT" L_Hand_HLP L_Wrist_Lc;$pos=`xform -q -ws -piv R_Wrist_SK_JNT`;string $tmp[];$tmp=`spaceLocator`;move $pos[0] $pos[1] $pos[2] $tmp[0];rename $tmp[0] R_Wrist_Lc;connectAttr R_Wrist_SK_JNT.rx R_Wrist_Lc.rx;ikHandle -sol "ikRPsolver" -sj R_Ulna_S_SK_JNT -ee R_Ulna_E_SK_JNT -n "R_Ulna_IK_HND";ikHandle -sol "ikRPsolver" -sj R_Radius_S_SK_JNT -ee R_Radius_E_SK_JNT -n "R_Radius_IK_HND";parentConstraint -mo -n "R_Radius_IK_CNT" R_Wrist_SK_JNT R_Radius_IK_HND;parentConstraint -mo -n "R_Ulna_IK_CNT" R_Wrist_SK_JNT R_Ulna_IK_HND;parent R_Ulna_IK_HND IK_GRP;parent R_Radius_IK_HND IK_GRP;parent R_Wrist_Lc H_EX_GRP;pointConstraint -mo -n "R_Wrist_Lc_CNT" R_Hand_HLP R_Wrist_Lc;delete "?_Ulna_?_Lc";delete "?_Radius_?_Lc";delete "?_Ulna_Crv";delete "?_Radius_Crv";connectAttr L_Elbow_SK_JNT.sx L_Ulna_S_SK_JNT.sx;connectAttr L_Elbow_SK_JNT.sx L_Radius_S_SK_JNT.sx;connectAttr R_Elbow_SK_JNT.sx R_Ulna_S_SK_JNT.sx;connectAttr R_Elbow_SK_JNT.sx R_Radius_S_SK_JNT.sx;select -cl;if (`window -exists adset_ul_rad_win`) deleteUI adset_ul_rad_win;}//*************************************************************************************************************//*********************************************   Ulna Radia Bone  ********************************************//*************************************************************************************************************global proc css_ul_rad_bone (){select -r L_Ulna_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "L_Ulna_S_SK_JNT";rename joint2 "L_Ulna_E_SK_JNT";select -r L_Radius_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "L_Radius_S_SK_JNT";rename joint2 "L_Radius_E_SK_JNT";select -r R_Ulna_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "R_Ulna_S_SK_JNT";rename joint2 "R_Ulna_E_SK_JNT";select -r R_Radius_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "R_Radius_S_SK_JNT";rename joint2 "R_Radius_E_SK_JNT";select -r L_Ulna_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "L_Ulna_S_BN_JNT";rename joint2 "L_Ulna_E_BN_JNT";select -r L_Radius_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "L_Radius_S_BN_JNT";rename joint2 "L_Radius_E_BN_JNT";select -r R_Ulna_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "R_Ulna_S_BN_JNT";rename joint2 "R_Ulna_E_BN_JNT";select -r R_Radius_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "R_Radius_S_BN_JNT";rename joint2 "R_Radius_E_BN_JNT";select -cl;}//*************************************************************************************************************//*********************************************   Ulna Radia TMP  *********************************************//*************************************************************************************************************global proc css_ul_rad_tmp (){string $nm[];int $rt[];$nm={"L_Ulna_S","R_Ulna_S","L_Radius_S","R_Radius_S"};for ($i=0;$i<size($nm);$i++){if(`objExists ($nm[$i]+"_SK_JNT")`){select -r ($nm[$i]+"_SK_JNT");templateSkeleton_createTemp_doIt;refresh;}if(`objExists ($nm[$i]+"_SK_JNT")`){select -r ($nm[$i]+"_BN_JNT");templateSkeleton_createTemp_doIt;refresh;}}setAttr "L_Ulna_S_SK_JNT.rotGui" 90;setAttr "L_Radius_S_SK_JNT.rotGui" 90;setAttr "R_Ulna_S_SK_JNT.rotGui" -90;setAttr "R_Radius_S_SK_JNT.rotGui" -90;setAttr "L_Ulna_S_BN_JNT.rotGui" 90;setAttr "L_Radius_S_BN_JNT.rotGui" 90;setAttr "R_Ulna_S_BN_JNT.rotGui" -90;setAttr "R_Radius_S_BN_JNT.rotGui" -90;select -cl;}//*************************************************************************************************************//*********************************************   Ulna Radia Ori **********************************************//*************************************************************************************************************global proc css_ul_rad_fin_ori (){string $nm[];select "templateSkeletonN_*";$nm=`ls -sl`;for ($i=0;$i<size($nm);$i++){select -r $nm[$i];templateSkeleton_reBuildChain_doIt;select -cl;refresh;}}//*************************************************************************************************************//*********************************************   Ulna Radia Win  *********************************************//*************************************************************************************************************global proc css_ul_rad_set_win (){if (`window -exists adset_ul_rad_win`) deleteUI adset_ul_rad_win;if (`window -exists adset_ul_rad_ques`) deleteUI adset_ul_rad_ques;window -t "ForeArm" adset_ul_rad_win;columnLayout -adj 1;button -l"Create Helper System" -c"css_ul_rad_hlp";button -l"Create Bones" -c"css_ul_rad_bone";button -l"Start Orientation" -c"css_ul_rad_tmp";button -l"Orient Bones" -c"css_ul_rad_fin_ori";button -l"Finalize" -c"css_ul_rad_final";showWindow adset_ul_rad_win;window -e -wh 160 146 adset_ul_rad_win;}//*************************************************************************************************************//*********************************************   Ulna Radia Question******************************************//*************************************************************************************************************global proc adset_ul_rad_win (){if (`window -exists adset_ul_rad_ques`) deleteUI adset_ul_rad_ques;window -t "ForeArm" adset_ul_rad_ques;columnLayout -adj 1;text -l "Do you need Ulna & Radius ?";separator;button -l"Yes go for setup" -c "css_ul_rad_set_win";separator;button -l"No thanks I'v finished" -c "deleteUI adset_ul_rad_ques";showWindow adset_ul_rad_ques;window -e -wh 161 102 adset_ul_rad_ques;}//*************************************************************************************************************//*********************************************   Geo Eye Setup  **********************************************//*************************************************************************************************************global proc css_geo_eye_setup (){string $eye=`textField -q -tx css_geo_eye`;string $sb=`textField -q -tx css_geo_sbone`;string $eb=`textField -q -tx css_geo_ebone`;int $sd=`radioButtonGrp -q -sl css_eye_radio`;string $s;if ($sd==1) $s="L_";if ($sd==2) $s="R_";string $l=($s+$eye+"_Ltc");select -r $eye;DeleteHistory;makeIdentity -a 1 -t 1 -r 1 -s 1 $eye;string $l=($s+"Eye_Ltc");select -r $eye;string $tmp[],$tp;$tmp=`lattice -dv 2 2 3 -oc 1 -ol 1 `;rename $tmp[1] $l;rename $tmp[2] ($l+"_Base");select -r ($l+".pt[0:1][0:1][0]");cluster -n ($l+"_B_Cls");select -r ($l+".pt[0:1][0:1][1]");cluster -n ($l+"_M_Cls");select -r ($l+".pt[0:1][0:1][2]");cluster -n ($l+"_F_Cls");float $pos[];$pos=`xform -q -ws -piv $sb`;$tmp=`spaceLocator`;move $pos[0] $pos[1] $pos[2] $tmp[0];rename $tmp[0] ($l+"_M_Lc");$pos=`xform -q -ws -piv $eb`;$tmp=`spaceLocator`;move $pos[0] $pos[1] $pos[2] $tmp[0];rename $tmp[0] ($l+"_F_Lc");pointConstraint -mo -n "L_Eye_B_Cls_P_CNT" ($l+"_M_Lc") ($l+"_B_ClsHandle");pointConstraint -mo -n "L_Eye_M_Cls_P_CNT" ($l+"_M_Lc") ($l+"_M_ClsHandle");pointConstraint -mo -n "L_Eye_F_Cls_P_CNT" ($l+"_F_Lc") ($l+"_F_ClsHandle");orientConstraint -mo -n "L_Eye_M_Cls_O_CNT" ($l+"_M_Lc") ($l+"_M_ClsHandle");orientConstraint -mo -n "L_Eye_F_Cls_O_CNT" ($l+"_F_Lc") ($l+"_F_ClsHandle");pointConstraint -mo -n "L_Eye_M_Lc_P_CNT" $sb ($l+"_M_Lc");orientConstraint -mo -n "L_Eye_M_Lc_O_CNT" $sb ($l+"_M_Lc");pointConstraint -mo -n "L_Eye_F_Lc_P_CNT" $eb ($l+"_F_Lc");orientConstraint -mo -n "L_Eye_F_Lc_O_CNT" $eb ($l+"_F_Lc");select -r $l;group -n ($l+"_S_Z_GRP");pointConstraint -mo -n($l+"S_Z_P_CNT") $sb ($l+"_S_Z_GRP"); if (!`objExists Eyes_Cls_GRP`) group -em -n "Eyes_Cls_GRP";parent ($l+"_?_ClsHandle") Eyes_Cls_GRP;if (!`objExists Eyes_Cnt_GRP`){if (!`objExists Eyes_Lc_GRP`)group -em -n "Eyes_Lc_GRP";group -em -n "Eyes_Cnt_GRP";parent Eyes_Lc_GRP Eyes_Cnt_GRP;parent Eyes_Cls_GRP Eyes_Cnt_GRP;if (!`objExists H_EX_GRP`) group -em -n "H_EX_GRP";parent Eyes_Cnt_GRP H_EX_GRP;}parent ($l+"_?_Lc") Eyes_Lc_GRP;parent ($l+"_S_Z_GRP") Eyes_Cnt_GRP;parent ($l+"_Base") Eyes_Cnt_GRP;if (!`objExists Character_HLP`) group -em -n "Character_HLP";if (`objExists Character_HLP`){connectAttr -f Character_HLP.sz ($l+"_S_Z_GRP.sz");connectAttr -f Character_HLP.sy ($l+"_B_ClsHandle.sy");connectAttr -f Character_HLP.sy ($l+"_M_ClsHandle.sy");connectAttr -f Character_HLP.sy ($l+"_F_ClsHandle.sy");connectAttr -f Character_HLP.sx ($l+"_B_ClsHandle.sx");connectAttr -f Character_HLP.sx ($l+"_M_ClsHandle.sx");connectAttr -f Character_HLP.sx ($l+"_F_ClsHandle.sx");string $con=`createNode -n ($l+"_Con_NOD") condition`;setAttr ($con+".secondTerm") 1;setAttr ($con+".colorIfTrueR") 0;setAttr ($con+".colorIfFalseR") 1;connectAttr -f Character_HLP.sz ($con+".firstTerm");connectAttr -f ($con+".outColorR") ($l+"S_Z_P_CNT."+$sb+"W0");string $rev=`createNode -n ($l+"_Rev_NOD") reverse`;connectAttr -f ($l+"S_Z_P_CNT."+$sb+"W0") ($rev+".inputX");connectAttr -f ($rev+".outputX") ("L_Eye_F_Lc_P_CNT."+$eb+"W0");connectAttr -f ($rev+".outputX") ("L_Eye_M_Lc_P_CNT."+$sb+"W0");}select -cl;}//*************************************************************************************************************//*********************************************   Ulna Radia HLP  *********************************************//*************************************************************************************************************global proc css_ul_rad_hlp (){string $tmp[],$tp;float $pos[],$poss[];$pos=`xform -q -ws -piv L_Elbow_SK_JNT`;$poss=`xform -q -ws -piv L_Wrist_SK_JNT`;$tp=`curve -d 1 -p $pos[0] ($pos[1]+.2) ($pos[2]+.2) -p $poss[0] ($poss[1]+.2) ($poss[2]+.2) -k 0 -k 1 -n "L_Ulna_Crv"`;$tp=`curve -d 1 -p $pos[0] ($pos[1]+.2) ($pos[2]-.2) -p $poss[0] ($poss[1]+.2) ($poss[2]-.2) -k 0 -k 1 -n "L_Radius_Crv"`;select -r L_Ulna_Crv.cv[0];cluster -n "L_Ulna_S_Cls";select -r L_Ulna_Crv.cv[1];cluster -n "L_Ulna_E_Cls";$tmp=`spaceLocator`;move $pos[0] ($pos[1]+.2) ($pos[2]+.2) $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] "L_Ulna_S_Lc";$tmp=`spaceLocator`;move $poss[0] ($poss[1]+.2) ($poss[2]+.2) $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] "L_Ulna_E_Lc";parentConstraint -mo -n "L_Ulna_S_Cls_CNT" L_Ulna_S_Lc L_Ulna_S_ClsHandle;parentConstraint -mo -n "L_Ulna_E_Cls_CNT" L_Ulna_E_Lc L_Ulna_E_ClsHandle;select -r L_Radius_Crv.cv[0];cluster -n "L_Radius_S_Cls";select -r L_Radius_Crv.cv[1];cluster -n "L_Radius_E_Cls";$tmp=`spaceLocator`;move $pos[0] ($pos[1]+.2) ($pos[2]-.2) $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] "L_Radius_S_Lc";$tmp=`spaceLocator`;move $poss[0] ($poss[1]+.2) ($poss[2]-.2) $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] "L_Radius_E_Lc";parentConstraint -mo -n "L_Radius_S_Cls_CNT" L_Radius_S_Lc L_Radius_S_ClsHandle;parentConstraint -mo -n "L_Radius_E_Cls_CNT" L_Radius_E_Lc L_Radius_E_ClsHandle;$pos=`xform -q -ws -piv R_Elbow_SK_JNT`;$poss=`xform -q -ws -piv R_Wrist_SK_JNT`;$tp=`curve -d 1 -p $pos[0] ($pos[1]+.2) ($pos[2]+.2) -p $poss[0] ($poss[1]+.2) ($poss[2]+.2) -k 0 -k 1 -n "R_Ulna_Crv"`;$tp=`curve -d 1 -p $pos[0] ($pos[1]+.2) ($pos[2]-.2) -p $poss[0] ($poss[1]+.2) ($poss[2]-.2) -k 0 -k 1 -n "R_Radius_Crv"`;select -r R_Ulna_Crv.cv[0];cluster -n "R_Ulna_S_Cls";select -r R_Ulna_Crv.cv[1];cluster -n "R_Ulna_E_Cls";$tmp=`spaceLocator`;move $pos[0] ($pos[1]+.2) ($pos[2]+.2) $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] "R_Ulna_S_Lc";$tmp=`spaceLocator`;move $poss[0] ($poss[1]+.2) ($poss[2]+.2) $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] "R_Ulna_E_Lc";parentConstraint -mo -n "R_Ulna_S_Cls_CNT" R_Ulna_S_Lc R_Ulna_S_ClsHandle;parentConstraint -mo -n "R_Ulna_E_Cls_CNT" R_Ulna_E_Lc R_Ulna_E_ClsHandle;select -r R_Radius_Crv.cv[0];cluster -n "R_Radius_S_Cls";select -r R_Radius_Crv.cv[1];cluster -n "R_Radius_E_Cls";$tmp=`spaceLocator`;move $pos[0] ($pos[1]+.2) ($pos[2]-.2) $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] "R_Radius_S_Lc";$tmp=`spaceLocator`;move $poss[0] ($poss[1]+.2) ($poss[2]-.2) $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] "R_Radius_E_Lc";parentConstraint -mo -n "R_Radius_S_Cls_CNT" R_Radius_S_Lc R_Radius_S_ClsHandle;parentConstraint -mo -n "R_Radius_E_Cls_CNT" R_Radius_E_Lc R_Radius_E_ClsHandle;parent "?_Ulna_?_ClsHandle" Cls_GRP;parent "?_Radius_?_ClsHandle" Cls_GRP;select -cl;}//*************************************************************************************************************//*********************************************   Geo Eye Win    **********************************************//*************************************************************************************************************global proc css_geo_eye_win (){if (`window -exists GeoEyeWin`) deleteUI GeoEyeWin;window -t "Eyes" GeoEyeWin;columnLayout -adj 1;rowColumnLayout -nc 3 -cw 1 40 -cw 3 30 -cw 2 50;text -l"Eye";textField -tx "" css_geo_eye;button -l"<<<" -c "string $tmp[];$tmp=`ls -sl`;textField -e -tx $tmp[0] css_geo_eye";text -l"S Bone";textField -tx "" css_geo_sbone;button -l"<<<" -c "string $tmp[];$tmp=`ls -sl`;textField -e -tx $tmp[0] css_geo_sbone";text -l"E Bone";textField -tx "" css_geo_ebone;button -l"<<<" -c "string $tmp[];$tmp=`ls -sl`;textField -e -tx $tmp[0] css_geo_ebone";setParent..;radioButtonGrp -nrb 2 -cw 1 65 -cw 2 50 -l1 "Left" -l2 "Right" -sl 1 css_eye_radio;button -l "Setup" -c"css_geo_eye_setup";showWindow GeoEyeWin;window -e -wh 130 140 GeoEyeWin;}//*************************************************************************************************************//*********************************************Auto Scapula Finalize*******************************************//*************************************************************************************************************global proc adset_aut_scap_final (){if (`window -exists adset_aut_scap_win`) deleteUI adset_aut_scap_win;parentConstraint -mo -n "L_Scap_Lc_CON" Spine_2_SK_JNT L_Scapula_Aim_At_Lc;parentConstraint -mo -n "R_Scap_Lc_CON" Spine_2_SK_JNT R_Scapula_Aim_At_Lc;parentConstraint -mo -n "Scap_Lc_CON" Clav_B_SK_JNT Scapula_Aim_Up_Lc;aimConstraint -n "L_Scap_Aim_CON" -aim 1 0 0 -wut "object" -wuo Scapula_Aim_Up_Lc L_Scapula_Aim_At_Lc L_Scapula_S_SK_JNT;aimConstraint -n "R_Scap_Aim_CON" -aim -1 0 0 -wut "object" -wuo Scapula_Aim_Up_Lc R_Scapula_Aim_At_Lc R_Scapula_S_SK_JNT;crt_jcon_jori ("L_Clavicle_B_SK_JNT","L_Scapula_S_SK_JNT","L_Scapula");crt_jcon_jori ("R_Clavicle_B_SK_JNT","R_Scapula_S_SK_JNT","R_Scapula");parent L_Scapula_S_BN_JNT L_Clavicle_B_BN_JNT;parent R_Scapula_S_BN_JNT R_Clavicle_B_BN_JNT;parent "*_Scapula_Aim_At_Lc" H_EX_GRP;parent Scapula_Aim_Up_Lc H_EX_GRP;delete Scapula_TMP_GRP;parent L_Scapula_S_SK_JNT_Jcon_JNT JNT_GRP;parent R_Scapula_S_SK_JNT_Jcon_JNT JNT_GRP;parent "*_Scapula_S_SK_JNT_Ori_NOD" Ori_GRP;addAttr -ln "scapUpDn" -k 1 L_Shoulder_HLP;addAttr -ln "scapUpDn" -k 1 R_Shoulder_HLP;addAttr -ln "scapRtLf" -k 1 L_Shoulder_HLP;addAttr -ln "scapRtLf" -k 1 R_Shoulder_HLP;connectAttr -f L_Shoulder_HLP.scapUpDn L_Scapula_S_SK_JNT.rz;connectAttr -f R_Shoulder_HLP.scapUpDn R_Scapula_S_SK_JNT.rz;connectAttr -f L_Shoulder_HLP.scapRtLf L_Scapula_S_SK_JNT.ry;connectAttr -f R_Shoulder_HLP.scapRtLf R_Scapula_S_SK_JNT.ry;select -cl;setAttr Character_HLP.L_Scapula_Ori 1;setAttr Character_HLP.R_Scapula_Ori 1;if (`attributeExists "stretching" Root_HLP`){connectAttr -f Spine_3_SK_JNT.sx L_Scapula_S_SK_JNT.sx;connectAttr -f Spine_3_SK_JNT.sx R_Scapula_S_SK_JNT.sx;}}//*************************************************************************************************************//*********************************************Auto Scapula Rename Locator*************************************//*************************************************************************************************************global proc adset_aut_scap_rename (){float $pos[];rename L_Scapula_2_Lc "L_Scapula_Aim_At_Lc";rename R_Scapula_2_Lc "R_Scapula_Aim_At_Lc";select -r "*_Scapula_Crv";delete;delete L_Scapula_1_Lc;rename R_Scapula_1_Lc "Scapula_Aim_Up_Lc";$pos=`xform -q -ws -piv Clav_B_SK_JNT`;move $pos[0] $pos[1] ($pos[2]-2) Scapula_Aim_Up_Lc;}//*************************************************************************************************************//*********************************************Auto Scapula Final Ori******************************************//*************************************************************************************************************global proc adset_aut_scap_orient (){select "templateSkeletonN_*";$nm=`ls -sl`;for ($i=0;$i<size($nm);$i++){select -r $nm[$i];templateSkeleton_reBuildChain_doIt;select -cl;}}//*************************************************************************************************************//*********************************************Auto Scapula Template Ori***************************************//*************************************************************************************************************global proc adset_aut_scap_tmp (){select -r L_Scapula_S_SK_JNT;templateSkeleton_createTemp_doIt;select -r R_Scapula_S_SK_JNT;templateSkeleton_createTemp_doIt;select -r L_Scapula_S_BN_JNT;templateSkeleton_createTemp_doIt;select -r R_Scapula_S_BN_JNT;templateSkeleton_createTemp_doIt;for ($i=1;$i<5;$i++) setAttr ("templateSkeletonN_"+$i+".rotGuiScale") .3 ;select -cl;}//*************************************************************************************************************//*********************************************Auto Scapula Bone **********************************************//*************************************************************************************************************global proc adset_aut_scap_bone (){select -r L_Scapula_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "L_Scapula_S_SK_JNT";rename joint2 "L_Scapula_SK_E_JNT";select -r R_Scapula_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "R_Scapula_S_SK_JNT";rename joint2 "R_Scapula_SK_E_JNT";setAttr L_Scapula_SK_E_JNT.tx (`getAttr L_Scapula_SK_E_JNT.tx`/2);setAttr R_Scapula_SK_E_JNT.tx (`getAttr R_Scapula_SK_E_JNT.tx`/2);select -r L_Scapula_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "L_Scapula_S_BN_JNT";rename joint2 "L_Scapula_BN_E_JNT";select -r R_Scapula_Crv;adset_bonesOnCurve(1,0,0);rename joint1 "R_Scapula_S_BN_JNT";rename joint2 "R_Scapula_BN_E_JNT";setAttr L_Scapula_BN_E_JNT.tx (`getAttr L_Scapula_BN_E_JNT.tx`/2);setAttr R_Scapula_BN_E_JNT.tx (`getAttr R_Scapula_BN_E_JNT.tx`/2);select -cl;}//*************************************************************************************************************//*********************************************Auto Scapula Helper*********************************************//*************************************************************************************************************global proc adset_aut_scap_hlp (){float $pos[],$pos2[];string $tmp[],$tp;$pos2=`xform -q -ws -piv L_Clavicle_B_SK_JNT`;$pos=`xform -q -ws -piv L_Shoulder_SK_JNT`;$tmp=`spaceLocator`;move $pos[0] ($pos[1]-.5) ($pos[2]+.5) $tmp;rename $tmp[0] "L_Scapula_1_Lc";$tmp=`spaceLocator`;move ($pos2[0]+1) ($pos2[1]-1.5) ($pos2[2]-2) $tmp;rename $tmp[0] "L_Scapula_2_Lc";$pos2=`xform -q -ws -piv L_Scapula_2_Lc`;$pos=`xform -q -ws -piv L_Scapula_1_Lc`;$tp=`curve -d 1 -p $pos[0] $pos[1] $pos[2] -p $pos2[0] $pos2[1] $pos2[2] -k 0 -k 1 -n"L_Scapula_Crv"`;select -r L_Scapula_Crv.cv[0];cluster -n "L_Scap_S_Cls";select -r L_Scapula_Crv.cv[1];cluster -n "L_Scap_E_Cls";parentConstraint -n"L_Scap_S_Con" L_Scapula_1_Lc L_Scap_S_ClsHandle;parentConstraint -n"L_Scap_E_Con" L_Scapula_2_Lc L_Scap_E_ClsHandle;$pos2=`xform -q -ws -piv R_Clavicle_B_SK_JNT`;$pos=`xform -q -ws -piv R_Shoulder_SK_JNT`;$tmp=`spaceLocator`;move $pos[0] ($pos[1]-.5) ($pos[2]+.5) $tmp;rename $tmp[0] "R_Scapula_1_Lc";$tmp=`spaceLocator`;move ($pos2[0]-1) ($pos2[1]-1.5) ($pos2[2]-2) $tmp;rename $tmp[0] "R_Scapula_2_Lc";$pos2=`xform -q -ws -piv R_Scapula_2_Lc`;$pos=`xform -q -ws -piv R_Scapula_1_Lc`;$tp=`curve -d 1 -p $pos[0] $pos[1] $pos[2] -p $pos2[0] $pos2[1] $pos2[2] -k 0 -k 1 -n"R_Scapula_Crv"`;select -r R_Scapula_Crv.cv[0];cluster -n "R_Scap_S_Cls";select -r R_Scapula_Crv.cv[1];cluster -n "R_Scap_E_Cls";parentConstraint -n"R_Scap_S_Con" R_Scapula_1_Lc R_Scap_S_ClsHandle;parentConstraint -n"R_Scap_E_Con" R_Scapula_2_Lc R_Scap_E_ClsHandle;hide "*_Scap_*_ClsHandle";group -em -n "Scapula_TMP_GRP";parent "*_Scapula_*_Lc" Scapula_TMP_GRP;parent "*_Scap_*_ClsHandle" Scapula_TMP_GRP;parent "*_Scapula_Crv" Scapula_TMP_GRP;select -cl;}//*************************************************************************************************************//********************************************* Auto Scapula Win **********************************************//*************************************************************************************************************global proc adset_aut_scap_set_win (){if (`window -exists adset_aut_scap_win`) deleteUI adset_aut_scap_win;if (`window -exists adset_aut_scap_ques`) deleteUI adset_aut_scap_ques;window -t "Scapula" adset_aut_scap_win;columnLayout -adj 1;button -l"Create Helper System" -c"adset_aut_scap_hlp";button -l"Create Bones" -c"adset_aut_scap_bone";button -l"Start Orientation" -c"adset_aut_scap_tmp";button -l"Orient Bones" -c"adset_aut_scap_orient";button -l"Rename Locators" -c"adset_aut_scap_rename";button -l"Finalize" -c"adset_aut_scap_final";showWindow adset_aut_scap_win;window -e -wh 160 168 adset_aut_scap_win;}//*************************************************************************************************************//*********************************************Ask For Auto Scapula********************************************//*************************************************************************************************************global proc adset_aut_scap_win (){if (`window -exists adset_aut_scap_ques`) deleteUI adset_aut_scap_ques;window -t "Scapula" adset_aut_scap_ques;columnLayout -adj 1;text -l "Do you need auto scapula ?";separator;button -l"Yes go for setup" -c "adset_aut_scap_set_win";separator;button -l"No thanks I'v finished" -c "deleteUI adset_aut_scap_ques";showWindow adset_aut_scap_ques;window -e -wh 162 102 adset_aut_scap_ques;}//*************************************************************************************************************//*********************************************Manual Bone Connect Win*****************************************//*************************************************************************************************************global proc adset_man_con_bon (){if (`window -exists adset_man_con`) deleteUI adset_man_con;window -t "Connect Bone" adset_man_con;columnLayout -adj 1;rowColumnLayout -nc 2 -cw 1 150 -cw 2 45;textFieldGrp -l"Child : " -tx "" -cw 1 45 -cw 2 100 adset_man_con_chld_fld;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`;textFieldGrp -e -tx $tmp[0] adset_man_con_chld_fld"};textFieldGrp -l"Parent : " -tx "" -cw 1 50 -cw 2 95 adset_man_con_prnt_fld;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`;textFieldGrp -e -tx $tmp[0] adset_man_con_prnt_fld"};setParent..;textFieldGrp -l"Control : " -tx "" -cw 1 55 -cw 2 135 adset_man_con_cntrl_fld;button -l "Connect Bones" -c {"string $prnt=`textFieldGrp -q -tx adset_man_con_prnt_fld`;string $chld=`textFieldGrp -q -tx adset_man_con_chld_fld`;$cntrl=`textFieldGrp -q -tx adset_man_con_cntrl_fld`;crt_jcon_jori ($prnt,$chld,$cntrl);"};showWindow adset_man_con;window -e -wh 200 125 adset_man_con;}//*************************************************************************************************************//********************************************* Grouping Low Rez **********************************************//*************************************************************************************************************global proc adset_grp_lwrz (){string $geos[],$nm;$geos=`ls -sl`;parent $geos OBJ_GRP;for ($obj in $geos){$nm=substring ($obj,1,(size($obj)-10));parentConstraint -mo -n ($nm+"_Geo_Pr_CNT") $nm $obj;}}//*************************************************************************************************************//*********************************************Control Circle Win**********************************************//*************************************************************************************************************global proc adset_cnt_crc (){if (`window -ex crc_win`) deleteUI crc_win;window -t "Control circle" crc_win;columnLayout -adj 1;rowColumnLayout -nc 4 -cw 1 50 -cw 2 50 -cw 3 50 -cw 4 50 -vis 1 op_6_set;text -l"Direction";radioCollection dir_rd;radioButton -l "X" x_rd;radioButton -l "Y" y_rd;radioButton -l "Z" z_rd;setParent..;floatSliderGrp -l"Radius" -f 1 -min 1 -max 10 -fmn .001 -fmx 100 -fs .01 -ss .1 -v 1 -cw 1 45 -cw 2 40 -cw 3 10 -cl3 "left" "left" "left" -adj 3 -vis 1 op_6_sl;radioCollection -e -sl x_rd dir_rd;separator;separator;text -l"select what you want";button -l"Operate Now" -al "center" -c "adset_Fantasy_op (2)" -bgc 1 0 0 ;showWindow crc_win;window -e -wh 200 120 crc_win;}//*************************************************************************************************************//*********************************************Connect Shape Win **********************************************//*************************************************************************************************************global proc adset_cn_shp () {if (`window -ex cn_win`) deleteUI cn_win;window -t "Connect Shape" cn_win;columnLayout -adj 1;rowColumnLayout -nc 3 -cw 1 40 -cw 2 70 -cw 3 80 -vis 1 op_8_set;text -l "Child :" chld_ttl;text -l "" -al"center" -bgc 0 1 0 chld_txt;button -l "Select Object" -al "center" -c{"string $temp[];$temp=`ls -sl`;text -e -l $temp[0] chld_txt"} -bgc 0 .6 1 chld_btn;text -l "Parent :" prnt_ttl;text -l "" -al"center" -bgc 0 1 0 prnt_txt;button -l "Select Object" -al "center" -c{"string $temp[];$temp=`ls -sl`;text -e -l $temp[0] prnt_txt"} -bgc 0 .6 1 prnt_btn;setParent..;separator;separator;button -l"Operate Now" -al "center" -c "adset_Fantasy_op (3)" -bgc 1 0 0 ;showWindow cn_win;window -e -wh 200 110 cn_win;}//*************************************************************************************************************//********************************************* Fantasy Operator **********************************************//*************************************************************************************************************global proc adset_Fantasy_op (int $t){switch ($t){case 0:string $base =`text -q -l wire_ctrl_txt`;string $crv =` text -q -l wire_crv_txt`;string $name =`textField -q -tx wire_nod_txt`;volumeWire $base $crv $name;break;case 1:string $char =`textField -q -tx IK_nod_txt`;string $controller =`text -q -l IK_ctrl_txt`;string $crv =`text -q -l IK_crv_txt`;string $chain[];$chain=`ls -sl`;stretchy_ik $char $controller $crv $chain;break;case 2:string $sel[];$sel=`ls -sl`;string $tm;int $x,$y,$z;$x=$y=$z=0;$tm=`radioCollection -q -sl dir_rd`;if ($tm=="x_rd") $x=1;if ($tm=="y_rd") $y=1;if ($tm=="z_rd") $z=1;float $r =`floatSliderGrp -q -v op_6_sl`;controlCircleCreator $sel $x $y $z $r;break;case 3:string $tmp[];string $par=`text -q -l chld_txt`;string $chld=`text -q -l prnt_txt`;makeIdentity -t 1 -r 1 -s 1 -a 1 $par;makeIdentity -t 1 -r 1 -s 1 -a 1 $chld;CenterPivot;select -r $chld;$tmp=`pickWalk -d down`;parent -r -s $tmp[0] $par;select -r $chld;Delete;break;}}//*************************************************************************************************************//*********************************************  Stretchy IK Win **********************************************//*************************************************************************************************************global proc adset_st_win (){if (`window -ex st_win`) deleteUI st_win;window -t "Stretchy IK" st_win;columnLayout -adj 1;rowColumnLayout -nc 3 -cw 1 40 -cw 2 70 -cw 3 80 -vis 1 op_8_set;text -l "Control :" IK_ctrl_ttl;text -l "" -bgc 0 1 0 IK_ctrl_txt;button -l "Select Object" -al "center" -c{"string $temp[];$temp=`ls -sl`;text -e -l $temp[0] IK_ctrl_txt"} -bgc 0 .6 1 IK_ctrl_btn;text -l "Node :" IK_nod_ttl;textField -tx "" -bgc 0 1 0 IK_nod_txt;button -l "Clear" -al "center" -c"textField -e -tx \"\" IK_nod_txt" -bgc 0 .6 1 IK_nod_btn;text -l "Curve :" IK_crv_ttl;text -l "" -bgc 0 1 0 IK_crv_txt;button -l "Select Object" -al "center" -c{"string $temp[];$temp=`ls -sl`;text -e -l $temp[0] IK_crv_txt"} -bgc 0 .6 1 IK_crv_btn;setParent..;separator;separator;text -l"select all bones you want to be stretchy";button -l"Operate Now" -al "center" -c "adset_Fantasy_op (1)" -bgc 1 0 0 ;showWindow st_win;window -e -wh 200 145 st_win; }//*************************************************************************************************************//*********************************************  Volume Wire Win **********************************************//*************************************************************************************************************global proc adset_wir_win (){if (`window -ex wir_win`) deleteUI wir_win;window -t "Volume Wire" wir_win;columnLayout -adj 1;rowColumnLayout -nc 3 -cw 1 40 -cw 2 70 -cw 3 80 -vis 1 op_9_set;text -l "Object :" wire_ctrl_ttl;text -l "" -bgc 0 1 0 wire_ctrl_txt;button -l "Select Object" -al "center" -c{"string $temp[];$temp=`ls -sl`;text -e -l $temp[0] wire_ctrl_txt"} -bgc 0 .6 1 wire_ctrl_btn;text -l "Node :" wire_nod_ttl;textField -tx "" -bgc 0 1 0 wire_nod_txt;button -l "Clear" -al "center" -c"textField -e -tx \"\" wire_nod_txt" -bgc 0 .6 1 wire_nod_btn;text -l "Curve :" wire_crv_ttl;text -l "" -bgc 0 1 0 wire_crv_txt;button -l "Select Object" -al "center" -c{"string $temp[];$temp=`ls -sl`;text -e -l $temp[0] wire_crv_txt"} -bgc 0 .6 1 wire_crv_btn;setParent..;separator;separator;button -l"Operate Now" -al "center" -c "adset_Fantasy_op (0)" -bgc 1 0 0 ;showWindow wir_win;window -e -wh 200 130 wir_win;}//*************************************************************************************************************//*********************************************Rename And Set For M.B.*****************************************//*************************************************************************************************************global proc css_adset_mn_ex (){string $sl[],$nm[],$s[];$sl=`ls -sl`;$root=$sl[0];select -cl;parent -w $root;$s={"Root_R","Spine_1","Spine_2","Spine_3","Clav_B","Neck_B","Neck_M","Head_B"	,"L_Clavicle_B","L_Shoulder","L_Elbow","L_Forearm"	,"L_Wrist","L_H_T_1","L_H_T_2","L_H_T_3","L_H_I_1","L_H_I_2","L_H_I_3"	,"L_H_M_1","L_H_M_2","L_H_M_3","L_H_R_1","L_H_R_2","L_H_R_3"	,"L_H_P_1","L_H_P_2","L_H_P_3","L_Hip","L_Knee","L_Ball","L_Toe"	,"L_F_T_1","L_F_T_2","L_F_T_3","L_F_I_1","L_F_I_2","L_F_I_3"	,"L_F_M_1","L_F_M_2","L_F_M_3","L_F_R_1","L_F_R_2","L_F_R_3"	,"L_F_P_1","L_F_P_2","L_F_P_3"	,"R_Clavicle_B","R_Shoulder","R_Elbow","R_Forearm"	,"R_Wrist","R_H_T_1","R_H_T_2","R_H_T_3","R_H_I_1","R_H_I_2","R_H_I_3"	,"R_H_M_1","R_H_M_2","R_H_M_3","R_H_R_1","R_H_R_2","R_H_R_3"	,"R_H_P_1","R_H_P_2","R_H_P_3","R_Hip","R_Knee","R_Ball","R_Toe"	,"R_F_T_1","R_F_T_2","R_F_T_3","R_F_I_1","R_F_I_2","R_F_I_3"	,"R_F_M_1","R_F_M_2","R_F_M_3","R_F_R_1","R_F_R_2","R_F_R_3"	,"R_F_P_1","R_F_P_2","R_F_P_3"};$nm={"Hips","Spine","Spine1","Spine2","Spine3","Neck","Neck1","Head"	,"LeftShoulder","LeftArm","LeftForearm","LeftForeArmRoll"	,"LeftHand","LeftHandThumb1","LeftHandThumb2","LeftHandThumb3","LeftHandIndex1","LeftHandIndex2","LeftHandIndex3"	,"LeftHandMiddle1","LeftHandMiddle2","LeftHandMiddle3","LeftHandRing1","LeftHandRing2","LeftHandRing3"	,"LeftHandPinky1","LeftHandPinky2","LeftHandPinky3","LeftUpLeg","LeftLeg","LeftFoot","LeftToeBase"	,"LeftFootThumb1","LeftFootThumb2","LeftFootThumb3","LeftFootIndex1","LeftFootIndex2","LeftFootIndex3"	,"LeftFootMiddle1","LeftFootMiddle2","LeftFootMiddle3","LeftFootRing1","LeftFootRing2","LeftFootRing3"	,"LeftFootPinky1","LeftFootPinky2","LeftFootPinky3"	,"RightShoulder","RightArm","RightForearm","RightForeArmRoll"	,"RightHand","RightHandThumb1","RightHandThumb2","RightHandThumb3","RightHandIndex1","RightHandIndex2","RightHandIndex3"	,"RightHandMiddle1","RightHandMiddle2","RightHandMiddle3","RightHandRing1","RightHandRing2","RightHandRing3"	,"RightHandPinky1","RightHandPinky2","RightHandPinky3","RightUpLeg","RightLeg","RightFoot","RightToeBase"	,"RightFootThumb1","RightFootThumb2","RightFootThumb3","RightFootIndex1","RightFootIndex2","RightFootIndex3"	,"RightFootMiddle1","RightFootMiddle2","RightFootMiddle3","RightFootRing1","RightFootRing2","RightFootRing3"	,"RightFootPinky1","RightFootPinky2","RightFootPinky3"};for ($i=0;$i<size($s);$i++){if (`objExists ("*"+$s[$i]+"_??_JNT")`) rename ("*"+$s[$i]+"_??_JNT") $nm[$i];}$s={"L_H_T","L_H_I","L_H_M","L_H_R","L_H_P","R_H_T","R_H_I","R_H_M","R_H_R","R_H_P"	,"L_F_T","L_F_I","L_F_M","L_F_R","L_F_P","R_F_T","R_F_I","R_F_M","R_F_R","R_F_P"};$nm={"LeftHandThumb4","LeftHandIndex4","LeftHandMiddle4","LeftHandRing4","LeftHandPinky4","RightHandThumb4","RightHandIndex4","RightHandMiddle4","RightHandRing4","RightHandPinky4"	,"LeftFootThumb4","LeftFootIndex4","LeftFootMiddle4","LeftFootRing4","LeftFootPinky4","RightFootThumb4","RightFootIndex4","RightFootMiddle4","RightFootRing4","RightFootPinky4"};for ($i=0;$i<size($s);$i++){if (`objExists ("*"+$s[$i]+"_??_E_JNT")`) rename ("*"+$s[$i]+"_??_E_JNT") $nm[$i];}select -cl;group -em -n "Reference";parent Hips Reference;select -cl;}//*************************************************************************************************************//*********************************************Boundry Control Operator****************************************//*************************************************************************************************************global proc adset_bn_cn_cmd (int $cas){switch ($cas){case 0 :if (`objExists Glb_GRP`) select -r Glb_GRP;PrefixHierarchyNames;break;case 1:adset_grp;parent Root_R_BN_JNT JNT_GRP;delete BN_JNT_GRP;select -cl;break;case 2:if (`objExists Character_HLP`) $hnfnnum=`getAttr Character_HLP.handFingerNum`;if (`objExists Character_HLP`) $lgfnnum=`getAttr Character_HLP.legFingerNum`;if (`objExists Character_HLP`) $ernum=`getAttr Character_HLP.earNum`;if (`objExists Character_HLP`) $tlnum=`getAttr Character_HLP.tailNum`;if (`objExists Character_HLP`) $w1num=`getAttr Character_HLP.wingOneNum`;if (`objExists Character_HLP`) $w2num=`getAttr Character_HLP.WingTwoNum`;if (`objExists Character_HLP`) $w3num=`getAttr Character_HLP.wingThreeNum`;if (`objExists Character_HLP`) $sennum=`getAttr Character_HLP.sensorNum`;if (`objExists Character_HLP`) $vacnum=`getAttr Character_HLP.vacumeNum`;if (`objExists Head_T_BN_JNT`) rename Head_T_BN_JNT Head_BN_E_JNT;if (`objExists Jaw_2_BN_JNT`) rename Jaw_2_BN_JNT Jaw_BN_E_JNT;if (`objExists L_Eye_2_BN_JNT`) rename L_Eye_2_BN_JNT L_Eye_BN_E_JNT;if (`objExists R_Eye_2_BN_JNT`) rename R_Eye_2_BN_JNT R_Eye_BN_E_JNT;if (`objExists L_Clavicle_E_BN_JNT`) rename L_Clavicle_E_BN_JNT L_Clavicle_BN_E_JNT;if (`objExists R_Clavicle_E_BN_JNT`) rename R_Clavicle_E_BN_JNT R_Clavicle_BN_E_JNT;if (`objExists L_Hand_Middle_B_BN_JNT`) rename L_Hand_Middle_B_BN_JNT L_Hand_BN_E_JNT;if (`objExists R_Hand_Middle_B_BN_JNT`) rename R_Hand_Middle_B_BN_JNT R_Hand_BN_E_JNT;if (`objExists L_Toe_end_BN_JNT`) rename L_Toe_end_BN_JNT L_Toe_BN_E_JNT;if (`objExists R_Toe_end_BN_JNT`) rename R_Toe_end_BN_JNT R_Toe_BN_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_T_"+$hnfnnum+"_BN_JNT")`) rename ("L_H_T_"+$hnfnnum+"_BN_JNT") L_H_T_BN_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_I_"+$hnfnnum+"_BN_JNT")`) rename ("L_H_I_"+$hnfnnum+"_BN_JNT") L_H_I_BN_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_M_"+$hnfnnum+"_BN_JNT")`) rename ("L_H_M_"+$hnfnnum+"_BN_JNT") L_H_M_BN_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_R_"+$hnfnnum+"_BN_JNT")`) rename ("L_H_R_"+$hnfnnum+"_BN_JNT") L_H_R_BN_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_P_"+$hnfnnum+"_BN_JNT")`) rename ("L_H_P_"+$hnfnnum+"_BN_JNT") L_H_P_BN_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_T_"+$hnfnnum+"_BN_JNT")`) rename ("R_H_T_"+$hnfnnum+"_BN_JNT") R_H_T_BN_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_I_"+$hnfnnum+"_BN_JNT")`) rename ("R_H_I_"+$hnfnnum+"_BN_JNT") R_H_I_BN_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_M_"+$hnfnnum+"_BN_JNT")`) rename ("R_H_M_"+$hnfnnum+"_BN_JNT") R_H_M_BN_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_R_"+$hnfnnum+"_BN_JNT")`) rename ("R_H_R_"+$hnfnnum+"_BN_JNT") R_H_R_BN_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_P_"+$hnfnnum+"_BN_JNT")`) rename ("R_H_P_"+$hnfnnum+"_BN_JNT") R_H_P_BN_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_T_"+$lgfnnum+"_BN_JNT")`) rename ("L_F_T_"+$lgfnnum+"_BN_JNT") L_F_T_BN_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_I_"+$lgfnnum+"_BN_JNT")`) rename ("L_F_I_"+$lgfnnum+"_BN_JNT") L_F_I_BN_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_M_"+$lgfnnum+"_BN_JNT")`) rename ("L_F_M_"+$lgfnnum+"_BN_JNT") L_F_M_BN_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_R_"+$lgfnnum+"_BN_JNT")`) rename ("L_F_R_"+$lgfnnum+"_BN_JNT") L_F_R_BN_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_P_"+$lgfnnum+"_BN_JNT")`) rename ("L_F_P_"+$lgfnnum+"_BN_JNT") L_F_P_BN_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_T_"+$lgfnnum+"_BN_JNT")`) rename ("R_F_T_"+$lgfnnum+"_BN_JNT") R_F_T_BN_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_I_"+$lgfnnum+"_BN_JNT")`) rename ("R_F_I_"+$lgfnnum+"_BN_JNT") R_F_I_BN_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_M_"+$lgfnnum+"_BN_JNT")`) rename ("R_F_M_"+$lgfnnum+"_BN_JNT") R_F_M_BN_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_R_"+$lgfnnum+"_BN_JNT")`) rename ("R_F_R_"+$lgfnnum+"_BN_JNT") R_F_R_BN_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_P_"+$lgfnnum+"_BN_JNT")`) rename ("R_F_P_"+$lgfnnum+"_BN_JNT") R_F_P_BN_E_JNT;if ($ernum>1 && `objExists ("L_Ear_"+$ernum+"_BN_JNT")`) rename ("L_Ear_"+$ernum+"_BN_JNT") L_Ear_BN_E_JNT;if ($ernum>1 && `objExists ("R_Ear_"+$ernum+"_BN_JNT")`) rename ("R_Ear_"+$ernum+"_BN_JNT") R_Ear_BN_E_JNT;if ($sennum>1 && `objExists ("L_Sen_"+$sennum+"_BN_JNT")`) rename ("L_Sen_"+$sennum+"_BN_JNT") L_Sen_BN_E_JNT;if ($sennum>1 && `objExists ("R_Sen_"+$sennum+"_BN_JNT")`) rename ("R_Sen_"+$sennum+"_BN_JNT") R_Sen_BN_E_JNT;if ($w1num>1 && `objExists ("L_W_T_"+$w1num+"_BN_JNT")`) rename ("L_W_T_"+$w1num+"_BN_JNT") L_W_T_BN_E_JNT;if ($w1num>1 && `objExists ("R_W_T_"+$w1num+"_BN_JNT")`) rename ("R_W_T_"+$w1num+"_BN_JNT") R_W_T_BN_E_JNT;if ($w2num>1 && `objExists ("L_W_M_"+$w2num+"_BN_JNT")`) rename ("L_W_M_"+$w2num+"_BN_JNT") L_W_M_BN_E_JNT;if ($w2num>1 && `objExists ("R_W_M_"+$w2num+"_BN_JNT")`) rename ("R_W_M_"+$w2num+"_BN_JNT") R_W_M_BN_E_JNT;if ($w3num>1 && `objExists ("L_W_B_"+$w3num+"_BN_JNT")`) rename ("L_W_B_"+$w3num+"_BN_JNT") L_W_B_BN_E_JNT;if ($w3num>1 && `objExists ("R_W_B_"+$w3num+"_BN_JNT")`) rename ("R_W_B_"+$w3num+"_BN_JNT") R_W_B_BN_E_JNT;if ($tlnum>1 && `objExists ("Tail_"+$tlnum+"_BN_JNT")`) rename ("Tail_"+$tlnum+"_BN_JNT") Tail_BN_E_JNT;if ($vacnum>1 && `objExists ("Vac_"+$vacnum+"_BN_JNT")`) rename ("Vac_"+$vacnum+"_BN_JNT") Vac_BN_E_JNT;select -cl;break;case 3:string $mesh=`textFieldGrp -q -tx hi_mesh_txt`;select -r "*_BN_JNT";select -add $mesh;string $sk[];$sk=`skinCluster -mi 2 -dr 3 -tsb -lw 1`;rename $sk[0] ($mesh+"_Skn");select -r $mesh;tglSkinHold_tgl 1;skinCluster -e -mi 5 ($mesh+"_Skn");select -cl;break;case 4:select -r "*Root_R_BN_JNT";pickWalk -d up;pickWalk -d up;pickWalk -d up;pickWalk -d up;pickWalk -d up;pickWalk -d up;pickWalk -d up;pickWalk -d up;pickWalk -d up;string $tmp[];$tmp=`ls -sl`;ExportSelectionOptions;fileOptions "ExportActive" "projectViewer ExportActive";checkBoxGrp -e -enable off -v1 off exInHistoryBox;checkBoxGrp -e -enable off -v1 off exInChannelsBox;checkBoxGrp -e -enable off -v1 off exInExpressionsBox;checkBoxGrp -e -enable off -v1 off exInConstraintsBox;fileOptionsCallback OptionBoxWindow ExportActive "projectViewer ExportActive"; hideOptionBox;fileCmdCallback;delete $tmp;select -cl;if (`window -exists adset_bn`) deleteUI adset_bn;css_adset_setup 15;button -e -en 1 adset_set_dif_btn;button -e -en 1 adset_set_all_btn;button -e -en 1 adset_set_non_btn;button -e -en 1 adset_set_crt_btn;break;case 5:$hnfnnum=`getAttr Character_HLP.handFingerNum`;$lgfnnum=`getAttr Character_HLP.legFingerNum`;$ernum=`getAttr Character_HLP.earNum`;$tlnum=`getAttr Character_HLP.tailNum`;$w1num=`getAttr Character_HLP.wingOneNum`;$w2num=`getAttr Character_HLP.WingTwoNum`;$w3num=`getAttr Character_HLP.wingThreeNum`;$sennum=`getAttr Character_HLP.sensorNum`;$vacnum=`getAttr Character_HLP.vacumeNum`;if (`objExists Head_T_SK_JNT`) rename Head_T_SK_JNT Head_SK_E_JNT;if (`objExists Jaw_2_SK_JNT`) rename Jaw_2_SK_JNT Jaw_SK_E_JNT;if (`objExists L_Eye_2_SK_JNT`) rename L_Eye_2_SK_JNT L_Eye_SK_E_JNT;if (`objExists R_Eye_2_SK_JNT`) rename R_Eye_2_SK_JNT R_Eye_SK_E_JNT;if (`objExists L_Clavicle_E_SK_JNT`) rename L_Clavicle_E_SK_JNT L_Clavicle_SK_E_JNT;if (`objExists R_Clavicle_E_SK_JNT`) rename R_Clavicle_E_SK_JNT R_Clavicle_SK_E_JNT;if (`objExists L_Hand_Middle_B_SK_JNT`) rename L_Hand_Middle_B_SK_JNT L_Hand_SK_E_JNT;if (`objExists R_Hand_Middle_B_SK_JNT`) rename R_Hand_Middle_B_SK_JNT R_Hand_SK_E_JNT;if (`objExists L_Toe_end_SK_JNT`) rename L_Toe_end_SK_JNT L_Toe_SK_E_JNT;if (`objExists R_Toe_end_SK_JNT`) rename R_Toe_end_SK_JNT R_Toe_SK_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_T_"+$hnfnnum+"_SK_JNT")`) rename ("L_H_T_"+$hnfnnum+"_SK_JNT") L_H_T_SK_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_I_"+$hnfnnum+"_SK_JNT")`) rename ("L_H_I_"+$hnfnnum+"_SK_JNT") L_H_I_SK_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_M_"+$hnfnnum+"_SK_JNT")`) rename ("L_H_M_"+$hnfnnum+"_SK_JNT") L_H_M_SK_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_R_"+$hnfnnum+"_SK_JNT")`) rename ("L_H_R_"+$hnfnnum+"_SK_JNT") L_H_R_SK_E_JNT;if ($hnfnnum>1 && `objExists ("L_H_P_"+$hnfnnum+"_SK_JNT")`) rename ("L_H_P_"+$hnfnnum+"_SK_JNT") L_H_P_SK_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_T_"+$hnfnnum+"_SK_JNT")`) rename ("R_H_T_"+$hnfnnum+"_SK_JNT") R_H_T_SK_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_I_"+$hnfnnum+"_SK_JNT")`) rename ("R_H_I_"+$hnfnnum+"_SK_JNT") R_H_I_SK_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_M_"+$hnfnnum+"_SK_JNT")`) rename ("R_H_M_"+$hnfnnum+"_SK_JNT") R_H_M_SK_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_R_"+$hnfnnum+"_SK_JNT")`) rename ("R_H_R_"+$hnfnnum+"_SK_JNT") R_H_R_SK_E_JNT;if ($hnfnnum>1 && `objExists ("R_H_P_"+$hnfnnum+"_SK_JNT")`) rename ("R_H_P_"+$hnfnnum+"_SK_JNT") R_H_P_SK_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_T_"+$lgfnnum+"_SK_JNT")`) rename ("L_F_T_"+$lgfnnum+"_SK_JNT") L_F_T_SK_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_I_"+$lgfnnum+"_SK_JNT")`) rename ("L_F_I_"+$lgfnnum+"_SK_JNT") L_F_I_SK_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_M_"+$lgfnnum+"_SK_JNT")`) rename ("L_F_M_"+$lgfnnum+"_SK_JNT") L_F_M_SK_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_R_"+$lgfnnum+"_SK_JNT")`) rename ("L_F_R_"+$lgfnnum+"_SK_JNT") L_F_R_SK_E_JNT;if ($lgfnnum>1 && `objExists ("L_F_P_"+$lgfnnum+"_SK_JNT")`) rename ("L_F_P_"+$lgfnnum+"_SK_JNT") L_F_P_SK_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_T_"+$lgfnnum+"_SK_JNT")`) rename ("R_F_T_"+$lgfnnum+"_SK_JNT") R_F_T_SK_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_I_"+$lgfnnum+"_SK_JNT")`) rename ("R_F_I_"+$lgfnnum+"_SK_JNT") R_F_I_SK_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_M_"+$lgfnnum+"_SK_JNT")`) rename ("R_F_M_"+$lgfnnum+"_SK_JNT") R_F_M_SK_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_R_"+$lgfnnum+"_SK_JNT")`) rename ("R_F_R_"+$lgfnnum+"_SK_JNT") R_F_R_SK_E_JNT;if ($lgfnnum>1 && `objExists ("R_F_P_"+$lgfnnum+"_SK_JNT")`) rename ("R_F_P_"+$lgfnnum+"_SK_JNT") R_F_P_SK_E_JNT;if ($ernum>1 && `objExists ("L_Ear_"+$ernum+"_SK_JNT")`) rename ("L_Ear_"+$ernum+"_SK_JNT") L_Ear_SK_E_JNT;if ($ernum>1 && `objExists ("R_Ear_"+$ernum+"_SK_JNT")`) rename ("R_Ear_"+$ernum+"_SK_JNT") R_Ear_SK_E_JNT;if ($sennum>1 && `objExists ("L_Sen_"+$sennum+"_SK_JNT")`) rename ("L_Sen_"+$sennum+"_SK_JNT") L_Sen_SK_E_JNT;if ($sennum>1 && `objExists ("R_Sen_"+$sennum+"_SK_JNT")`) rename ("R_Sen_"+$sennum+"_SK_JNT") R_Sen_SK_E_JNT;if ($w1num>1 && `objExists ("L_W_T_"+$w1num+"_SK_JNT")`) rename ("L_W_T_"+$w1num+"_SK_JNT") L_W_T_SK_E_JNT;if ($w1num>1 && `objExists ("R_W_T_"+$w1num+"_SK_JNT")`) rename ("R_W_T_"+$w1num+"_SK_JNT") R_W_T_SK_E_JNT;if ($w2num>1 && `objExists ("L_W_M_"+$w2num+"_SK_JNT")`) rename ("L_W_M_"+$w2num+"_SK_JNT") L_W_M_SK_E_JNT;if ($w2num>1 && `objExists ("R_W_M_"+$w2num+"_SK_JNT")`) rename ("R_W_M_"+$w2num+"_SK_JNT") R_W_M_SK_E_JNT;if ($w3num>1 && `objExists ("L_W_B_"+$w3num+"_SK_JNT")`) rename ("L_W_B_"+$w3num+"_SK_JNT") L_W_B_SK_E_JNT;if ($w3num>1 && `objExists ("R_W_B_"+$w3num+"_SK_JNT")`) rename ("R_W_B_"+$w3num+"_SK_JNT") R_W_B_SK_E_JNT;if ($tlnum>1 && `objExists ("Tail_"+$tlnum+"_SK_JNT")`) rename ("Tail_"+$tlnum+"_SK_JNT") Tail_SK_E_JNT;if ($vacnum>1 && `objExists ("Vac_"+$vacnum+"_SK_JNT")`) rename ("Vac_"+$vacnum+"_SK_JNT") Vac_SK_E_JNT;select -cl;break;}}//*************************************************************************************************************//*********************************************Boundry Control Win*********************************************//*************************************************************************************************************global proc adset_bn_cn (){if (`window -exists adset_bn`) deleteUI adset_bn;window -t "BN-CNTRL" adset_bn;columnLayout -adj 1;rowColumnLayout -nc 2 -cw 1 165 -cw 2 28;textFieldGrp -l"Mesh :" -cw 1 45 -adj 2 hi_mesh_txt;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`;textFieldGrp -e -tx $tmp[0] hi_mesh_txt;"};setParent..;button -l"Add Control Attributes" -c"HRRaddControlAttrTo";button -l"Add Boundry Attributes" -c"HRRaddBoundToAll";separator;separator;separator;button -l"Delete Control Attributes" -c"HRRdeleteConnectionAttrsControl";button -l"Delete Boundry Attributes" -c"HRRdeleteConnectionAttrsBoundry";separator;separator;separator;button -l"Connect BNDRY to CNTRL" -c"HRRconnectControlFromTo";separator;separator;separator;button -l"Select Boundry Skin Bones" -c"select -r \"*_BN_JNT\"";button -l"Skin Mesh To Boundry" -c"adset_bn_cn_cmd (3)";button -l"Create Low Rez Mesh" -c "createLoRez";separator;separator;separator;button -l"Rename Control to CNTRL" -c "adset_bn_cn_cmd (0)";button -l"Creat Groups for Boundry" -c "adset_bn_cn_cmd (1)";button -l"Rename Boundry to BNDRY" -c "adset_bn_cn_cmd (0)";separator;separator;separator;button -l"Export Boundry" -c"adset_bn_cn_cmd (4)";showWindow adset_bn;window -e -wh 200 365 adset_bn;}//*************************************************************************************************************//*********************************************Helpers Network Nodes*******************************************//*************************************************************************************************************global proc adset_prnt_od (string $conName,string $HLP,int $secT,string $GRP,string $PRNT,int $IND){string $con=`createNode -n $conName condition`;connectAttr ($HLP+".Parenting") ($con+".firstTerm");setAttr ($con+".secondTerm") $secT;setAttr ($con+".colorIfTrueR") 1;setAttr ($con+".colorIfFalseR") 0;connectAttr ($con+".outColorR") ($GRP+"."+$PRNT+"W"+$IND);}//*************************************************************************************************************//*********************************************  Connect Helpers **********************************************//*************************************************************************************************************global proc adset_cnt_hlp_hlp (){cycleCheck -e on;if (`objExists L_Hand_HLP`){parent L_Shoulder_H_GRP Sp_3_HLP;addAttr -ln "Parenting"  -at "enum" -en "None:Chest:Root:World:" -r 1 -w 1 -k 1  L_Hand_HLP;parentConstraint -mo -n"L_H_GRP_P_CNT" Glb_GRP Root_HLP Sp_3_HLP L_Hand_H_GRP;adset_prnt_od ("L_H_G_P_C_Con","L_Hand_HLP",1,"L_H_GRP_P_CNT","Sp_3_HLP",2);adset_prnt_od ("L_H_G_P_R_Con","L_Hand_HLP",2,"L_H_GRP_P_CNT","Root_HLP",1);adset_prnt_od ("L_H_G_P_W_Con","L_Hand_HLP",3,"L_H_GRP_P_CNT","Glb_GRP",0);}if (`objExists R_Hand_HLP`){parent R_Shoulder_H_GRP Sp_3_HLP;addAttr -ln "Parenting"  -at "enum" -en "None:Chest:Root:World:" -r 1 -w 1 -k 1  R_Hand_HLP;parentConstraint -mo -n"R_H_GRP_P_CNT" Glb_GRP Root_HLP Sp_3_HLP R_Hand_H_GRP;adset_prnt_od ("R_H_G_P_C_Con","R_Hand_HLP",1,"R_H_GRP_P_CNT","Sp_3_HLP",2);adset_prnt_od ("R_H_G_P_R_Con","R_Hand_HLP",2,"R_H_GRP_P_CNT","Root_HLP",1);adset_prnt_od ("R_H_G_P_W_Con","R_Hand_HLP",3,"R_H_GRP_P_CNT","Glb_GRP",0);}if (`objExists L_Elbow_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Hand:Chest:Root:World:" -r 1 -w 1 -k 1  L_Elbow_HLP;parentConstraint -mo -n"L_El_GRP_P_CNT" L_Hand_HLP Glb_GRP Root_HLP Sp_3_HLP L_Elbow_H_GRP;adset_prnt_od ("L_El_G_P_H_Con","L_Elbow_HLP",1,"L_El_GRP_P_CNT","L_Hand_HLP",0);adset_prnt_od ("L_El_G_P_C_Con","L_Elbow_HLP",2,"L_El_GRP_P_CNT","Sp_3_HLP",3);adset_prnt_od ("L_El_G_P_R_Con","L_Elbow_HLP",3,"L_El_GRP_P_CNT","Root_HLP",2);adset_prnt_od ("L_El_G_P_W_Con","L_Elbow_HLP",4,"L_El_GRP_P_CNT","Glb_GRP",1);}if (`objExists R_Elbow_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Hand:Chest:Root:World:" -r 1 -w 1 -k 1  R_Elbow_HLP;parentConstraint -mo -n"R_El_GRP_P_CNT" R_Hand_HLP Glb_GRP Root_HLP Sp_3_HLP R_Elbow_H_GRP;adset_prnt_od ("R_El_G_P_H_Con","R_Elbow_HLP",1,"R_El_GRP_P_CNT","R_Hand_HLP",0);adset_prnt_od ("R_El_G_P_C_Con","R_Elbow_HLP",2,"R_El_GRP_P_CNT","Sp_3_HLP",3);adset_prnt_od ("R_El_G_P_R_Con","R_Elbow_HLP",3,"R_El_GRP_P_CNT","Root_HLP",2);adset_prnt_od ("R_El_G_P_W_Con","R_Elbow_HLP",4,"R_El_GRP_P_CNT","Glb_GRP",1);}if (`objExists L_Foot_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Root:Character:World:" -r 1 -w 1 -k 1  L_Foot_HLP;parentConstraint -mo -n"L_F_GRP_P_CNT" Glb_GRP Root_HLP Character_HLP L_Foot_H_GRP;adset_prnt_od ("L_F_G_P_C_Con","L_Foot_HLP",1,"L_F_GRP_P_CNT","Root_HLP",1);adset_prnt_od ("L_F_G_P_Ch_Con","L_Foot_HLP",2,"L_F_GRP_P_CNT","Character_HLP",2);adset_prnt_od ("L_F_G_P_W_Con","L_Foot_HLP",3,"L_F_GRP_P_CNT","Glb_GRP",0);}if (`objExists R_Foot_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Root:Character:World:" -r 1 -w 1 -k 1  R_Foot_HLP;parentConstraint -mo -n"R_F_GRP_P_CNT" Glb_GRP Root_HLP Character_HLP R_Foot_H_GRP;adset_prnt_od ("R_F_G_P_C_Con","R_Foot_HLP",1,"R_F_GRP_P_CNT","Root_HLP",1);adset_prnt_od ("R_F_G_P_Ch_Con","R_Foot_HLP",2,"R_F_GRP_P_CNT","Character_HLP",2);adset_prnt_od ("R_F_G_P_W_Con","R_Foot_HLP",3,"R_F_GRP_P_CNT","Glb_GRP",0);}if (`objExists L_Knee_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Foot:Root:World:" -r 1 -w 1 -k 1  L_Knee_HLP;parentConstraint -mo -n"L_Kn_GRP_P_CNT" L_Foot_HLP Glb_GRP Root_HLP L_Knee_H_GRP;adset_prnt_od ("L_Kn_G_P_F_Con","L_Knee_HLP",1,"L_Kn_GRP_P_CNT","L_Foot_HLP",0);adset_prnt_od ("L_Kn_G_P_R_Con","L_Knee_HLP",2,"L_Kn_GRP_P_CNT","Root_HLP",2);adset_prnt_od ("L_Kn_G_P_W_Con","L_Knee_HLP",3,"L_Kn_GRP_P_CNT","Glb_GRP",1);}if (`objExists R_Knee_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Foot:Root:World:" -r 1 -w 1 -k 1  R_Knee_HLP;parentConstraint -mo -n"R_Kn_GRP_P_CNT" R_Foot_HLP Glb_GRP Root_HLP R_Knee_H_GRP;adset_prnt_od ("R_Kn_G_P_F_Con","R_Knee_HLP",1,"R_Kn_GRP_P_CNT","R_Foot_HLP",0);adset_prnt_od ("R_Kn_G_P_R_Con","R_Knee_HLP",2,"R_Kn_GRP_P_CNT","Root_HLP",2);adset_prnt_od ("R_Kn_G_P_W_Con","R_Knee_HLP",3,"R_Kn_GRP_P_CNT","Glb_GRP",1);}if (`objExists Jaw_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Head:Chest:Root:World:" -r 1 -w 1 -k 1  Jaw_HLP;parentConstraint -mo -n"Jw_GRP_P_CNT" Head_HLP Glb_GRP Root_HLP Sp_3_HLP Jaw_H_GRP;adset_prnt_od ("Jw_G_P_H_Con","Jaw_HLP",1,"Jw_GRP_P_CNT","Head_HLP",0);adset_prnt_od ("Jw_G_P_C_Con","Jaw_HLP",2,"Jw_GRP_P_CNT","Sp_3_HLP",3);adset_prnt_od ("Jw_G_P_R_Con","Jaw_HLP",3,"Jw_GRP_P_CNT","Root_HLP",2);adset_prnt_od ("Jw_G_P_W_Con","Jaw_HLP",4,"Jw_GRP_P_CNT","Glb_GRP",1);}if (`objExists Eyes_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Head:Chest:Root:World:" -r 1 -w 1 -k 1  Eyes_HLP;parentConstraint -mo -n"Ey_GRP_P_CNT" Head_HLP Glb_GRP Root_HLP Sp_3_HLP Eyes_H_GRP;adset_prnt_od ("Ey_G_P_H_Con","Eyes_HLP",1,"Ey_GRP_P_CNT","Head_HLP",0);adset_prnt_od ("Ey_G_P_C_Con","Eyes_HLP",2,"Ey_GRP_P_CNT","Sp_3_HLP",3);adset_prnt_od ("Ey_G_P_R_Con","Eyes_HLP",3,"Ey_GRP_P_CNT","Root_HLP",2);adset_prnt_od ("Ey_G_P_W_Con","Eyes_HLP",4,"Ey_GRP_P_CNT","Glb_GRP",1);}if (`objExists Ear_Vac_Sen_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Head:Chest:Root:World:" -r 1 -w 1 -k 1  Ear_Vac_Sen_HLP;parentConstraint -mo -n"ESV_GRP_P_CNT" Head_HLP Glb_GRP Root_HLP Sp_3_HLP Ear_Vac_Sen_H_GRP;adset_prnt_od ("ESV_G_P_H_Con","Ear_Vac_Sen_HLP",1,"ESV_GRP_P_CNT","Head_HLP",0);adset_prnt_od ("ESV_G_P_C_Con","Ear_Vac_Sen_HLP",2,"ESV_GRP_P_CNT","Sp_3_HLP",3);adset_prnt_od ("ESV_G_P_R_Con","Ear_Vac_Sen_HLP",3,"ESV_GRP_P_CNT","Root_HLP",2);adset_prnt_od ("ESV_G_P_W_Con","Ear_Vac_Sen_HLP",4,"ESV_GRP_P_CNT","Glb_GRP",1);}if (`objExists Wings_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Chest:Root:World:" -r 1 -w 1 -k 1  Wings_HLP;parentConstraint -mo -n"Ws_GRP_P_CNT" Glb_GRP Root_HLP Sp_3_HLP Wings_H_GRP;adset_prnt_od ("Ws_G_P_C_Con","Wings_HLP",1,"Ws_GRP_P_CNT","Sp_3_HLP",2);adset_prnt_od ("Ws_G_P_R_Con","Wings_HLP",2,"Ws_GRP_P_CNT","Root_HLP",1);adset_prnt_od ("Ws_G_P_W_Con","Wings_HLP",3,"Ws_GRP_P_CNT","Glb_GRP",0);}if (`objExists Root_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Character:World:" -r 1 -w 1 -k 1  Root_HLP;parentConstraint -mo -n"Rot_GRP_P_CNT" Character_HLP Glb_GRP Root_H_GRP;adset_prnt_od ("Rot_G_P_C_Con","Root_HLP",1,"Rot_GRP_P_CNT","Character_HLP",0);adset_prnt_od ("Rot_G_P_W_Con","Root_HLP",2,"Rot_GRP_P_CNT","Glb_GRP",1);}if (`objExists L_H_T_H_GRP`&&`objExists L_H_T_1_SK_JNT`) pointConstraint -mo -n"L_H_T_CNT" L_H_T_1_SK_JNT L_H_T_H_GRP;if (`objExists L_H_I_H_GRP`&&`objExists L_H_I_1_SK_JNT`) pointConstraint -mo -n"L_H_I_CNT" L_H_I_1_SK_JNT L_H_I_H_GRP;if (`objExists L_H_M_H_GRP`&&`objExists L_H_M_1_SK_JNT`) pointConstraint -mo -n"L_H_M_CNT" L_H_M_1_SK_JNT L_H_M_H_GRP;if (`objExists L_H_R_H_GRP`&&`objExists L_H_R_1_SK_JNT`) pointConstraint -mo -n"L_H_R_CNT" L_H_R_1_SK_JNT L_H_R_H_GRP;if (`objExists L_H_P_H_GRP`&&`objExists L_H_P_1_SK_JNT`) pointConstraint -mo -n"L_H_P_CNT" L_H_P_1_SK_JNT L_H_P_H_GRP;if (`objExists R_H_T_H_GRP`&&`objExists R_H_T_1_SK_JNT`) pointConstraint -mo -n"R_H_T_CNT" R_H_T_1_SK_JNT R_H_T_H_GRP;if (`objExists R_H_I_H_GRP`&&`objExists R_H_I_1_SK_JNT`) pointConstraint -mo -n"R_H_I_CNT" R_H_I_1_SK_JNT R_H_I_H_GRP;if (`objExists R_H_M_H_GRP`&&`objExists R_H_M_1_SK_JNT`) pointConstraint -mo -n"R_H_M_CNT" R_H_M_1_SK_JNT R_H_M_H_GRP;if (`objExists R_H_R_H_GRP`&&`objExists R_H_R_1_SK_JNT`) pointConstraint -mo -n"R_H_R_CNT" R_H_R_1_SK_JNT R_H_R_H_GRP;if (`objExists R_H_P_H_GRP`&&`objExists R_H_P_1_SK_JNT`) pointConstraint -mo -n"R_H_P_CNT" R_H_P_1_SK_JNT R_H_P_H_GRP;if (`objExists L_F_T_H_GRP`&&`objExists L_F_T_1_SK_JNT`) pointConstraint -mo -n"L_F_T_CNT" L_F_T_1_SK_JNT L_F_T_H_GRP;if (`objExists L_F_I_H_GRP`&&`objExists L_F_I_1_SK_JNT`) pointConstraint -mo -n"L_F_I_CNT" L_F_I_1_SK_JNT L_F_I_H_GRP;if (`objExists L_F_M_H_GRP`&&`objExists L_F_M_1_SK_JNT`) pointConstraint -mo -n"L_F_M_CNT" L_F_M_1_SK_JNT L_F_M_H_GRP;if (`objExists L_F_R_H_GRP`&&`objExists L_F_R_1_SK_JNT`) pointConstraint -mo -n"L_F_R_CNT" L_F_R_1_SK_JNT L_F_R_H_GRP;if (`objExists L_F_P_H_GRP`&&`objExists L_F_P_1_SK_JNT`) pointConstraint -mo -n"L_F_P_CNT" L_F_P_1_SK_JNT L_F_P_H_GRP;if (`objExists R_F_T_H_GRP`&&`objExists R_F_T_1_SK_JNT`) pointConstraint -mo -n"R_F_T_CNT" R_F_T_1_SK_JNT R_F_T_H_GRP;if (`objExists R_F_I_H_GRP`&&`objExists R_F_I_1_SK_JNT`) pointConstraint -mo -n"R_F_I_CNT" R_F_I_1_SK_JNT R_F_I_H_GRP;if (`objExists R_F_M_H_GRP`&&`objExists R_F_M_1_SK_JNT`) pointConstraint -mo -n"R_F_M_CNT" R_F_M_1_SK_JNT R_F_M_H_GRP;if (`objExists R_F_R_H_GRP`&&`objExists R_F_R_1_SK_JNT`) pointConstraint -mo -n"R_F_R_CNT" R_F_R_1_SK_JNT R_F_R_H_GRP;if (`objExists R_F_P_H_GRP`&&`objExists R_F_P_1_SK_JNT`) pointConstraint -mo -n"R_F_P_CNT" R_F_P_1_SK_JNT R_F_P_H_GRP;if (`objExists Tail_1_H_GRP`&&`objExists Tail_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"Tail_1_P_CNT" Tail_1_SK_JNT_Conn_JNT Tail_1_H_GRP;if (`objExists L_W_B_1_H_GRP`&&`objExists L_W_B_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"L_W_B_1_P_CNT" L_W_B_1_SK_JNT_Conn_JNT L_W_B_1_H_GRP;if (`objExists R_W_B_1_H_GRP`&&`objExists R_W_B_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"R_W_B_1_P_CNT" R_W_B_1_SK_JNT_Conn_JNT R_W_B_1_H_GRP;if (`objExists L_W_M_1_H_GRP`&&`objExists L_W_M_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"L_W_M_1_P_CNT" L_W_M_1_SK_JNT_Conn_JNT L_W_M_1_H_GRP;if (`objExists R_W_M_1_H_GRP`&&`objExists R_W_M_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"R_W_M_1_P_CNT" R_W_M_1_SK_JNT_Conn_JNT R_W_M_1_H_GRP;if (`objExists L_W_T_1_H_GRP`&&`objExists L_W_T_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"L_W_T_1_P_CNT" L_W_T_1_SK_JNT_Conn_JNT L_W_T_1_H_GRP;if (`objExists R_W_T_1_H_GRP`&&`objExists R_W_T_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"R_W_T_1_P_CNT" R_W_T_1_SK_JNT_Conn_JNT R_W_T_1_H_GRP;if (`objExists L_Ear_1_H_GRP`&&`objExists L_Ear_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"L_Ear_1_P_CNT" L_Ear_1_SK_JNT_Conn_JNT L_Ear_1_H_GRP;if (`objExists R_Ear_1_H_GRP`&&`objExists R_Ear_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"R_Ear_1_P_CNT" R_Ear_1_SK_JNT_Conn_JNT R_Ear_1_H_GRP;if (`objExists L_Sen_1_H_GRP`&&`objExists L_Sen_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"L_Sen_1_P_CNT" L_Sen_1_SK_JNT_Conn_JNT L_Sen_1_H_GRP;if (`objExists R_Sen_1_H_GRP`&&`objExists R_Sen_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"R_Sen_1_P_CNT" R_Sen_1_SK_JNT_Conn_JNT R_Sen_1_H_GRP;if (`objExists Vac_1_H_GRP`&&`objExists Vac_1_SK_JNT_Conn_JNT`) parentConstraint -mo -n"Vac_1_P_CNT" Vac_1_SK_JNT_Conn_JNT Vac_1_H_GRP;if (`getAttr Character_HLP.ikWings`){addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_W_B_2_HLP;parentConstraint -mo -n"L_W_B_2_GRP_P_CNT" L_W_B_1_HLP Glb_GRP L_W_B_2_H_GRP;adset_prnt_od ("L_W_B_2_G_P_C_Con","L_W_B_2_HLP",1,"L_W_B_2_GRP_P_CNT","L_W_B_1_HLP",0);adset_prnt_od ("L_W_B_2_G_P_W_Con","L_W_B_2_HLP",2,"L_W_B_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_W_B_2_HLP;parentConstraint -mo -n"R_W_B_2_GRP_P_CNT" R_W_B_1_HLP Glb_GRP R_W_B_2_H_GRP;adset_prnt_od ("R_W_B_2_G_P_C_Con","R_W_B_2_HLP",1,"R_W_B_2_GRP_P_CNT","R_W_B_1_HLP",0);adset_prnt_od ("R_W_B_2_G_P_W_Con","R_W_B_2_HLP",2,"R_W_B_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_W_M_2_HLP;parentConstraint -mo -n"L_W_M_2_GRP_P_CNT" L_W_M_1_HLP Glb_GRP L_W_M_2_H_GRP;adset_prnt_od ("L_W_M_2_G_P_C_Con","L_W_M_2_HLP",1,"L_W_M_2_GRP_P_CNT","L_W_M_1_HLP",0);adset_prnt_od ("L_W_M_2_G_P_W_Con","L_W_M_2_HLP",2,"L_W_M_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_W_M_2_HLP;parentConstraint -mo -n"R_W_M_2_GRP_P_CNT" R_W_M_1_HLP Glb_GRP R_W_M_2_H_GRP;adset_prnt_od ("R_W_M_2_G_P_C_Con","R_W_M_2_HLP",1,"R_W_M_2_GRP_P_CNT","R_W_M_1_HLP",0);adset_prnt_od ("R_W_M_2_G_P_W_Con","R_W_M_2_HLP",2,"R_W_M_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_W_T_2_HLP;parentConstraint -mo -n"L_W_T_2_GRP_P_CNT" L_W_T_1_HLP Glb_GRP L_W_T_2_H_GRP;adset_prnt_od ("L_W_T_2_G_P_C_Con","L_W_T_2_HLP",1,"L_W_T_2_GRP_P_CNT","L_W_T_1_HLP",0);adset_prnt_od ("L_W_T_2_G_P_W_Con","L_W_T_2_HLP",2,"L_W_T_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_W_T_2_HLP;parentConstraint -mo -n"R_W_T_2_GRP_P_CNT" R_W_T_1_HLP Glb_GRP R_W_T_2_H_GRP;adset_prnt_od ("R_W_T_2_G_P_C_Con","R_W_T_2_HLP",1,"R_W_T_2_GRP_P_CNT","R_W_T_1_HLP",0);adset_prnt_od ("R_W_T_2_G_P_W_Con","R_W_T_2_HLP",2,"R_W_T_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_W_B_3_HLP;parentConstraint -mo -n"L_W_B_3_GRP_P_CNT" L_W_B_2_HLP Glb_GRP L_W_B_3_H_GRP;adset_prnt_od ("L_W_B_3_G_P_C_Con","L_W_B_3_HLP",1,"L_W_B_3_GRP_P_CNT","L_W_B_2_HLP",0);adset_prnt_od ("L_W_B_3_G_P_W_Con","L_W_B_3_HLP",2,"L_W_B_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_W_B_3_HLP;parentConstraint -mo -n"R_W_B_3_GRP_P_CNT" R_W_B_2_HLP Glb_GRP R_W_B_3_H_GRP;adset_prnt_od ("R_W_B_3_G_P_C_Con","R_W_B_3_HLP",1,"R_W_B_3_GRP_P_CNT","R_W_B_2_HLP",0);adset_prnt_od ("R_W_B_3_G_P_W_Con","R_W_B_3_HLP",2,"R_W_B_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_W_M_3_HLP;parentConstraint -mo -n"L_W_M_3_GRP_P_CNT" L_W_M_2_HLP Glb_GRP L_W_M_3_H_GRP;adset_prnt_od ("L_W_M_3_G_P_C_Con","L_W_M_3_HLP",1,"L_W_M_3_GRP_P_CNT","L_W_M_2_HLP",0);adset_prnt_od ("L_W_M_3_G_P_W_Con","L_W_M_3_HLP",2,"L_W_M_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_W_M_3_HLP;parentConstraint -mo -n"R_W_M_3_GRP_P_CNT" R_W_M_2_HLP Glb_GRP R_W_M_3_H_GRP;adset_prnt_od ("R_W_M_3_G_P_C_Con","R_W_M_3_HLP",1,"R_W_M_3_GRP_P_CNT","R_W_M_2_HLP",0);adset_prnt_od ("R_W_M_3_G_P_W_Con","R_W_M_3_HLP",2,"R_W_M_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_W_T_3_HLP;parentConstraint -mo -n"L_W_T_3_GRP_P_CNT" L_W_T_2_HLP Glb_GRP L_W_T_3_H_GRP;adset_prnt_od ("L_W_T_3_G_P_C_Con","L_W_T_3_HLP",1,"L_W_T_3_GRP_P_CNT","L_W_T_2_HLP",0);adset_prnt_od ("L_W_T_3_G_P_W_Con","L_W_T_3_HLP",2,"L_W_T_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_W_T_3_HLP;parentConstraint -mo -n"R_W_T_3_GRP_P_CNT" R_W_T_2_HLP Glb_GRP R_W_T_3_H_GRP;adset_prnt_od ("R_W_T_3_G_P_C_Con","R_W_T_3_HLP",1,"R_W_T_3_GRP_P_CNT","R_W_T_2_HLP",0);adset_prnt_od ("R_W_T_3_G_P_W_Con","R_W_T_3_HLP",2,"R_W_T_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_W_B_4_HLP;parentConstraint -mo -n"L_W_B_4_GRP_P_CNT" L_W_B_3_HLP Glb_GRP L_W_B_4_H_GRP;adset_prnt_od ("L_W_B_4_G_P_C_Con","L_W_B_4_HLP",1,"L_W_B_4_GRP_P_CNT","L_W_B_3_HLP",0);adset_prnt_od ("L_W_B_4_G_P_W_Con","L_W_B_4_HLP",2,"L_W_B_4_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_W_B_4_HLP;parentConstraint -mo -n"R_W_B_4_GRP_P_CNT" R_W_B_3_HLP Glb_GRP R_W_B_4_H_GRP;adset_prnt_od ("R_W_B_4_G_P_C_Con","R_W_B_4_HLP",1,"R_W_B_4_GRP_P_CNT","R_W_B_3_HLP",0);adset_prnt_od ("R_W_B_4_G_P_W_Con","R_W_B_4_HLP",2,"R_W_B_4_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_W_M_4_HLP;parentConstraint -mo -n"L_W_M_4_GRP_P_CNT" L_W_M_3_HLP Glb_GRP L_W_M_4_H_GRP;adset_prnt_od ("L_W_M_4_G_P_C_Con","L_W_M_4_HLP",1,"L_W_M_4_GRP_P_CNT","L_W_M_3_HLP",0);adset_prnt_od ("L_W_M_4_G_P_W_Con","L_W_M_4_HLP",2,"L_W_M_4_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_W_M_4_HLP;parentConstraint -mo -n"R_W_M_4_GRP_P_CNT" R_W_M_3_HLP Glb_GRP R_W_M_4_H_GRP;adset_prnt_od ("R_W_M_4_G_P_C_Con","R_W_M_4_HLP",1,"R_W_M_4_GRP_P_CNT","R_W_M_3_HLP",0);adset_prnt_od ("R_W_M_4_G_P_W_Con","R_W_M_4_HLP",2,"R_W_M_4_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_W_T_4_HLP;parentConstraint -mo -n"L_W_T_4_GRP_P_CNT" L_W_T_3_HLP Glb_GRP L_W_T_4_H_GRP;adset_prnt_od ("L_W_T_4_G_P_C_Con","L_W_T_4_HLP",1,"L_W_T_4_GRP_P_CNT","L_W_T_3_HLP",0);adset_prnt_od ("L_W_T_4_G_P_W_Con","L_W_T_4_HLP",2,"L_W_T_4_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_W_T_4_HLP;parentConstraint -mo -n"R_W_T_4_GRP_P_CNT" R_W_T_3_HLP Glb_GRP R_W_T_4_H_GRP;adset_prnt_od ("R_W_T_4_G_P_C_Con","R_W_T_4_HLP",1,"R_W_T_4_GRP_P_CNT","R_W_T_3_HLP",0);adset_prnt_od ("R_W_T_4_G_P_W_Con","R_W_T_4_HLP",2,"R_W_T_4_GRP_P_CNT","Glb_GRP",1);}if (`getAttr Character_HLP.ikSensor`){addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_Sen_2_HLP;parentConstraint -mo -n"L_Sen_2_GRP_P_CNT" L_Sen_1_HLP Glb_GRP L_Sen_2_H_GRP;adset_prnt_od ("L_Sen_2_G_P_C_Con","L_Sen_2_HLP",1,"L_Sen_2_GRP_P_CNT","L_Sen_1_HLP",0);adset_prnt_od ("L_Sen_2_G_P_W_Con","L_Sen_2_HLP",2,"L_Sen_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_Sen_2_HLP;parentConstraint -mo -n"R_Sen_2_GRP_P_CNT" R_Sen_1_HLP Glb_GRP R_Sen_2_H_GRP;adset_prnt_od ("R_Sen_2_G_P_C_Con","R_Sen_2_HLP",1,"R_Sen_2_GRP_P_CNT","R_Sen_1_HLP",0);adset_prnt_od ("R_Sen_2_G_P_W_Con","R_Sen_2_HLP",2,"R_Sen_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_Sen_3_HLP;parentConstraint -mo -n"L_Sen_3_GRP_P_CNT" L_Sen_2_HLP Glb_GRP L_Sen_3_H_GRP;adset_prnt_od ("L_Sen_3_G_P_C_Con","L_Sen_3_HLP",1,"L_Sen_3_GRP_P_CNT","L_Sen_2_HLP",0);adset_prnt_od ("L_Sen_3_G_P_W_Con","L_Sen_3_HLP",2,"L_Sen_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_Sen_3_HLP;parentConstraint -mo -n"R_Sen_3_GRP_P_CNT" R_Sen_2_HLP Glb_GRP R_Sen_3_H_GRP;adset_prnt_od ("R_Sen_3_G_P_C_Con","R_Sen_3_HLP",1,"R_Sen_3_GRP_P_CNT","R_Sen_2_HLP",0);adset_prnt_od ("R_Sen_3_G_P_W_Con","R_Sen_3_HLP",2,"R_Sen_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_Sen_4_HLP;parentConstraint -mo -n"L_Sen_4_GRP_P_CNT" L_Sen_3_HLP Glb_GRP L_Sen_4_H_GRP;adset_prnt_od ("L_Sen_4_G_P_C_Con","L_Sen_4_HLP",1,"L_Sen_4_GRP_P_CNT","L_Sen_3_HLP",0);adset_prnt_od ("L_Sen_4_G_P_W_Con","L_Sen_4_HLP",2,"L_Sen_4_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_Sen_4_HLP;parentConstraint -mo -n"R_Sen_4_GRP_P_CNT" R_Sen_3_HLP Glb_GRP R_Sen_4_H_GRP;adset_prnt_od ("R_Sen_4_G_P_C_Con","R_Sen_4_HLP",1,"R_Sen_4_GRP_P_CNT","R_Sen_3_HLP",0);adset_prnt_od ("R_Sen_4_G_P_W_Con","R_Sen_4_HLP",2,"R_Sen_4_GRP_P_CNT","Glb_GRP",1);}if (`getAttr Character_HLP.ikEar`){addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_Ear_2_HLP;parentConstraint -mo -n"L_Ear_2_GRP_P_CNT" L_Ear_1_HLP Glb_GRP L_Ear_2_H_GRP;adset_prnt_od ("L_Ear_2_G_P_C_Con","L_Ear_2_HLP",1,"L_Ear_2_GRP_P_CNT","L_Ear_1_HLP",0);adset_prnt_od ("L_Ear_2_G_P_W_Con","L_Ear_2_HLP",2,"L_Ear_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_Ear_2_HLP;parentConstraint -mo -n"R_Ear_2_GRP_P_CNT" R_Ear_1_HLP Glb_GRP R_Ear_2_H_GRP;adset_prnt_od ("R_Ear_2_G_P_C_Con","R_Ear_2_HLP",1,"R_Ear_2_GRP_P_CNT","R_Ear_1_HLP",0);adset_prnt_od ("R_Ear_2_G_P_W_Con","R_Ear_2_HLP",2,"R_Ear_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_Ear_3_HLP;parentConstraint -mo -n"L_Ear_3_GRP_P_CNT" L_Ear_2_HLP Glb_GRP L_Ear_3_H_GRP;adset_prnt_od ("L_Ear_3_G_P_C_Con","L_Ear_3_HLP",1,"L_Ear_3_GRP_P_CNT","L_Ear_2_HLP",0);adset_prnt_od ("L_Ear_3_G_P_W_Con","L_Ear_3_HLP",2,"L_Ear_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_Ear_3_HLP;parentConstraint -mo -n"R_Ear_3_GRP_P_CNT" R_Ear_2_HLP Glb_GRP R_Ear_3_H_GRP;adset_prnt_od ("R_Ear_3_G_P_C_Con","R_Ear_3_HLP",1,"R_Ear_3_GRP_P_CNT","R_Ear_2_HLP",0);adset_prnt_od ("R_Ear_3_G_P_W_Con","R_Ear_3_HLP",2,"R_Ear_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  L_Ear_4_HLP;parentConstraint -mo -n"L_Ear_4_GRP_P_CNT" L_Ear_3_HLP Glb_GRP L_Ear_4_H_GRP;adset_prnt_od ("L_Ear_4_G_P_C_Con","L_Ear_4_HLP",1,"L_Ear_4_GRP_P_CNT","L_Ear_3_HLP",0);adset_prnt_od ("L_Ear_4_G_P_W_Con","L_Ear_4_HLP",2,"L_Ear_4_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  R_Ear_4_HLP;parentConstraint -mo -n"R_Ear_4_GRP_P_CNT" R_Ear_3_HLP Glb_GRP R_Ear_4_H_GRP;adset_prnt_od ("R_Ear_4_G_P_C_Con","R_Ear_4_HLP",1,"R_Ear_4_GRP_P_CNT","R_Ear_3_HLP",0);adset_prnt_od ("R_Ear_4_G_P_W_Con","R_Ear_4_HLP",2,"R_Ear_4_GRP_P_CNT","Glb_GRP",1);}if (`getAttr Character_HLP.ikVacume`){addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Vac_2_HLP;parentConstraint -mo -n"Vac_2_GRP_P_CNT" Vac_1_HLP Glb_GRP Vac_2_H_GRP;adset_prnt_od ("Vac_2_G_P_C_Con","Vac_2_HLP",1,"Vac_2_GRP_P_CNT","Vac_1_HLP",0);adset_prnt_od ("Vac_2_G_P_W_Con","Vac_2_HLP",2,"Vac_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Vac_3_HLP;parentConstraint -mo -n"Vac_3_GRP_P_CNT" Vac_2_HLP Glb_GRP Vac_3_H_GRP;adset_prnt_od ("Vac_3_G_P_C_Con","Vac_3_HLP",1,"Vac_3_GRP_P_CNT","Vac_2_HLP",0);adset_prnt_od ("Vac_3_G_P_W_Con","Vac_3_HLP",2,"Vac_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Vac_4_HLP;parentConstraint -mo -n"Vac_4_GRP_P_CNT" Vac_3_HLP Glb_GRP Vac_4_H_GRP;adset_prnt_od ("Vac_4_G_P_C_Con","Vac_4_HLP",1,"Vac_4_GRP_P_CNT","Vac_3_HLP",0);adset_prnt_od ("Vac_4_G_P_W_Con","Vac_4_HLP",2,"Vac_4_GRP_P_CNT","Glb_GRP",1);}if (`getAttr Character_HLP.ikTail`){addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Tail_2_HLP;parentConstraint -mo -n"Tail_2_GRP_P_CNT" Tail_1_HLP Glb_GRP Tail_2_H_GRP;adset_prnt_od ("Tail_2_G_P_C_Con","Tail_2_HLP",1,"Tail_2_GRP_P_CNT","Tail_1_HLP",0);adset_prnt_od ("Tail_2_G_P_W_Con","Tail_2_HLP",2,"Tail_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Tail_3_HLP;parentConstraint -mo -n"Tail_3_GRP_P_CNT" Tail_2_HLP Glb_GRP Tail_3_H_GRP;adset_prnt_od ("Tail_3_G_P_C_Con","Tail_3_HLP",1,"Tail_3_GRP_P_CNT","Tail_2_HLP",0);adset_prnt_od ("Tail_3_G_P_W_Con","Tail_3_HLP",2,"Tail_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Tail_4_HLP;parentConstraint -mo -n"Tail_4_GRP_P_CNT" Tail_3_HLP Glb_GRP Tail_4_H_GRP;adset_prnt_od ("Tail_4_G_P_C_Con","Tail_4_HLP",1,"Tail_4_GRP_P_CNT","Tail_3_HLP",0);adset_prnt_od ("Tail_4_G_P_W_Con","Tail_4_HLP",2,"Tail_4_GRP_P_CNT","Glb_GRP",1);}if (`objExists Head_HLP`){addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Head_HLP;parentConstraint -mo -n"Head_GRP_P_CNT" Neck_M_HLP Glb_GRP Head_H_GRP;adset_prnt_od ("Head_G_P_C_Con","Head_HLP",1,"Head_GRP_P_CNT","Neck_M_HLP",0);adset_prnt_od ("Head_G_P_W_Con","Head_HLP",2,"Head_GRP_P_CNT","Glb_GRP",1);}if (`objExists Neck_M_HLP`) {addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Neck_M_HLP;parentConstraint -mo -n"Neck_M_GRP_P_CNT" Neck_B_HLP Glb_GRP Neck_M_H_GRP;adset_prnt_od ("Neck_M_G_P_C_Con","Neck_M_HLP",1,"Neck_M_GRP_P_CNT","Neck_B_HLP",0);adset_prnt_od ("Neck_M_G_P_W_Con","Neck_M_HLP",2,"Neck_M_GRP_P_CNT","Glb_GRP",1);}if (`objExists Neck_B_HLP`) {addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Neck_B_HLP;parentConstraint -mo -n"Neck_B_GRP_P_CNT" Clavicle_HLP Glb_GRP Neck_B_H_GRP;adset_prnt_od ("Neck_B_G_P_C_Con","Neck_B_HLP",1,"Neck_B_GRP_P_CNT","Clavicle_HLP",0);adset_prnt_od ("Neck_B_G_P_W_Con","Neck_B_HLP",2,"Neck_B_GRP_P_CNT","Glb_GRP",1);}addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Clavicle_HLP;parentConstraint -mo -n"Clavicle_GRP_P_CNT" Sp_3_HLP Glb_GRP Clavicle_H_GRP;adset_prnt_od ("Clavicle_G_P_C_Con","Clavicle_HLP",1,"Clavicle_GRP_P_CNT","Sp_3_HLP",0);adset_prnt_od ("Clavicle_G_P_W_Con","Clavicle_HLP",2,"Clavicle_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Sp_3_HLP;parentConstraint -mo -n"Sp_3_GRP_P_CNT" Sp_2_HLP Glb_GRP Sp_3_H_GRP;adset_prnt_od ("Sp_3_G_P_C_Con","Sp_3_HLP",1,"Sp_3_GRP_P_CNT","Sp_2_HLP",0);adset_prnt_od ("Sp_3_G_P_W_Con","Sp_3_HLP",2,"Sp_3_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Sp_2_HLP;parentConstraint -mo -n"Sp_2_GRP_P_CNT" Sp_1_HLP Glb_GRP Sp_2_H_GRP;adset_prnt_od ("Sp_2_G_P_C_Con","Sp_2_HLP",1,"Sp_2_GRP_P_CNT","Sp_1_HLP",0);adset_prnt_od ("Sp_2_G_P_W_Con","Sp_2_HLP",2,"Sp_2_GRP_P_CNT","Glb_GRP",1);addAttr -ln "Parenting"  -at "enum" -en "None:Chain:World:" -r 1 -w 1 -k 1  Sp_1_HLP;parentConstraint -mo -n"Sp_1_GRP_P_CNT" Root_HLP Glb_GRP Sp_1_H_GRP;adset_prnt_od ("Sp_1_G_P_C_Con","Sp_1_HLP",1,"Sp_1_GRP_P_CNT","Root_HLP",0);adset_prnt_od ("Sp_1_G_P_W_Con","Sp_1_HLP",2,"Sp_1_GRP_P_CNT","Glb_GRP",1);if (!`getAttr Character_HLP.ikSpine`) pointConstraint -n"Root_CNT" Root_HLP Root_R_SK_JNT;if (`objExists Head_HLP`) parentConstraint -mo -n"Head_M_P_CNT" Head_HLP Head_M_SK_JNT_Conn_JNT;if (!`objExists Cls_GRP`){group -em -n"Cls_GRP";parent Cls_GRP H_EX_GRP;}if (`objExists "*_Crv"`) parent "*_Crv" Cls_GRP;if (`objExists "*_ST_*_Base_Crv"`) parent "*_ST_*_Base_Crv" CRV_GRP;if (`objExists Body_Spine_IK_HND`){setAttr "Body_Spine_IK_HND.dTwistControlEnable" 1;setAttr Body_Spine_IK_HND.dWorldUpType 4;setAttr Body_Spine_IK_HND.dWorldUpAxis 0;setAttr "Body_Spine_IK_HND.dWorldUpVectorY" 0;setAttr "Body_Spine_IK_HND.dWorldUpVectorZ" 1;setAttr "Body_Spine_IK_HND.dWorldUpVectorEndY" 0;setAttr "Body_Spine_IK_HND.dWorldUpVectorEndZ" 1;connectAttr -f Root_HLP.worldMatrix[0] Body_Spine_IK_HND.dWorldUpMatrix;connectAttr -f Sp_3_HLP.worldMatrix[0] Body_Spine_IK_HND.dWorldUpMatrixEnd;}if (`objExists Neck_Spine_IK_HND`){setAttr "Neck_Spine_IK_HND.dTwistControlEnable" 1;setAttr Neck_Spine_IK_HND.dWorldUpType 4;setAttr Neck_Spine_IK_HND.dWorldUpAxis 0;setAttr "Neck_Spine_IK_HND.dWorldUpVectorY" 0;setAttr "Neck_Spine_IK_HND.dWorldUpVectorZ" 1;setAttr "Neck_Spine_IK_HND.dWorldUpVectorEndY" 0;setAttr "Neck_Spine_IK_HND.dWorldUpVectorEndZ" 1;connectAttr -f Neck_B_HLP.worldMatrix[0] Neck_Spine_IK_HND.dWorldUpMatrix;connectAttr -f Head_HLP.worldMatrix[0] Neck_Spine_IK_HND.dWorldUpMatrixEnd;}if (`objExists Head_B_SK_JNT_HLP`) CBdeleteConnection "Head_B_SK_JNT.sx";if (`objExists L_Foot_HLP`) setAttr L_Foot_HLP.Parenting 2;if (`objExists R_Foot_HLP`) setAttr R_Foot_HLP.Parenting 2;if (`objExists L_Hand_HLP`) setAttr L_Hand_HLP.Parenting 2;if (`objExists R_Hand_HLP`) setAttr R_Hand_HLP.Parenting 2;if (`objExists Root_HLP`) setAttr Root_HLP.Parenting 1;if (`objExists Sp_1_HLP`) setAttr Sp_1_HLP.Parenting 1;if (`objExists Sp_2_HLP`) setAttr Sp_2_HLP.Parenting 1;if (`objExists Sp_3_HLP`) setAttr Sp_3_HLP.Parenting 1;if (`objExists Clavicle_HLP`) setAttr Clavicle_HLP.Parenting 1;if (`objExists Neck_B_HLP`) setAttr Neck_B_HLP.Parenting 1;if (`objExists Neck_M_HLP`) setAttr Neck_M_HLP.Parenting 1;if (`objExists Head_HLP`) setAttr Head_HLP.Parenting 1;if (`objExists L_Elbow_HLP`) setAttr L_Elbow_HLP.Parenting 2;if (`objExists R_Elbow_HLP`) setAttr R_Elbow_HLP.Parenting 2;if (`objExists Eyes_HLP`) setAttr Eyes_HLP.Parenting 1;if (`objExists L_Knee_HLP`) setAttr L_Knee_HLP.Parenting 1;if (`objExists R_Knee_HLP`) setAttr R_Knee_HLP.Parenting 1;if (`objExists Tail_2_HLP`) setAttr Tail_2_HLP.Parenting 1;if (`objExists Tail_3_HLP`) setAttr Tail_3_HLP.Parenting 1;if (`objExists Tail_4_HLP`) setAttr Tail_4_HLP.Parenting 1;if (`objExists L_W_B_2_HLP`) setAttr L_W_B_2_HLP.Parenting 1;if (`objExists L_W_B_3_HLP`) setAttr L_W_B_3_HLP.Parenting 1;if (`objExists L_W_B_4_HLP`) setAttr L_W_B_4_HLP.Parenting 1;if (`objExists L_W_M_2_HLP`) setAttr L_W_M_2_HLP.Parenting 1;if (`objExists L_W_M_3_HLP`) setAttr L_W_M_3_HLP.Parenting 1;if (`objExists L_W_M_4_HLP`) setAttr L_W_M_4_HLP.Parenting 1;if (`objExists L_W_T_2_HLP`) setAttr L_W_T_2_HLP.Parenting 1;if (`objExists L_W_T_3_HLP`) setAttr L_W_T_3_HLP.Parenting 1;if (`objExists L_W_T_4_HLP`) setAttr L_W_T_4_HLP.Parenting 1;if (`objExists R_W_B_2_HLP`) setAttr R_W_B_2_HLP.Parenting 1;if (`objExists R_W_B_3_HLP`) setAttr R_W_B_3_HLP.Parenting 1;if (`objExists R_W_B_4_HLP`) setAttr R_W_B_4_HLP.Parenting 1;if (`objExists R_W_M_2_HLP`) setAttr R_W_M_2_HLP.Parenting 1;if (`objExists R_W_M_3_HLP`) setAttr R_W_M_3_HLP.Parenting 1;if (`objExists R_W_M_4_HLP`) setAttr R_W_M_4_HLP.Parenting 1;if (`objExists R_W_T_2_HLP`) setAttr R_W_T_2_HLP.Parenting 1;if (`objExists R_W_T_3_HLP`) setAttr R_W_T_3_HLP.Parenting 1;if (`objExists R_W_T_4_HLP`) setAttr R_W_T_4_HLP.Parenting 1;if (`objExists Jaw_HLP`) setAttr Jaw_HLP.Parenting 1;if (`objExists Vac_2_HLP`) setAttr Vac_2_HLP.Parenting 1;if (`objExists Vac_3_HLP`) setAttr Vac_3_HLP.Parenting 1;if (`objExists Vac_4_HLP`) setAttr Vac_4_HLP.Parenting 1;if (`objExists L_Ear_2_HLP`) setAttr L_Ear_2_HLP.Parenting 1;if (`objExists L_Ear_3_HLP`) setAttr L_Ear_3_HLP.Parenting 1;if (`objExists L_Ear_4_HLP`) setAttr L_Ear_4_HLP.Parenting 1;if (`objExists R_Ear_2_HLP`) setAttr R_Ear_2_HLP.Parenting 1;if (`objExists R_Ear_3_HLP`) setAttr R_Ear_3_HLP.Parenting 1;if (`objExists R_Ear_4_HLP`) setAttr R_Ear_4_HLP.Parenting 1;if (`objExists L_Sen_2_HLP`) setAttr L_Sen_2_HLP.Parenting 1;if (`objExists L_Sen_3_HLP`) setAttr L_Sen_3_HLP.Parenting 1;if (`objExists L_Sen_4_HLP`) setAttr L_Sen_4_HLP.Parenting 1;if (`objExists R_Sen_2_HLP`) setAttr R_Sen_2_HLP.Parenting 1;if (`objExists R_Sen_3_HLP`) setAttr R_Sen_3_HLP.Parenting 1;if (`objExists R_Sen_4_HLP`) setAttr R_Sen_4_HLP.Parenting 1;if (`objExists Ear_Vac_Sen_HLP`) addAttr -ln "Extra"  -at "enum" -en "Off:On:" -r 1 -w 1 -k 1  Ear_Vac_Sen_HLP;if (`objExists Wings_HLP`) addAttr -ln "Extra"  -at "enum" -en "Off:On:" -r 1 -w 1 -k 1  Wings_HLP;if (`objExists L_Hand_HLP`) addAttr -ln "Extra"  -at "enum" -en "Off:On:" -r 1 -w 1 -k 1  L_Hand_HLP;if (`objExists R_Hand_HLP`) addAttr -ln "Extra"  -at "enum" -en "Off:On:" -r 1 -w 1 -k 1  R_Hand_HLP;if (`objExists L_Foot_HLP`) addAttr -ln "Extra"  -at "enum" -en "Off:On:" -r 1 -w 1 -k 1  L_Foot_HLP;if (`objExists R_Foot_HLP`) addAttr -ln "Extra"  -at "enum" -en "Off:On:" -r 1 -w 1 -k 1  R_Foot_HLP;if (`objExists Root_HLP`) addAttr -ln "Extra"  -at "enum" -en "Off:On:" -r 1 -w 1 -k 1  Root_HLP;if (`objExists Head_HLP`) addAttr -ln "Extra"  -at "enum" -en "Off:On:" -r 1 -w 1 -k 1  Head_HLP;if (`objExists Ear_Vac_Sen_HLP`&&`objExists L_Sen_1_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "L_Sen_1_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists L_Sen_2_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "L_Sen_2_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists L_Sen_3_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "L_Sen_3_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists L_Sen_4_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "L_Sen_4_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists R_Sen_1_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "R_Sen_1_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists R_Sen_2_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "R_Sen_2_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists R_Sen_3_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "R_Sen_3_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists R_Sen_4_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "R_Sen_4_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists L_Ear_1_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "L_Ear_1_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists L_Ear_2_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "L_Ear_2_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists L_Ear_3_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "L_Ear_3_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists L_Ear_4_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "L_Ear_4_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists R_Ear_1_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "R_Ear_1_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists R_Ear_2_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "R_Ear_2_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists R_Ear_3_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "R_Ear_3_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists R_Ear_4_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "R_Ear_4_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists Vac_1_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "Vac_1_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists Vac_2_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "Vac_2_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists Vac_3_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "Vac_3_HLP.v";if (`objExists Ear_Vac_Sen_HLP`&&`objExists Vac_4_HLP`) connectAttr -f "Ear_Vac_Sen_HLP.Extra" "Vac_4_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_B_1_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_B_1_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_B_2_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_B_2_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_B_3_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_B_3_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_B_4_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_B_4_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_M_1_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_M_1_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_M_2_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_M_2_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_M_3_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_M_3_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_M_4_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_M_4_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_T_1_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_T_1_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_T_2_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_T_2_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_T_3_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_T_3_HLP.v";if (`objExists Wings_HLP`&&`objExists L_W_T_4_HLP`) connectAttr -f "Wings_HLP.Extra" "L_W_T_4_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_B_1_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_B_1_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_B_2_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_B_2_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_B_3_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_B_3_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_B_4_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_B_4_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_M_1_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_M_1_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_M_2_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_M_2_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_M_3_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_M_3_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_M_4_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_M_4_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_T_1_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_T_1_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_T_2_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_T_2_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_T_3_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_T_3_HLP.v";if (`objExists Wings_HLP`&&`objExists R_W_T_4_HLP`) connectAttr -f "Wings_HLP.Extra" "R_W_T_4_HLP.v";if (`objExists Wings_HLP`&&`objExists Tail_1_HLP`) connectAttr -f "Wings_HLP.Extra" "Tail_1_HLP.v";if (`objExists Wings_HLP`&&`objExists Tail_2_HLP`) connectAttr -f "Wings_HLP.Extra" "Tail_2_HLP.v";if (`objExists Wings_HLP`&&`objExists Tail_3_HLP`) connectAttr -f "Wings_HLP.Extra" "Tail_3_HLP.v";if (`objExists Wings_HLP`&&`objExists Tail_4_HLP`) connectAttr -f "Wings_HLP.Extra" "Tail_4_HLP.v";if (`objExists L_Hand_HLP`&&`objExists L_H_T_HLP`) connectAttr -f "L_Hand_HLP.Extra" "L_H_T_HLP.v";if (`objExists L_Hand_HLP`&&`objExists L_H_I_HLP`) connectAttr -f "L_Hand_HLP.Extra" "L_H_I_HLP.v";if (`objExists L_Hand_HLP`&&`objExists L_H_M_HLP`) connectAttr -f "L_Hand_HLP.Extra" "L_H_M_HLP.v";if (`objExists L_Hand_HLP`&&`objExists L_H_R_HLP`) connectAttr -f "L_Hand_HLP.Extra" "L_H_R_HLP.v";if (`objExists L_Hand_HLP`&&`objExists L_H_P_HLP`) connectAttr -f "L_Hand_HLP.Extra" "L_H_P_HLP.v";if (`objExists L_Hand_HLP`&&`objExists L_Shoulder_HLP`) connectAttr -f "L_Hand_HLP.Extra" "L_Shoulder_HLP.v";if (`objExists R_Hand_HLP`&&`objExists R_H_T_HLP`) connectAttr -f "R_Hand_HLP.Extra" "R_H_T_HLP.v";if (`objExists R_Hand_HLP`&&`objExists R_H_I_HLP`) connectAttr -f "R_Hand_HLP.Extra" "R_H_I_HLP.v";if (`objExists R_Hand_HLP`&&`objExists R_H_M_HLP`) connectAttr -f "R_Hand_HLP.Extra" "R_H_M_HLP.v";if (`objExists R_Hand_HLP`&&`objExists R_H_R_HLP`) connectAttr -f "R_Hand_HLP.Extra" "R_H_R_HLP.v";if (`objExists R_Hand_HLP`&&`objExists R_H_P_HLP`) connectAttr -f "R_Hand_HLP.Extra" "R_H_P_HLP.v";if (`objExists R_Hand_HLP`&&`objExists R_Shoulder_HLP`) connectAttr -f "R_Hand_HLP.Extra" "R_Shoulder_HLP.v";if (`objExists L_Foot_HLP`&&`objExists L_F_T_HLP`) connectAttr -f "L_Foot_HLP.Extra" "L_F_T_HLP.v";if (`objExists L_Foot_HLP`&&`objExists L_F_I_HLP`) connectAttr -f "L_Foot_HLP.Extra" "L_F_I_HLP.v";if (`objExists L_Foot_HLP`&&`objExists L_F_M_HLP`) connectAttr -f "L_Foot_HLP.Extra" "L_F_M_HLP.v";if (`objExists L_Foot_HLP`&&`objExists L_F_R_HLP`) connectAttr -f "L_Foot_HLP.Extra" "L_F_R_HLP.v";if (`objExists L_Foot_HLP`&&`objExists L_F_P_HLP`) connectAttr -f "L_Foot_HLP.Extra" "L_F_P_HLP.v";if (`objExists R_Foot_HLP`&&`objExists R_F_T_HLP`) connectAttr -f "R_Foot_HLP.Extra" "R_F_T_HLP.v";if (`objExists R_Foot_HLP`&&`objExists R_F_I_HLP`) connectAttr -f "R_Foot_HLP.Extra" "R_F_I_HLP.v";if (`objExists R_Foot_HLP`&&`objExists R_F_M_HLP`) connectAttr -f "R_Foot_HLP.Extra" "R_F_M_HLP.v";if (`objExists R_Foot_HLP`&&`objExists R_F_R_HLP`) connectAttr -f "R_Foot_HLP.Extra" "R_F_R_HLP.v";if (`objExists R_Foot_HLP`&&`objExists R_F_P_HLP`) connectAttr -f "R_Foot_HLP.Extra" "R_F_P_HLP.v";if (`objExists Root_HLP`&&`objExists Sp_1_HLP`) connectAttr -f "Root_HLP.Extra" "Sp_1_HLP.v";if (`objExists Root_HLP`&&`objExists Sp_2_HLP`) connectAttr -f "Root_HLP.Extra" "Sp_2_HLP.v";if (`objExists Root_HLP`&&`objExists Clavicle_HLP`) connectAttr -f "Root_HLP.Extra" "Clavicle_HLP.v";if (`objExists Root_HLP`&&`objExists Neck_M_HLP`) connectAttr -f "Root_HLP.Extra" "Neck_M_HLP.v";if (`objExists Root_HLP`&&`objExists Wings_HLP`) connectAttr -f "Root_HLP.Extra" "Wings_HLP.v";if (`objExists Head_HLP`&&`objExists Jaw_HLP`) connectAttr -f "Head_HLP.Extra" "Jaw_HLP.v";if (`objExists Head_HLP`&&`objExists Ear_Vac_Sen_HLP`) connectAttr -f "Head_HLP.Extra" "Ear_Vac_Sen_HLP.v";connectAttr -f Character_HLP.sx Glb_Scl.sx;connectAttr -f Character_HLP.sy Glb_Scl.sy;connectAttr -f Character_HLP.sz Glb_Scl.sz;connectAttr -f Character_HLP.rx Glb_RX.rx;connectAttr -f Character_HLP.ry Glb_RY.ry;connectAttr -f Character_HLP.rz Glb_RZ.rz;connectAttr -f Character_HLP.tx Glb_TX.tx;connectAttr -f Character_HLP.ty Glb_TY.ty;connectAttr -f Character_HLP.tz Glb_TZ.tz;if (`objExists L_Hand_HLP`&&`attributeExists autoShoulderBlend L_Hand_HLP`) setAttr L_Hand_HLP.autoShoulderBlend 3;if (`objExists R_Hand_HLP`&&`attributeExists autoShoulderBlend R_Hand_HLP`) setAttr R_Hand_HLP.autoShoulderBlend 3;if (`objExists L_Hand_HLP`&&`attributeExists ikFkBlend L_Hand_HLP`) setAttr L_Hand_HLP.ikFkBlend 5;if (`objExists R_Hand_HLP`&&`attributeExists ikFkBlend R_Hand_HLP`) setAttr R_Hand_HLP.ikFkBlend 5;if (`objExists Root_HLP`&&`attributeExists stretching Root_HLP`) setAttr Root_HLP.stretching 1;if (`objExists Neck_B_HLP`&&`attributeExists stretching Neck_B_HLP`) setAttr Neck_B_HLP.stretching 1;if (`objExists L_Ear_4_HLP`&&`attributeExists stretching L_Ear_4_HLP`) setAttr L_Ear_4_HLP.stretching 1;if (`objExists R_Ear_4_HLP`&&`attributeExists stretching R_Ear_4_HLP`) setAttr R_Ear_4_HLP.stretching 1;if (`objExists L_Sen_4_HLP`&&`attributeExists stretching L_Sen_4_HLP`) setAttr L_Sen_4_HLP.stretching 1;if (`objExists R_Sen_4_HLP`&&`attributeExists stretching R_Sen_4_HLP`) setAttr R_Sen_4_HLP.stretching 1;if (`objExists Vac_4_HLP`&&`attributeExists stretching Vac_4_HLP`) setAttr Vac_4_HLP.stretching 1;if (`objExists Tail_4_HLP`&&`attributeExists stretching Tail_4_HLP`) setAttr Tail_4_HLP.stretching 1;if (`objExists L_Foot_HLP`) css_TD_LockUnlock ("L_Foot_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Foot_HLP`) css_TD_LockUnlock ("R_Foot_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_Hand_HLP`) css_TD_LockUnlock ("L_Hand_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Hand_HLP`) css_TD_LockUnlock ("R_Hand_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_F_T_HLP`) css_TD_LockUnlock ("L_F_T_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists L_F_I_HLP`) css_TD_LockUnlock ("L_F_I_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,1,0);if (`objExists L_F_M_HLP`) css_TD_LockUnlock ("L_F_M_HLP",0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0);if (`objExists L_F_R_HLP`) css_TD_LockUnlock ("L_F_R_HLP",0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0);if (`objExists L_F_P_HLP`) css_TD_LockUnlock ("L_F_P_HLP",0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0);if (`objExists R_F_T_HLP`) css_TD_LockUnlock ("R_F_T_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists R_F_I_HLP`) css_TD_LockUnlock ("R_F_I_HLP",0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0);if (`objExists R_F_M_HLP`) css_TD_LockUnlock ("R_F_M_HLP",0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0);if (`objExists R_F_R_HLP`) css_TD_LockUnlock ("R_F_R_HLP",0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0);if (`objExists R_F_P_HLP`) css_TD_LockUnlock ("R_F_P_HLP",0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0);if (`objExists L_H_T_HLP`) css_TD_LockUnlock ("L_H_T_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists L_H_I_HLP`) css_TD_LockUnlock ("L_H_I_HLP",0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0);if (`objExists L_H_M_HLP`) css_TD_LockUnlock ("L_H_M_HLP",0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0);if (`objExists L_H_R_HLP`) css_TD_LockUnlock ("L_H_R_HLP",0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0);if (`objExists L_H_P_HLP`) css_TD_LockUnlock ("L_H_P_HLP",0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0);if (`objExists R_H_T_HLP`) css_TD_LockUnlock ("R_H_T_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists R_H_I_HLP`) css_TD_LockUnlock ("R_H_I_HLP",0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0);if (`objExists R_H_M_HLP`) css_TD_LockUnlock ("R_H_M_HLP",0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0);if (`objExists R_H_R_HLP`) css_TD_LockUnlock ("R_H_R_HLP",0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0);if (`objExists R_H_P_HLP`) css_TD_LockUnlock ("R_H_P_HLP",0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0);if (`objExists L_Knee_HLP`) css_TD_LockUnlock ("L_Knee_HLP",1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0);if (`objExists R_Knee_HLP`) css_TD_LockUnlock ("R_Knee_HLP",1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0);if (`objExists Jaw_HLP`) css_TD_LockUnlock ("Jaw_HLP",1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0);if (`objExists L_Elbow_HLP`) css_TD_LockUnlock ("L_Elbow_HLP",1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0);if (`objExists R_Elbow_HLP`) css_TD_LockUnlock ("R_Elbow_HLP",1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0);if (`objExists L_Eye_HLP`) css_TD_LockUnlock ("L_Eye_HLP",1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0);if (`objExists R_Eye_HLP`) css_TD_LockUnlock ("R_Eye_HLP",1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0);if (`objExists ST_Eye_HLP`) css_TD_LockUnlock ("ST_Eye_HLP",0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0);if (`objExists Ex_Eye_HLP`) css_TD_LockUnlock ("Ex_Eye_HLP",1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0);if (`objExists Eyes_HLP`) css_TD_LockUnlock ("Eyes_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Ear_Vac_Sen_HLP`) css_TD_LockUnlock ("Ear_Vac_Sen_HLP",0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0);if (`objExists Wings_HLP`) css_TD_LockUnlock ("Wings_HLP",0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0);if (`objExists Root_HLP`) css_TD_LockUnlock ("Root_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Sp_1_HLP`) css_TD_LockUnlock ("Sp_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Sp_2_HLP`) css_TD_LockUnlock ("Sp_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Sp_3_HLP`) css_TD_LockUnlock ("Sp_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Clavicle_HLP`) css_TD_LockUnlock ("Clavicle_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Neck_B_HLP`) css_TD_LockUnlock ("Neck_B_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Neck_M_HLP`) css_TD_LockUnlock ("Neck_M_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Head_HLP`) css_TD_LockUnlock ("Head_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (!`getAttr Character_HLP.ikSpine`){if (`objExists Sp_1_HLP`) css_TD_LockUnlock ("Sp_1_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists Sp_2_HLP`) css_TD_LockUnlock ("Sp_2_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists Sp_3_HLP`) css_TD_LockUnlock ("Sp_3_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists Clavicle_HLP`) css_TD_LockUnlock ("Clavicle_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists Neck_B_HLP`) css_TD_LockUnlock ("Neck_B_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists Neck_M_HLP`) css_TD_LockUnlock ("Neck_M_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);if (`objExists Head_HLP`) css_TD_LockUnlock ("Head_HLP",0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0);}if (`objExists L_Sen_1_HLP`) css_TD_LockUnlock ("L_Sen_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_Sen_2_HLP`) css_TD_LockUnlock ("L_Sen_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_Sen_3_HLP`) css_TD_LockUnlock ("L_Sen_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_Sen_4_HLP`) css_TD_LockUnlock ("L_Sen_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Sen_1_HLP`) css_TD_LockUnlock ("R_Sen_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Sen_2_HLP`) css_TD_LockUnlock ("R_Sen_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Sen_3_HLP`) css_TD_LockUnlock ("R_Sen_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Sen_4_HLP`) css_TD_LockUnlock ("R_Sen_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_Ear_1_HLP`) css_TD_LockUnlock ("L_Ear_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_Ear_2_HLP`) css_TD_LockUnlock ("L_Ear_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_Ear_3_HLP`) css_TD_LockUnlock ("L_Ear_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_Ear_4_HLP`) css_TD_LockUnlock ("L_Ear_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Ear_1_HLP`) css_TD_LockUnlock ("R_Ear_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Ear_2_HLP`) css_TD_LockUnlock ("R_Ear_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Ear_3_HLP`) css_TD_LockUnlock ("R_Ear_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_Ear_4_HLP`) css_TD_LockUnlock ("R_Ear_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Vac_1_HLP`) css_TD_LockUnlock ("Vac_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Vac_2_HLP`) css_TD_LockUnlock ("Vac_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Vac_3_HLP`) css_TD_LockUnlock ("Vac_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Vac_4_HLP`) css_TD_LockUnlock ("Vac_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Tail_1_HLP`) css_TD_LockUnlock ("Tail_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Tail_2_HLP`) css_TD_LockUnlock ("Tail_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Tail_3_HLP`) css_TD_LockUnlock ("Tail_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists Tail_4_HLP`) css_TD_LockUnlock ("Tail_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_T_1_HLP`) css_TD_LockUnlock ("L_W_T_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_T_2_HLP`) css_TD_LockUnlock ("L_W_T_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_T_3_HLP`) css_TD_LockUnlock ("L_W_T_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_T_4_HLP`) css_TD_LockUnlock ("L_W_T_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_M_1_HLP`) css_TD_LockUnlock ("L_W_M_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_M_2_HLP`) css_TD_LockUnlock ("L_W_M_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_M_3_HLP`) css_TD_LockUnlock ("L_W_M_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_M_4_HLP`) css_TD_LockUnlock ("L_W_M_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_B_1_HLP`) css_TD_LockUnlock ("L_W_B_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_B_2_HLP`) css_TD_LockUnlock ("L_W_B_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_B_3_HLP`) css_TD_LockUnlock ("L_W_B_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists L_W_B_4_HLP`) css_TD_LockUnlock ("L_W_B_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_T_1_HLP`) css_TD_LockUnlock ("R_W_T_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_T_2_HLP`) css_TD_LockUnlock ("R_W_T_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_T_3_HLP`) css_TD_LockUnlock ("R_W_T_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_T_4_HLP`) css_TD_LockUnlock ("R_W_T_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_M_1_HLP`) css_TD_LockUnlock ("R_W_M_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_M_2_HLP`) css_TD_LockUnlock ("R_W_M_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_M_3_HLP`) css_TD_LockUnlock ("R_W_M_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_M_4_HLP`) css_TD_LockUnlock ("R_W_M_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_B_1_HLP`) css_TD_LockUnlock ("R_W_B_1_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_B_2_HLP`) css_TD_LockUnlock ("R_W_B_2_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_B_3_HLP`) css_TD_LockUnlock ("R_W_B_3_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`objExists R_W_B_4_HLP`) css_TD_LockUnlock ("R_W_B_4_HLP",1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0);if (`window -exists adset_fin`) deleteUI adset_fin;select -cl;}//*************************************************************************************************************//*********************************************Finalize Character**********************************************//*************************************************************************************************************global proc adset_final (){if (`window -exists adset_colorize_win`) deleteUI adset_colorize_win;select -r Character_HLP;FreezeTransformations;select -cl;string $chn=`textFieldGrp -q -tx adset_char_nm`;setAttr -type "string" -l 1 Character_HLP.characterName $chn;string $at[],$crv;float $pos,$pos2[];$at={"leg","hand","head","ear","sen","vac","tail","wing","HandFinger","FootFinger","stretchyBody","stretchyNeck","stretchyFoot","stretchyHand",	"stretchyHead","stretchyEyes","stretchyEars","stretchySensors","stretchyVacume","stretchyTail","ikSpine","ikEar","ikSensor","ikVacume","ikTail","ikWings","IkFkSwitch","autoClav","autoHip",	"FingerNum","handFingerNum","legFingerNum","earNum","tailNum","wingOneNum","WingTwoNum","wingThreeNum","sensorNum","vacumeNum","ORI_GRP"};for ($i=0;$i<size($at);$i++){if (`attributeExists $at[$i] Character_HLP`) setAttr -l 1 ("Character_HLP."+$at[$i]);}$at={"Neck","Head","Jaw","L_Eye","R_Eye","L_W_T","L_W_M","L_W_B","R_W_T","R_W_M","R_W_B"	,"Vac","L_Sen","R_Sen","L_Ear","R_Ear","Tail","L_Leg","R_Leg","L_S_ACLV","R_S_ACLV"	,"L_S_CLV","R_S_CLV","L_S","R_S","L_H_T","L_H_I","L_H_M","L_H_R","L_H_P","R_H_T"	,"R_H_I","R_H_M","R_H_R","R_H_P","L_F_T","L_F_I","L_F_M","L_F_R","L_F_P","R_F_T"	,"R_F_I","R_F_M","R_F_R","R_F_P"};for ($i=0;$i<size($at);$i++){if(`attributeExists ($at[$i]+"_Ori") "Character_HLP"`){setAttr ("Character_HLP."+$at[$i]+"_Ori") 1;}}int $hn,$lg,$hd,$er,$sen,$vac,$tl,$wng,$hnfn,$lgfn,$stbody,$stneck,$stlg,$sthn,$sthd,$steye,$ster,$stsen,$stvac,$sttl,$ikspine,$iker,$iksen,$ikvac,$iktl,$ikwing,$ikfk,$aclav,$ahip,$plug,$hnfnnum,$lgfnnum,$ernum,$tlnum,$w1num,$w2num,$w3num,$sennum,$vacnum;$hn=`getAttr Character_HLP.hand`;$lg=`getAttr Character_HLP.leg`;$hd=`getAttr Character_HLP.head`;$er=`getAttr Character_HLP.ear`;$sen=`getAttr Character_HLP.sen`;$vac=`getAttr Character_HLP.vac`;$tl=`getAttr Character_HLP.tail`;$wng=`getAttr Character_HLP.wing`;$hnfn=`getAttr Character_HLP.HandFinger`;$lgfn=`getAttr Character_HLP.FootFinger`;$stbody=`getAttr Character_HLP.stretchyBody`;$stneck=`getAttr Character_HLP.stretchyNeck`;$stlg=`getAttr Character_HLP.stretchyFoot`;$sthn=`getAttr Character_HLP.stretchyHand`;$sthd=`getAttr Character_HLP.stretchyHead`;$steye=`getAttr Character_HLP.stretchyEyes`;$ster=`getAttr Character_HLP.stretchyEars`;$stsen=`getAttr Character_HLP.stretchySensors`;$stvac=`getAttr Character_HLP.stretchyVacume`;$sttl=`getAttr Character_HLP.stretchyTail`;$ikspine=`getAttr Character_HLP.ikSpine`;$iker=`getAttr Character_HLP.ikEar`;$iksen=`getAttr Character_HLP.ikSensor`;$ikvac=`getAttr Character_HLP.ikVacume`;$iktl=`getAttr Character_HLP.ikTail`;$ikwing=`getAttr Character_HLP.ikWings`;$ikfk=`getAttr Character_HLP.IkFkSwitch`;$aclv=`getAttr Character_HLP.autoClav`;$ahip=`getAttr Character_HLP.autoHip`;$hnfnnum=`getAttr Character_HLP.handFingerNum`;$lgfnnum=`getAttr Character_HLP.legFingerNum`;$ernum=`getAttr Character_HLP.earNum`;$tlnum=`getAttr Character_HLP.tailNum`;$w1num=`getAttr Character_HLP.wingOneNum`;$w2num=`getAttr Character_HLP.WingTwoNum`;$w3num=`getAttr Character_HLP.wingThreeNum`;$sennum=`getAttr Character_HLP.sensorNum`;$vacnum=`getAttr Character_HLP.vacumeNum`;if ($sthd){float $pos1[],$pos2[];string $ctp,$ttp[];$pos1=`xform -q -ws -piv Jaw_1_SK_JNT`;$pos2=`xform -q -ws -piv Jaw_2_SK_JNT`;$ctp=`curve -d 1 -p $pos1[0] $pos1[1] $pos1[2] -p $pos2[0] $pos2[1] $pos2[2] -k 0 -k 1 `;rename $ctp "Jaw_ST_CRV";select -r Jaw_ST_CRV.cv[0];cluster -n"Jaw_B_ST_Cls";select -r Jaw_ST_CRV.cv[1];cluster -n"Jaw_E_ST_Cls";parentConstraint -mo -n"Jaw_ST_B_CNT" Head_M_SK_JNT Jaw_B_ST_ClsHandle;parentConstraint -mo -n"Jaw_ST_E_CNT" Jaw_HLP Jaw_E_ST_ClsHandle;parent Jaw_ST_CRV Cls_GRP;parent "Jaw_?_ST_ClsHandle" Cls_GRP;select -r Jaw_ST_CRV;$ttp=`duplicate`;rename $ttp Jaw_ST_Base_CRV;parent Jaw_ST_Base_CRV CRV_GRP;string $md=`createNode -n "Jaw_ST_MD_NOD" multiplyDivide`;string $inf1=`createNode -n"Jaw_C_INF_NOD" curveInfo`;string $inf2=`createNode -n"Jaw_B_INF_NOD" curveInfo`;connectAttr -f Jaw_ST_CRV.worldSpace[0] ($inf1+".inputCurve");connectAttr -f Jaw_ST_Base_CRV.worldSpace[0] ($inf2+".inputCurve");connectAttr -f ($inf1+".arcLength") ($md+".input1X");connectAttr -f ($inf2+".arcLength") ($md+".input2X");setAttr ($md+".operation") 2;string $con1=`createNode -n"Jaw_ST_Con_NOD" condition`;connectAttr -f ($md+".outputX") ($con1+".firstTerm");connectAttr -f ($md+".outputX") ($con1+".colorIfTrueR");setAttr ($con1+".secondTerm") 1;setAttr ($con1+".colorIfFalseR") 1;setAttr ($con1+".operation") 2;addAttr -ln "Stretchy"  -at bool  -min 0 -max 1 -dv 1 -k 1 Jaw_HLP;setAttr Jaw_HLP.Stretchy 1;string $con2=`createNode -n"Jaw_ST_NOD" condition`;connectAttr -f Jaw_HLP.Stretchy ($con2+".firstTerm");connectAttr -f ($con1+".outColorR") ($con2+".colorIfTrueR");setAttr ($con2+".secondTerm") 1;setAttr ($con2+".colorIfFalseR") 1;connectAttr -f ($con2+".outColorR") Jaw_1_SK_JNT.sx;}if ($ahip){string $mean=`createNode -n"A_Hip_NOD" plusMinusAverage`;setAttr ($mean+".operation") 3;connectAttr -f L_Foot_HLP.translate ($mean+".input3D[0]");connectAttr -f R_Foot_HLP.translate ($mean+".input3D[1]");group -em -n "Root_Hip_GRP";parent Root_Hip_GRP Root_H_GRP;parent Root_HLP Root_Hip_GRP;connectAttr -f ($mean+".output3Dx") Root_Hip_GRP.translateX;connectAttr -f ($mean+".output3Dz") Root_Hip_GRP.translateZ;}if(`objExists L_Eye_HLP`&&`objExists L_Eye_IK_HND`){parentConstraint -n "L_Eye_CNT" L_Eye_HLP L_Eye_IK_HND;parentConstraint -mo -n "L_Eye_H_CNT" Eyes_HLP L_Eye_H_GRP;}if(`objExists R_Eye_HLP`&&`objExists R_Eye_IK_HND`){parentConstraint -n "R_Eye_CNT" R_Eye_HLP R_Eye_IK_HND;parentConstraint -mo -n "R_Eye_H_CNT" Eyes_HLP R_Eye_H_GRP;}if(`objExists ST_Eye_HLP`){parentConstraint -mo -n "ST_Eye_H_CNT" Eyes_HLP ST_Eye_H_GRP;if (!$steye) delete ST_Eye_H_GRP;}if(`objExists Ex_Eye_HLP`){parentConstraint -mo -n "Ex_Eye_H_CNT" Head_HLP Ex_Eye_H_GRP;pointConstraint -mo -n"L_Eye_Ex_CNT" Ex_Eye_HLP L_Eye_1_SK_JNT;pointConstraint -mo -n"R_Eye_Ex_CNT" Ex_Eye_HLP R_Eye_1_SK_JNT;}if ($steye){string $mean=`createNode -n"L_Eye_ST_NOD" plusMinusAverage`;connectAttr ST_Eye_HLP.tz ($mean+".input1D[0]");setAttr ($mean+".input1D[1]") 1;connectAttr ($mean+".output1D") L_Eye_1_SK_JNT.sx;$mean=`createNode -n"R_Eye_ST_NOD" plusMinusAverage`;connectAttr ST_Eye_HLP.tz ($mean+".input1D[0]");setAttr ($mean+".input1D[1]") 1;connectAttr ($mean+".output1D") R_Eye_1_SK_JNT.sx;}if (`objExists Jaw_HLP`&&`objExists Jaw_IK_HND`) parentConstraint -n "Jaw_CNT" Jaw_HLP Jaw_IK_HND;if (`objExists L_Hand_HLP`&&`objExists L_ARM_IK_HND`) parentConstraint -n "L_Hand_CNT" L_Hand_HLP L_ARM_IK_HND;if (`objExists R_Hand_HLP`&&`objExists R_ARM_IK_HND`) parentConstraint -n "R_Hand_CNT" R_Hand_HLP R_ARM_IK_HND;if (`objExists L_Foot_HLP`&&`objExists L_Foot_GRP`) parentConstraint -n "L_Foot_CNT" L_Foot_HLP L_Foot_GRP;if (`objExists R_Foot_HLP`&&`objExists R_Foot_GRP`) parentConstraint -n "R_Foot_CNT" R_Foot_HLP R_Foot_GRP;if (!$ikspine){if (`objExists Body_Spine_IK_HND`) delete Body_Spine_IK_HND;if (`objExists Neck_Spine_IK_HND`) delete Neck_Spine_IK_HND;if (`objExists Body_Crv`) delete Body_Crv;if (`objExists Neck_Crv`) delete Neck_Crv;connectAttr Root_HLP.ry Root_R_SK_JNT.rx;connectAttr Root_HLP.rz Root_R_SK_JNT.ry;connectAttr Root_HLP.rx Root_R_SK_JNT.rz;connectAttr Sp_1_HLP.ry Spine_1_SK_JNT.rx;connectAttr Sp_1_HLP.rz Spine_1_SK_JNT.ry;connectAttr Sp_1_HLP.rx Spine_1_SK_JNT.rz;connectAttr Sp_2_HLP.ry Spine_2_SK_JNT.rx;connectAttr Sp_2_HLP.rz Spine_2_SK_JNT.ry;connectAttr Sp_2_HLP.rx Spine_2_SK_JNT.rz;connectAttr Sp_3_HLP.ry Spine_3_SK_JNT.rx;connectAttr Sp_3_HLP.rz Spine_3_SK_JNT.ry;connectAttr Sp_3_HLP.rx Spine_3_SK_JNT.rz;connectAttr Clavicle_HLP.ry Clav_B_SK_JNT.rx;connectAttr Clavicle_HLP.rz Clav_B_SK_JNT.ry;connectAttr Clavicle_HLP.rx Clav_B_SK_JNT.rz;if (`objExists Neck_B_HLP`) connectAttr Neck_B_HLP.ry Neck_B_SK_JNT.rx;if (`objExists Neck_B_HLP`) connectAttr Neck_B_HLP.rz Neck_B_SK_JNT.ry;if (`objExists Neck_B_HLP`) connectAttr Neck_B_HLP.rx Neck_B_SK_JNT.rz;if (`objExists Neck_M_HLP`) connectAttr Neck_M_HLP.ry Neck_M_SK_JNT.rx;if (`objExists Neck_M_HLP`) connectAttr Neck_M_HLP.rz Neck_M_SK_JNT.ry;if (`objExists Neck_M_HLP`) connectAttr Neck_M_HLP.rx Neck_M_SK_JNT.rz;if (`objExists Head_HLP`) connectAttr Head_HLP.ry Head_B_SK_JNT.rx;if (`objExists Head_HLP`) connectAttr Head_HLP.rz Head_B_SK_JNT.ry;if (`objExists Head_HLP`) connectAttr Head_HLP.rx Head_B_SK_JNT.rz;}if (!$iker){if (`objExists "*_Ear_?_H_GRP"`) delete "*_Ear_?_H_GRP";if (`objExists L_Ear_Crv`) delete L_Ear_Crv;if (`objExists R_Ear_Crv`) delete R_Ear_Crv;if ($er){if (!`attributeExists lEarUpDn Ear_Vac_Sen_HLP`) addAttr -ln "lEarUpDn"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;if (!`attributeExists lEarFtBk Ear_Vac_Sen_HLP`) addAttr -ln "lEarFtBk"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;if (!`attributeExists rEarUpDn Ear_Vac_Sen_HLP`) addAttr -ln "rEarUpDn"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;if (!`attributeExists rEarFtBk Ear_Vac_Sen_HLP`) addAttr -ln "rEarFtBk"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;select -hi L_Ear_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<(size($tmp)-1);$i++){connectAttr Ear_Vac_Sen_HLP.lEarUpDn ($tmp[$i]+".ry");connectAttr Ear_Vac_Sen_HLP.lEarFtBk ($tmp[$i]+".rz");}select -hi R_Ear_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<(size($tmp)-1);$i++){connectAttr Ear_Vac_Sen_HLP.rEarUpDn ($tmp[$i]+".ry");connectAttr Ear_Vac_Sen_HLP.rEarFtBk ($tmp[$i]+".rz");}}}if (!$iksen){if (`objExists "*_Sen_?_H_GRP"`) delete "*_Sen_?_H_GRP";if (`objExists L_Sen_Crv`) delete L_Sen_Crv;if (`objExists R_Sen_Crv`) delete R_Sen_Crv;if ($sen){if (!`attributeExists lSenUpDn Ear_Vac_Sen_HLP`) addAttr -ln "lSenLfRt"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;if (!`attributeExists lSenFtBk Ear_Vac_Sen_HLP`) addAttr -ln "lSenFtBk"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;if (!`attributeExists rSenUpDn Ear_Vac_Sen_HLP`) addAttr -ln "rSenLfRt"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;if (!`attributeExists rSenFtBk Ear_Vac_Sen_HLP`) addAttr -ln "rSenFtBk"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;select -hi L_Sen_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Ear_Vac_Sen_HLP.lSenLfRt ($tmp[$i]+".ry");connectAttr Ear_Vac_Sen_HLP.lSenFtBk ($tmp[$i]+".rz");}select -hi R_Sen_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Ear_Vac_Sen_HLP.rSenLfRt ($tmp[$i]+".ry");connectAttr Ear_Vac_Sen_HLP.rSenFtBk ($tmp[$i]+".rz");}}}if (!$ikvac){if (`objExists "Vac_?_H_GRP"`) delete "Vac_?_H_GRP";if (`objExists Vac_Crv`) delete Vac_Crv;if ($vac){if (!`attributeExists vacUpDn Ear_Vac_Sen_HLP`) addAttr -ln "vacUpDn"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;if (!`attributeExists vacLfRt Ear_Vac_Sen_HLP`) addAttr -ln "vacLfRt"  -at double -k 1 -w 1 -r 1 Ear_Vac_Sen_HLP;select -hi Vac_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Ear_Vac_Sen_HLP.vacUpDn ($tmp[$i]+".rz");connectAttr Ear_Vac_Sen_HLP.vacLfRt ($tmp[$i]+".ry");}}}if (!$iktl){if (`objExists "Tail_?_H_GRP"`) delete "Tail_?_H_GRP";if (`objExists Tail_Crv`) delete Tail_Crv;if ($tl){if (!`attributeExists tailUpDn Root_HLP`) addAttr -ln "tailUpDn"  -at double -k 1 -w 1 -r 1 Root_HLP;if (!`attributeExists tailLfRt Root_HLP`) addAttr -ln "tailLfRt"  -at double -k 1 -w 1 -r 1 Root_HLP;select -hi Tail_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Root_HLP.tailUpDn ($tmp[$i]+".rz");connectAttr Root_HLP.tailLfRt ($tmp[$i]+".ry");}}}if (!$ikwing){if (`objExists "*_W_?_?_H_GRP"`) delete "*_W_?_?_H_GRP";if (`objExists "*_Wing_?_Crv"`) delete "*_Wing_?_Crv";if ($wng){if (!`attributeExists lWnTpUpDn Wings_HLP`) addAttr -ln "lWnTpUpDn"  -at double -k 1 -w 1 -r 1 Wings_HLP;if (!`attributeExists lWnTpLfRt Wings_HLP`) addAttr -ln "lWnTpLfRt"  -at double -k 1 -w 1 -r 1 Wings_HLP;select -hi L_W_T_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Wings_HLP.lWnTpUpDn ($tmp[$i]+".ry");connectAttr Wings_HLP.lWnTpLfRt ($tmp[$i]+".rz");}if (!`attributeExists rWnTpUpDn Wings_HLP`) addAttr -ln "rWnTpUpDn"  -at double -k 1 -w 1 -r 1 Wings_HLP;if (!`attributeExists rWnTpLfRt Wings_HLP`) addAttr -ln "rWnTpLfRt"  -at double -k 1 -w 1 -r 1 Wings_HLP;select -hi R_W_T_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Wings_HLP.rWnTpUpDn ($tmp[$i]+".ry");connectAttr Wings_HLP.rWnTpLfRt ($tmp[$i]+".rz");}if (!`attributeExists lWnMdUpDn Wings_HLP`) addAttr -ln "lWnMdUpDn"  -at double -k 1 -w 1 -r 1 Wings_HLP;if (!`attributeExists lWnMdLfRt Wings_HLP`) addAttr -ln "lWnMdLfRt"  -at double -k 1 -w 1 -r 1 Wings_HLP;select -hi L_W_M_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Wings_HLP.lWnMdUpDn ($tmp[$i]+".ry");connectAttr Wings_HLP.lWnMdLfRt ($tmp[$i]+".rz");}if (!`attributeExists rWnMdUpDn Wings_HLP`) addAttr -ln "rWnMdUpDn"  -at double -k 1 -w 1 -r 1 Wings_HLP;if (!`attributeExists rWnMdLfRt Wings_HLP`) addAttr -ln "rWnMdLfRt"  -at double -k 1 -w 1 -r 1 Wings_HLP;select -hi R_W_M_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Wings_HLP.rWnMdUpDn ($tmp[$i]+".ry");connectAttr Wings_HLP.rWnMdLfRt ($tmp[$i]+".rz");}if (!`attributeExists lWnBtUpDn Wings_HLP`) addAttr -ln "lWnBtUpDn"  -at double -k 1 -w 1 -r 1 Wings_HLP;if (!`attributeExists lWnBtLfRt Wings_HLP`) addAttr -ln "lWnBtLfRt"  -at double -k 1 -w 1 -r 1 Wings_HLP;select -hi L_W_B_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Wings_HLP.lWnBtUpDn ($tmp[$i]+".ry");connectAttr Wings_HLP.lWnBtLfRt ($tmp[$i]+".rz");}if (!`attributeExists rWnBtUpDn Wings_HLP`) addAttr -ln "rWnBtUpDn"  -at double -k 1 -w 1 -r 1 Wings_HLP;if (!`attributeExists rWnBtLfRt Wings_HLP`) addAttr -ln "rWnBtLfRt"  -at double -k 1 -w 1 -r 1 Wings_HLP;select -hi R_W_B_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr Wings_HLP.rWnBtUpDn ($tmp[$i]+".ry");connectAttr Wings_HLP.rWnBtLfRt ($tmp[$i]+".rz");}}}if (!$ikfk && $hd && `objExists "*_Shoulder_FK_JNT"`) delete "*_Shoulder_FK_JNT";if (!$aclv && $hd){if (`objExists "*_ACLV_*"`) delete "*_ACLV_*";if (`objExists "*_CLV_*"`) delete "*_CLV_*";if (`objExists L_Shoulder_HLP`) parentConstraint -mo -n "L_Shoulder_IK_CNT" L_Shoulder_HLP L_CLVCL_IK_HND;if (`objExists R_Shoulder_HLP`) parentConstraint -mo -n "R_Shoulder_IK_CNT" R_Shoulder_HLP R_CLVCL_IK_HND;}if($ikspine){if ($stbody){$nm={"Root_R_SK_JNT","Root_T_SK_JNT","Spine_1_SK_JNT","Spine_2_SK_JNT","Spine_3_SK_JNT","Clav_B_SK_JNT"};stretchy_ik ("Body","Root_HLP","Body_Crv",$nm);}parentConstraint -mo -n "Body_1_CNT" Root_HLP Spine_1_ClsHandle;parentConstraint -mo -n "Body_2_CNT" Sp_1_HLP Spine_2_ClsHandle;parentConstraint -mo -n "Body_3_CNT" Sp_2_HLP Spine_3_ClsHandle;parentConstraint -mo -n "Body_4_CNT" Sp_3_HLP Spine_4_ClsHandle;parentConstraint -mo -n "Body_5_CNT" Clavicle_HLP Spine_5_ClsHandle;select -cl;}if ($ikspine){if ($stneck){$nm={"Neck_B_SK_JNT","Neck_M_SK_JNT","Head_B_SK_JNT"};stretchy_ik ("Neck","Neck_B_HLP","Neck_Crv",$nm);}if (`objExists Neck_B_HLP`) parentConstraint -mo -n "Neck_1_CNT" Neck_B_HLP Neck_1_ClsHandle;if (`objExists Neck_M_HLP`) parentConstraint -mo -n "Neck_2_CNT" Neck_M_HLP Neck_2_ClsHandle;if (`objExists Head_HLP`) parentConstraint -mo -n "Neck_3_CNT" Head_HLP Neck_3_ClsHandle;select -cl;}if($iker){if ($ster){select -hi "L_Ear_1_SK_JNT";select -d L_Ear_Eff;$nm=`ls -sl`;stretchy_ik ("L_Ear","L_Ear_4_HLP","L_Ear_Crv",$nm);}parentConstraint -mo -n "L_Ear_1_CNT" L_Ear_1_HLP L_Ear_1_ClsHandle;parentConstraint -mo -n "L_Ear_2_CNT" L_Ear_2_HLP L_Ear_2_ClsHandle;parentConstraint -mo -n "L_Ear_3_CNT" L_Ear_3_HLP L_Ear_3_ClsHandle;parentConstraint -mo -n "L_Ear_4_CNT" L_Ear_4_HLP L_Ear_4_ClsHandle;select -cl;if ($ster){select -hi "R_Ear_1_SK_JNT";select -d R_Ear_Eff;$nm=`ls -sl`;stretchy_ik ("R_Ear","R_Ear_4_HLP","R_Ear_Crv",$nm);}parentConstraint -mo -n "R_Ear_1_CNT" R_Ear_1_HLP R_Ear_1_ClsHandle;parentConstraint -mo -n "R_Ear_2_CNT" R_Ear_2_HLP R_Ear_2_ClsHandle;parentConstraint -mo -n "R_Ear_3_CNT" R_Ear_3_HLP R_Ear_3_ClsHandle;parentConstraint -mo -n "R_Ear_4_CNT" R_Ear_4_HLP R_Ear_4_ClsHandle;select -cl;}if($iksen){if ($stsen){select -hi "L_Sen_1_SK_JNT";select -d L_Sen_Eff;$nm=`ls -sl`;stretchy_ik ("L_Sen","L_Sen_4_HLP","L_Sen_Crv",$nm);}parentConstraint -mo -n "L_Sen_1_CNT" L_Sen_1_HLP L_Sen_1_ClsHandle;parentConstraint -mo -n "L_Sen_2_CNT" L_Sen_2_HLP L_Sen_2_ClsHandle;parentConstraint -mo -n "L_Sen_3_CNT" L_Sen_3_HLP L_Sen_3_ClsHandle;parentConstraint -mo -n "L_Sen_4_CNT" L_Sen_4_HLP L_Sen_4_ClsHandle;select -cl;if ($stsen){select -hi "R_Sen_1_SK_JNT";select -d R_Sen_Eff;$nm=`ls -sl`;stretchy_ik ("R_Sen","R_Sen_4_HLP","R_Sen_Crv",$nm);}parentConstraint -mo -n "R_Sen_1_CNT" R_Sen_1_HLP R_Sen_1_ClsHandle;parentConstraint -mo -n "R_Sen_2_CNT" R_Sen_2_HLP R_Sen_2_ClsHandle;parentConstraint -mo -n "R_Sen_3_CNT" R_Sen_3_HLP R_Sen_3_ClsHandle;parentConstraint -mo -n "R_Sen_4_CNT" R_Sen_4_HLP R_Sen_4_ClsHandle;select -cl;}if($ikvac){if ($stvac){select -hi "Vac_1_SK_JNT";select -d Vac_Eff;$nm=`ls -sl`;stretchy_ik ("Vac","Vac_4_HLP","Vac_Crv",$nm);}parentConstraint -mo -n "Vac_1_CNT" Vac_1_HLP Vac_1_ClsHandle;parentConstraint -mo -n "Vac_2_CNT" Vac_2_HLP Vac_2_ClsHandle;parentConstraint -mo -n "Vac_3_CNT" Vac_3_HLP Vac_3_ClsHandle;parentConstraint -mo -n "Vac_4_CNT" Vac_4_HLP Vac_4_ClsHandle;select -cl;}if($iktl){if ($sttl){select -hi "Tail_1_SK_JNT";select -d Tail_Eff;$nm=`ls -sl`;stretchy_ik ("Tail","Tail_4_HLP","Tail_Crv",$nm);}parentConstraint -mo -n "Tail_1_CNT" Tail_1_HLP Tail_1_ClsHandle;parentConstraint -mo -n "Tail_2_CNT" Tail_2_HLP Tail_2_ClsHandle;parentConstraint -mo -n "Tail_3_CNT" Tail_3_HLP Tail_3_ClsHandle;parentConstraint -mo -n "Tail_4_CNT" Tail_4_HLP Tail_4_ClsHandle;select -cl;}if ($ikwing){parentConstraint -mo -n "L_W_T_1_CNT" L_W_T_1_HLP L_Wing_T_1_ClsHandle;parentConstraint -mo -n "L_W_T_2_CNT" L_W_T_2_HLP L_Wing_T_2_ClsHandle;parentConstraint -mo -n "L_W_T_3_CNT" L_W_T_3_HLP L_Wing_T_3_ClsHandle;parentConstraint -mo -n "L_W_T_4_CNT" L_W_T_4_HLP L_Wing_T_4_ClsHandle;parentConstraint -mo -n "L_W_M_1_CNT" L_W_M_1_HLP L_Wing_M_1_ClsHandle;parentConstraint -mo -n "L_W_M_2_CNT" L_W_M_2_HLP L_Wing_M_2_ClsHandle;parentConstraint -mo -n "L_W_M_3_CNT" L_W_M_3_HLP L_Wing_M_3_ClsHandle;parentConstraint -mo -n "L_W_M_4_CNT" L_W_M_4_HLP L_Wing_M_4_ClsHandle;parentConstraint -mo -n "L_W_B_1_CNT" L_W_B_1_HLP L_Wing_B_1_ClsHandle;parentConstraint -mo -n "L_W_B_2_CNT" L_W_B_2_HLP L_Wing_B_2_ClsHandle;parentConstraint -mo -n "L_W_B_3_CNT" L_W_B_3_HLP L_Wing_B_3_ClsHandle;parentConstraint -mo -n "L_W_B_4_CNT" L_W_B_4_HLP L_Wing_B_4_ClsHandle;parentConstraint -mo -n "R_W_T_1_CNT" R_W_T_1_HLP R_Wing_T_1_ClsHandle;parentConstraint -mo -n "R_W_T_2_CNT" R_W_T_2_HLP R_Wing_T_2_ClsHandle;parentConstraint -mo -n "R_W_T_3_CNT" R_W_T_3_HLP R_Wing_T_3_ClsHandle;parentConstraint -mo -n "R_W_T_4_CNT" R_W_T_4_HLP R_Wing_T_4_ClsHandle;parentConstraint -mo -n "R_W_M_1_CNT" R_W_M_1_HLP R_Wing_M_1_ClsHandle;parentConstraint -mo -n "R_W_M_2_CNT" R_W_M_2_HLP R_Wing_M_2_ClsHandle;parentConstraint -mo -n "R_W_M_3_CNT" R_W_M_3_HLP R_Wing_M_3_ClsHandle;parentConstraint -mo -n "R_W_M_4_CNT" R_W_M_4_HLP R_Wing_M_4_ClsHandle;parentConstraint -mo -n "R_W_B_1_CNT" R_W_B_1_HLP R_Wing_B_1_ClsHandle;parentConstraint -mo -n "R_W_B_2_CNT" R_W_B_2_HLP R_Wing_B_2_ClsHandle;parentConstraint -mo -n "R_W_B_3_CNT" R_W_B_3_HLP R_Wing_B_3_ClsHandle;parentConstraint -mo -n "R_W_B_4_CNT" R_W_B_4_HLP R_Wing_B_4_ClsHandle;select -cl;}if($hn && $aclv){if (`objExists L_Elbow_HLP`&&`objExists L_CLV_IK_HND`) poleVectorConstraint -n "L_Elbow_CLV_CNT" L_Elbow_HLP L_CLV_IK_HND;if (`objExists R_Elbow_HLP`&&`objExists R_CLV_IK_HND`) poleVectorConstraint -n "R_Elbow_CLV_CNT" R_Elbow_HLP R_CLV_IK_HND;if (`objExists L_Hand_HLP`&&`objExists L_CLV_IK_HND`) parentConstraint -mo -n "L_Wrist_CLV_CNT" L_Hand_HLP L_CLV_IK_HND;if (`objExists R_Hand_HLP`&&`objExists R_CLV_IK_HND`) parentConstraint -mo -n "R_Wrist_CLV_CNT" R_Hand_HLP R_CLV_IK_HND;if (`objExists L_Elbow_CLV_JNT`&&`objExists L_CLV_Lc`) parentConstraint -mo -n "L_Elbow_CLV_Lc_CNT" L_Elbow_CLV_JNT L_CLV_Lc;if (`objExists R_Elbow_CLV_JNT`&&`objExists R_CLV_Lc`) parentConstraint -mo -n "R_Elbow_CLV_Lc_CNT" R_Elbow_CLV_JNT R_CLV_Lc;if (`objExists L_CLV_Lc`&&`objExists L_ACLV_Lc`&&`objExists L_ACLV_IK_HND`) parentConstraint -mo -n "L_Elbow_ACLV_CNT" L_CLV_Lc L_ACLV_Lc L_ACLV_IK_HND;if (`objExists R_CLV_Lc`&&`objExists R_ACLV_Lc`&&`objExists R_ACLV_IK_HND`) parentConstraint -mo -n "R_Elbow_ACLV_CNT" R_CLV_Lc R_ACLV_Lc R_ACLV_IK_HND;if (`objExists L_Clavicle_B_ACLV_JNT`&&`objExists L_Shoulder_H_GRP`) parentConstraint -mo -n "L_Shoulder_H_CNT" L_Clavicle_B_ACLV_JNT L_Shoulder_H_GRP;if (`objExists R_Clavicle_B_ACLV_JNT`&&`objExists R_Shoulder_H_GRP`) parentConstraint -mo -n "R_Shoulder_H_CNT" R_Clavicle_B_ACLV_JNT R_Shoulder_H_GRP;if (`objExists L_CLVCL_IK_HND`&&`objExists L_Shoulder_HLP`) parentConstraint -mo -n "L_Shoulder_CLVCL_CNT" L_Shoulder_HLP L_CLVCL_IK_HND;if (`objExists R_CLVCL_IK_HND`&&`objExists R_Shoulder_HLP`) parentConstraint -mo -n "R_Shoulder_CLVCL_CNT" R_Shoulder_HLP R_CLVCL_IK_HND;if (!`attributeExists autoShoulderBlend L_Hand_HLP`) addAttr -ln "autoShoulderBlend"  -at double -k 1 -w 1 -r 1 -min 0 -max 10 -dv 10 L_Hand_HLP;if (!`attributeExists autoShoulderBlend R_Hand_HLP`) addAttr -ln "autoShoulderBlend"  -at double -k 1 -w 1 -r 1 -min 0 -max 10 -dv 10 R_Hand_HLP;string $mtl=`createNode -n "L_Hand_AClav_MD" multiplyDivide`;connectAttr L_Hand_HLP.autoShoulderBlend ($mtl+".input1X");connectAttr L_Hand_HLP.autoShoulderBlend ($mtl+".input1Y");connectAttr L_Hand_HLP.autoShoulderBlend ($mtl+".input1Z");setAttr ($mtl+".input2X") .1;setAttr ($mtl+".input2Y") .1;setAttr ($mtl+".input2Z") .1;connectAttr ($mtl+".outputX") L_Elbow_ACLV_CNT.L_CLV_LcW0;string $rev=`createNode -n "L_Hand_ACLV_Rev" reverse`;connectAttr ($mtl+".outputX") ($rev+".inputX");connectAttr ($mtl+".outputY") ($rev+".inputY");connectAttr ($mtl+".outputZ") ($rev+".inputZ");connectAttr ($rev+".outputX") L_Elbow_ACLV_CNT.L_ACLV_LcW1;string $mtl=`createNode -n "R_Hand_AClav_MD" multiplyDivide`;connectAttr R_Hand_HLP.autoShoulderBlend ($mtl+".input1X");connectAttr R_Hand_HLP.autoShoulderBlend ($mtl+".input1Y");connectAttr R_Hand_HLP.autoShoulderBlend ($mtl+".input1Z");setAttr ($mtl+".input2X") .1;setAttr ($mtl+".input2Y") .1;setAttr ($mtl+".input2Z") .1;connectAttr ($mtl+".outputX") R_Elbow_ACLV_CNT.R_CLV_LcW0;string $rev=`createNode -n "R_Hand_ACLV_Rev" reverse`;connectAttr ($mtl+".outputX") ($rev+".inputX");connectAttr ($mtl+".outputY") ($rev+".inputY");connectAttr ($mtl+".outputZ") ($rev+".inputZ");connectAttr ($rev+".outputX") R_Elbow_ACLV_CNT.R_ACLV_LcW1;parentConstraint -mo -n"L_ACLV_Lc_SP_CNT" Spine_3_SK_JNT L_ACLV_Lc;parentConstraint -mo -n"R_ACLV_Lc_SP_CNT" Spine_3_SK_JNT R_ACLV_Lc;}if ($hn && $ikfk){parentConstraint -mo -n "L_Shoulder_CNT" L_Shoulder_IK_JNT L_Shoulder_FK_JNT L_Shoulder_SK_JNT;parentConstraint -mo -n "L_Elbow_CNT" L_Elbow_IK_JNT L_Elbow_FK_JNT L_Elbow_SK_JNT;parentConstraint -mo -n "L_Forearm_CNT" L_Forearm_IK_JNT L_Forearm_FK_JNT L_Forearm_SK_JNT;if (`objExists L_Wrist_IK_JNT`)parentConstraint -mo -n "L_Wrist_CNT" L_Wrist_IK_JNT L_Wrist_FK_JNT L_Wrist_SK_JNT;parentConstraint -mo -n "R_Shoulder_CNT" R_Shoulder_IK_JNT R_Shoulder_FK_JNT R_Shoulder_SK_JNT;parentConstraint -mo -n "R_Elbow_CNT" R_Elbow_IK_JNT R_Elbow_FK_JNT R_Elbow_SK_JNT;parentConstraint -mo -n "R_Forearm_CNT" R_Forearm_IK_JNT R_Forearm_FK_JNT R_Forearm_SK_JNT;if (`objExists R_Wrist_IK_JNT`)parentConstraint -mo -n "R_Wrist_CNT" R_Wrist_IK_JNT R_Wrist_FK_JNT R_Wrist_SK_JNT;if (!`attributeExists ikFkBlend L_Hand_HLP`) addAttr -ln "ikFkBlend"  -at double -k 1 -w 1 -r 1 -min 0 -max 10 -dv 5 L_Hand_HLP;if (!`attributeExists elbowRZ L_Hand_HLP`) addAttr -ln "elbowRZ"  -at double -k 1 -w 1 -r 1 L_Hand_HLP;if (!`attributeExists forearmRX L_Hand_HLP`) addAttr -ln "forearmRX"  -at double -k 1 -w 1 -r 1 L_Hand_HLP;if (!`attributeExists twistAdjust L_Hand_HLP`) addAttr -ln "twistAdjust"  -at double -k 1 -w 1 -r 1 -dv 1 L_Hand_HLP;if (!`attributeExists shoulderRZ L_Hand_HLP`) addAttr -ln "shoulderRZ"  -at double -k 1 -w 1 -r 1 L_Hand_HLP;if (!`attributeExists shoulderRY L_Hand_HLP`) addAttr -ln "shoulderRY"  -at double -k 1 -w 1 -r 1 L_Hand_HLP;if (!`attributeExists shoulderRX L_Hand_HLP`) addAttr -ln "shoulderRX"  -at double -k 1 -w 1 -r 1 L_Hand_HLP;if (!`attributeExists ikFkBlend R_Hand_HLP`) addAttr -ln "ikFkBlend"  -at double -k 1 -w 1 -r 1 -min 0 -max 10 -dv 5 R_Hand_HLP;if (!`attributeExists elbowRZ R_Hand_HLP`) addAttr -ln "elbowRZ"  -at double -k 1 -w 1 -r 1 R_Hand_HLP;if (!`attributeExists forearmRX R_Hand_HLP`) addAttr -ln "forearmRX"  -at double -k 1 -w 1 -r 1 R_Hand_HLP;if (!`attributeExists twistAdjust R_Hand_HLP`) addAttr -ln "twistAdjust"  -at double -k 1 -w 1 -r 1 -dv 1 R_Hand_HLP;if (!`attributeExists shoulderRZ R_Hand_HLP`) addAttr -ln "shoulderRZ"  -at double -k 1 -w 1 -r 1 R_Hand_HLP;if (!`attributeExists shoulderRY R_Hand_HLP`) addAttr -ln "shoulderRY"  -at double -k 1 -w 1 -r 1 R_Hand_HLP;if (!`attributeExists shoulderRX R_Hand_HLP`) addAttr -ln "shoulderRX"  -at double -k 1 -w 1 -r 1 R_Hand_HLP;string $mtl=`createNode -n "L_Hand_Twist_MD" multiplyDivide`;connectAttr L_Hand_HLP.twistAdjust ($mtl+".input1X");connectAttr L_Hand_HLP.forearmRX ($mtl+".input2X");if (`objExists L_Forearm_FK_JNT`) connectAttr ($mtl+".outputX") L_Forearm_FK_JNT.rx;if (`objExists L_Forearm_IK_JNT`) connectAttr ($mtl+".outputX") L_Forearm_IK_JNT.rx;string $mtl=`createNode -n "R_Hand_Twist_MD" multiplyDivide`;connectAttr R_Hand_HLP.twistAdjust ($mtl+".input1X");connectAttr R_Hand_HLP.forearmRX ($mtl+".input2X");if (`objExists R_Forearm_FK_JNT`) connectAttr ($mtl+".outputX") R_Forearm_FK_JNT.rx;if (`objExists R_Forearm_IK_JNT`) connectAttr ($mtl+".outputX") R_Forearm_IK_JNT.rx;connectAttr L_Hand_HLP.elbowRZ L_Elbow_FK_JNT.rz;connectAttr L_Hand_HLP.shoulderRZ L_Shoulder_FK_JNT.rz;connectAttr L_Hand_HLP.shoulderRY L_Shoulder_FK_JNT.ry;connectAttr L_Hand_HLP.shoulderRX L_Shoulder_FK_JNT.rx;if (`objExists L_Wrist_IK_JNT`) connectAttr L_Hand_HLP.rx L_Wrist_IK_JNT.rx;if (`objExists L_Wrist_IK_JNT`)connectAttr L_Hand_HLP.ry L_Wrist_IK_JNT.rz;if (`objExists L_Wrist_IK_JNT`)connectAttr L_Hand_HLP.rz L_Wrist_IK_JNT.ry;if (`objExists L_Wrist_FK_JNT`)connectAttr L_Hand_HLP.rx L_Wrist_FK_JNT.rx;if (`objExists L_Wrist_FK_JNT`)connectAttr L_Hand_HLP.ry L_Wrist_FK_JNT.rz;if (`objExists L_Wrist_FK_JNT`)connectAttr L_Hand_HLP.rz L_Wrist_FK_JNT.ry;connectAttr R_Hand_HLP.elbowRZ R_Elbow_FK_JNT.rz;connectAttr R_Hand_HLP.shoulderRZ R_Shoulder_FK_JNT.rz;connectAttr R_Hand_HLP.shoulderRY R_Shoulder_FK_JNT.ry;connectAttr R_Hand_HLP.shoulderRX R_Shoulder_FK_JNT.rx;if (`objExists R_Wrist_IK_JNT`)connectAttr R_Hand_HLP.rx R_Wrist_IK_JNT.rx;if (`objExists R_Wrist_IK_JNT`)connectAttr R_Hand_HLP.ry R_Wrist_IK_JNT.rz;if (`objExists R_Wrist_IK_JNT`)connectAttr R_Hand_HLP.rz R_Wrist_IK_JNT.ry;if (`objExists R_Wrist_FK_JNT`)connectAttr R_Hand_HLP.rx R_Wrist_FK_JNT.rx;if (`objExists R_Wrist_FK_JNT`)connectAttr R_Hand_HLP.ry R_Wrist_FK_JNT.rz;if (`objExists R_Wrist_FK_JNT`)connectAttr R_Hand_HLP.rz R_Wrist_FK_JNT.ry;string $mtl=`createNode -n "L_Hand_IkFk_MD" multiplyDivide`;connectAttr L_Hand_HLP.ikFkBlend ($mtl+".input1X");connectAttr L_Hand_HLP.ikFkBlend ($mtl+".input1Y");connectAttr L_Hand_HLP.ikFkBlend ($mtl+".input1Z");setAttr ($mtl+".input2X") .1;setAttr ($mtl+".input2Y") .1;setAttr ($mtl+".input2Z") .1;connectAttr ($mtl+".outputX") L_Shoulder_CNT.L_Shoulder_IK_JNTW0;connectAttr ($mtl+".outputY") L_Elbow_CNT.L_Elbow_IK_JNTW0;connectAttr ($mtl+".outputZ") L_Forearm_CNT.L_Forearm_IK_JNTW0;if (`objExists L_Wrist_IK_JNT`)connectAttr ($mtl+".outputZ") L_Wrist_CNT.L_Wrist_IK_JNTW0;string $rev=`createNode -n "L_Hand_IkFk_Rev" reverse`;connectAttr ($mtl+".outputX") ($rev+".inputX");connectAttr ($mtl+".outputY") ($rev+".inputY");connectAttr ($mtl+".outputZ") ($rev+".inputZ");connectAttr ($rev+".outputX") L_Shoulder_CNT.L_Shoulder_FK_JNTW1;connectAttr ($rev+".outputY") L_Elbow_CNT.L_Elbow_FK_JNTW1;connectAttr ($rev+".outputZ") L_Forearm_CNT.L_Forearm_FK_JNTW1;if (`objExists L_Wrist_FK_JNT`)connectAttr ($rev+".outputZ") L_Wrist_CNT.L_Wrist_FK_JNTW1;string $mtl=`createNode -n "R_Hand_IkFk_MD" multiplyDivide`;connectAttr R_Hand_HLP.ikFkBlend ($mtl+".input1X");connectAttr R_Hand_HLP.ikFkBlend ($mtl+".input1Y");connectAttr R_Hand_HLP.ikFkBlend ($mtl+".input1Z");setAttr ($mtl+".input2X") .1;setAttr ($mtl+".input2Y") .1;setAttr ($mtl+".input2Z") .1;connectAttr ($mtl+".outputX") R_Shoulder_CNT.R_Shoulder_IK_JNTW0;connectAttr ($mtl+".outputY") R_Elbow_CNT.R_Elbow_IK_JNTW0;connectAttr ($mtl+".outputZ") R_Forearm_CNT.R_Forearm_IK_JNTW0;if (`objExists R_Wrist_IK_JNT`)connectAttr ($mtl+".outputZ") R_Wrist_CNT.R_Wrist_IK_JNTW0;string $rev=`createNode -n "R_Hand_IkFk_Rev" reverse`;connectAttr ($mtl+".outputX") ($rev+".inputX");connectAttr ($mtl+".outputY") ($rev+".inputY");connectAttr ($mtl+".outputZ") ($rev+".inputZ");connectAttr ($rev+".outputX") R_Shoulder_CNT.R_Shoulder_FK_JNTW1;connectAttr ($rev+".outputY") R_Elbow_CNT.R_Elbow_FK_JNTW1;connectAttr ($rev+".outputZ") R_Forearm_CNT.R_Forearm_FK_JNTW1;if (`objExists R_Wrist_FK_JNT`)connectAttr ($rev+".outputZ") R_Wrist_CNT.R_Wrist_FK_JNTW1;}if ($hn && !$ikfk){parentConstraint -n "L_Shoulder_CNT" L_Shoulder_IK_JNT L_Shoulder_SK_JNT;parentConstraint -n "L_Elbow_CNT" L_Elbow_IK_JNT L_Elbow_SK_JNT;parentConstraint -n "L_Forearm_CNT" L_Forearm_IK_JNT L_Forearm_SK_JNT;if (`objExists L_Wrist_IK_JNT`) parentConstraint -n "L_Wrist_CNT" L_Wrist_IK_JNT L_Wrist_SK_JNT;parentConstraint -n "R_Shoulder_CNT" R_Shoulder_IK_JNT R_Shoulder_SK_JNT;parentConstraint -n "R_Elbow_CNT" R_Elbow_IK_JNT R_Elbow_SK_JNT;parentConstraint -n "R_Forearm_CNT" R_Forearm_IK_JNT R_Forearm_SK_JNT;if (`objExists R_Wrist_IK_JNT`) parentConstraint -n "R_Wrist_CNT" R_Wrist_IK_JNT R_Wrist_SK_JNT;if (!`attributeExists twistAdjust L_Hand_HLP`) addAttr -ln "twistAdjust"  -at double -k 1 -w 1 -r 1 -dv 1 L_Hand_HLP;if (!`attributeExists twistAdjust R_Hand_HLP`) addAttr -ln "twistAdjust"  -at double -k 1 -w 1 -r 1 -dv 1 R_Hand_HLP;if (!`attributeExists forearmRX L_Hand_HLP`) addAttr -ln "forearmRX"  -at double -k 1 -w 1 -r 1 L_Hand_HLP;if (!`attributeExists forearmRX R_Hand_HLP`) addAttr -ln "forearmRX"  -at double -k 1 -w 1 -r 1 R_Hand_HLP;string $mtl=`createNode -n "L_Hand_Twist_MD" multiplyDivide`;connectAttr L_Hand_HLP.twistAdjust ($mtl+".input1X");connectAttr L_Hand_HLP.forearmRX ($mtl+".input2X");if (`objExists L_Forearm_IK_JNT`) connectAttr ($mtl+".outputX") L_Forearm_IK_JNT.rx;string $mtl=`createNode -n "R_Hand_Twist_MD" multiplyDivide`;connectAttr R_Hand_HLP.twistAdjust ($mtl+".input1X");connectAttr R_Hand_HLP.forearmRX ($mtl+".input2X");if (`objExists R_Forearm_IK_JNT`) connectAttr ($mtl+".outputX") R_Forearm_IK_JNT.rx;if (`objExists L_Wrist_IK_JNT`) connectAttr L_Hand_HLP.rx L_Wrist_IK_JNT.rx;if (`objExists L_Wrist_IK_JNT`) connectAttr L_Hand_HLP.ry L_Wrist_IK_JNT.rz;if (`objExists L_Wrist_IK_JNT`) connectAttr L_Hand_HLP.rz L_Wrist_IK_JNT.ry;if (`objExists R_Wrist_IK_JNT`) connectAttr R_Hand_HLP.rx R_Wrist_IK_JNT.rx;if (`objExists R_Wrist_IK_JNT`) connectAttr R_Hand_HLP.ry R_Wrist_IK_JNT.rz;if (`objExists R_Wrist_IK_JNT`) connectAttr R_Hand_HLP.rz R_Wrist_IK_JNT.ry;}if ($hn && $sthn){float $pos2s[],$pos2e[];string $stcv[];$tmp=`spaceLocator`;rename $tmp[0] "L_H_1_ST_Lc";$tmp=`spaceLocator`;rename $tmp[0] "L_H_2_ST_Lc";parentConstraint -n"L_H_1_ST_CNT" L_Shoulder_HLP L_H_1_ST_Lc;parentConstraint -n"L_H_2_ST_CNT" L_Hand_HLP L_H_2_ST_Lc;$pos2s=`xform -q -ws -piv L_H_1_ST_Lc`;$pos2e=`xform -q -ws -piv L_H_2_ST_Lc`;curve -d 1 -p $pos2s[0] $pos2s[1] $pos2s[2] -p $pos2e[0] $pos2e[1] $pos2e[2] -k 0 -k 1 -n "L_ST_Arm_Base_Crv";$stcv=`duplicate`;rename $stcv[0] "L_ST_Arm_Current_Crv";select L_ST_Arm_Current_Crv.cv[0];cluster -n "L_ST_Arm_Current_1_Cls";select L_ST_Arm_Current_Crv.cv[1];cluster -n "L_ST_Arm_Current_2_Cls";parentConstraint -mo -n "L_A_1_ST_CNT" L_H_1_ST_Lc L_ST_Arm_Current_1_ClsHandle;parentConstraint -mo -n "L_A_2_ST_CNT" L_H_2_ST_Lc L_ST_Arm_Current_2_ClsHandle;parent "L_ST_Arm_Current_?_ClsHandle" Cls_GRP;string $dis=`createNode -n"L_H_ST_Current_Dis" curveInfo`;string $dis2=`createNode -n"L_H_ST_Base_Dis" curveInfo`;connectAttr -f L_ST_Arm_Current_Crv.worldSpace[0] ($dis+".inputCurve");connectAttr -f L_ST_Arm_Base_Crv.worldSpace[0] ($dis2+".inputCurve");string $div=`createNode -n"L_H_ST_Div" multiplyDivide`;setAttr ($div+".operation") 2;connectAttr ($dis+".arcLength") ($div+".input1X");connectAttr ($dis2+".arcLength") ($div+".input2X");string $con=`createNode -n"L_H_ST_Con" condition`;connectAttr ($dis+".arcLength") ($con+".firstTerm");connectAttr ($dis2+".arcLength") ($con+".secondTerm");connectAttr ($div+".outputX") ($con+".colorIfTrueR");setAttr ($con+".operation") 2;if (`objExists L_Shoulder_IK_JNT`) connectAttr ($con+".outColorR") L_Shoulder_IK_JNT.sx;if (`objExists L_Elbow_IK_JNT`) connectAttr ($con+".outColorR") L_Elbow_IK_JNT.sx;if (`objExists L_Forearm_IK_JNT`) connectAttr ($con+".outColorR") L_Forearm_IK_JNT.sx;if (`objExists L_Shoulder_FK_JNT`) connectAttr ($con+".outColorR") L_Shoulder_FK_JNT.sx;if (`objExists L_Elbow_FK_JNT`) connectAttr ($con+".outColorR") L_Elbow_FK_JNT.sx;if (`objExists L_Forearm_FK_JNT`) connectAttr ($con+".outColorR") L_Forearm_FK_JNT.sx;if (`objExists L_Shoulder_SK_JNT`) connectAttr ($con+".outColorR") L_Shoulder_SK_JNT.sx;if (`objExists L_Elbow_SK_JNT`) connectAttr ($con+".outColorR") L_Elbow_SK_JNT.sx;if (`objExists L_Forearm_SK_JNT`) connectAttr ($con+".outColorR") L_Forearm_SK_JNT.sx;$tmp=`spaceLocator`;rename $tmp[0] "R_H_1_ST_Lc";$tmp=`spaceLocator`;rename $tmp[0] "R_H_2_ST_Lc";parentConstraint -n"R_H_1_ST_CNT" R_Shoulder_HLP R_H_1_ST_Lc;parentConstraint -n"R_H_2_ST_CNT" R_Hand_HLP R_H_2_ST_Lc;$pos2s=`xform -q -ws -piv R_H_1_ST_Lc`;$pos2e=`xform -q -ws -piv R_H_2_ST_Lc`;curve -d 1 -p $pos2s[0] $pos2s[1] $pos2s[2] -p $pos2e[0] $pos2e[1] $pos2e[2] -k 0 -k 1 -n "R_ST_Arm_Base_Crv";$stcv=`duplicate`;rename $stcv[0] "R_ST_Arm_Current_Crv";select R_ST_Arm_Current_Crv.cv[0];cluster -n "R_ST_Arm_Current_1_Cls";select R_ST_Arm_Current_Crv.cv[1];cluster -n "R_ST_Arm_Current_2_Cls";parentConstraint -mo -n "R_A_1_ST_CNT" R_H_1_ST_Lc R_ST_Arm_Current_1_ClsHandle;parentConstraint -mo -n "R_A_2_ST_CNT" R_H_2_ST_Lc R_ST_Arm_Current_2_ClsHandle;parent "R_ST_Arm_Current_?_ClsHandle" Cls_GRP;string $dis=`createNode -n"R_H_ST_Current_Dis" curveInfo`;string $dis2=`createNode -n"R_H_ST_Base_Dis" curveInfo`;connectAttr -f R_ST_Arm_Current_Crv.worldSpace[0] ($dis+".inputCurve");connectAttr -f R_ST_Arm_Base_Crv.worldSpace[0] ($dis2+".inputCurve");string $div=`createNode -n"R_H_ST_Div" multiplyDivide`;setAttr ($div+".operation") 2;connectAttr ($dis+".arcLength") ($div+".input1X");connectAttr ($dis2+".arcLength") ($div+".input2X");string $con=`createNode -n"R_H_ST_Con" condition`;connectAttr ($dis+".arcLength") ($con+".firstTerm");connectAttr ($dis2+".arcLength") ($con+".secondTerm");connectAttr ($div+".outputX") ($con+".colorIfTrueR");setAttr ($con+".operation") 2;if (`objExists R_Shoulder_IK_JNT`) connectAttr ($con+".outColorR") R_Shoulder_IK_JNT.sx;if (`objExists R_Elbow_IK_JNT`) connectAttr ($con+".outColorR") R_Elbow_IK_JNT.sx;if (`objExists R_Forearm_IK_JNT`) connectAttr ($con+".outColorR") R_Forearm_IK_JNT.sx;if (`objExists R_Shoulder_FK_JNT`) connectAttr ($con+".outColorR") R_Shoulder_FK_JNT.sx;if (`objExists R_Elbow_FK_JNT`) connectAttr ($con+".outColorR") R_Elbow_FK_JNT.sx;if (`objExists R_Forearm_FK_JNT`) connectAttr ($con+".outColorR") R_Forearm_FK_JNT.sx;if (`objExists R_Shoulder_SK_JNT`) connectAttr ($con+".outColorR") R_Shoulder_SK_JNT.sx;if (`objExists R_Elbow_SK_JNT`) connectAttr ($con+".outColorR") R_Elbow_SK_JNT.sx;if (`objExists R_Forearm_SK_JNT`) connectAttr ($con+".outColorR") R_Forearm_SK_JNT.sx;}if ($hn){createNode reverse -n"R_Wrist_Rev";connectAttr -f R_Hand_HLP.rx R_Wrist_Rev.inputX;channelBoxCommand -break;CBdeleteConnection "R_Wrist_SK_JNT.rx";connectAttr -f R_Wrist_Rev.outputX R_Wrist_SK_JNT.rotateX;createNode reverse -n"L_Wrist_Rev";connectAttr -f L_Hand_HLP.ry L_Wrist_Rev.inputY;channelBoxCommand -break;CBdeleteConnection "L_Wrist_SK_JNT.rz";connectAttr -f L_Wrist_Rev.outputY L_Wrist_SK_JNT.rotateZ;}if ($lg){if (!`attributeExists ballRaw L_Foot_HLP`) addAttr -ln "ballRaw"  -at double -k 1 -w 1 -r 1 L_Foot_HLP;if (!`attributeExists toeRaw L_Foot_HLP`) addAttr -ln "toeRaw"  -at double -k 1 -w 1 -r 1 L_Foot_HLP;if (!`attributeExists toeBend L_Foot_HLP`) addAttr -ln "toeBend"  -at double -k 1 -w 1 -r 1 L_Foot_HLP;if (!`attributeExists toeTwist L_Foot_HLP`) addAttr -ln "toeTwist"  -at double -k 1 -w 1 -r 1 L_Foot_HLP;connectAttr L_Foot_HLP.ballRaw L_Ball_Raw_GRP.rx;connectAttr L_Foot_HLP.toeRaw L_Toe_Raw_GRP.rx;connectAttr L_Foot_HLP.toeTwist L_Toe_Raw_GRP.ry;connectAttr L_Foot_HLP.toeBend L_Toe_Bend_GRP.rx;if (!`attributeExists ballRaw R_Foot_HLP`) addAttr -ln "ballRaw"  -at double -k 1 -w 1 -r 1 R_Foot_HLP;if (!`attributeExists toeRaw R_Foot_HLP`) addAttr -ln "toeRaw"  -at double -k 1 -w 1 -r 1 R_Foot_HLP;if (!`attributeExists toeBend R_Foot_HLP`) addAttr -ln "toeBend"  -at double -k 1 -w 1 -r 1 R_Foot_HLP;if (!`attributeExists toeTwist R_Foot_HLP`) addAttr -ln "toeTwist"  -at double -k 1 -w 1 -r 1 R_Foot_HLP;connectAttr R_Foot_HLP.ballRaw R_Ball_Raw_GRP.rx;connectAttr R_Foot_HLP.toeRaw R_Toe_Raw_GRP.rx;connectAttr R_Foot_HLP.toeTwist R_Toe_Raw_GRP.ry;connectAttr R_Foot_HLP.toeBend R_Toe_Bend_GRP.rx;if (`objExists L_Knee_HLP`&&`objExists L_Leg_IK_HND`) poleVectorConstraint -n "L_Knee_CNT" L_Knee_HLP L_Leg_IK_HND;if (`objExists R_Knee_HLP`&&`objExists R_Leg_IK_HND`) poleVectorConstraint -n "R_Knee_CNT" R_Knee_HLP R_Leg_IK_HND;}if ($lg && $stlg){float $pos2s[],$pos2e[];string $stcv[];$tmp=`spaceLocator`;rename $tmp[0] "L_F_1_ST_Lc";$tmp=`spaceLocator`;rename $tmp[0] "L_F_2_ST_Lc";parentConstraint -n"L_F_1_ST_CNT" Root_HLP L_F_1_ST_Lc;parentConstraint -n"L_F_2_ST_CNT" L_Foot_HLP L_F_2_ST_Lc;$pos2s=`xform -q -ws -piv L_F_1_ST_Lc`;$pos2e=`xform -q -ws -piv L_F_2_ST_Lc`;curve -d 1 -p $pos2s[0] $pos2s[1] $pos2s[2] -p $pos2e[0] $pos2e[1] $pos2e[2] -k 0 -k 1 -n "L_ST_Foot_Base_Crv";$stcv=`duplicate`;rename $stcv[0] "L_ST_Foot_Current_Crv";select L_ST_Foot_Current_Crv.cv[0];cluster -n "L_ST_Foot_Current_1_Cls";select L_ST_Foot_Current_Crv.cv[1];cluster -n "L_ST_Foot_Current_2_Cls";parentConstraint -mo -n "L_L_1_ST_CNT" L_F_1_ST_Lc L_ST_Foot_Current_1_ClsHandle;parentConstraint -mo -n "L_L_2_ST_CNT" L_F_2_ST_Lc L_ST_Foot_Current_2_ClsHandle;parent "L_ST_Foot_Current_?_ClsHandle" Cls_GRP;string $dis=`createNode -n"L_L_ST_Current_Dis" curveInfo`;string $dis2=`createNode -n"L_L_ST_Base_Dis" curveInfo`;connectAttr -f L_ST_Foot_Current_Crv.worldSpace[0] ($dis+".inputCurve");connectAttr -f L_ST_Foot_Base_Crv.worldSpace[0] ($dis2+".inputCurve");string $div=`createNode -n"L_F_ST_Div" multiplyDivide`;setAttr ($div+".operation") 2;connectAttr ($dis+".arcLength") ($div+".input1X");connectAttr ($dis2+".arcLength") ($div+".input2X");string $con=`createNode -n"L_F_ST_Con" condition`;connectAttr ($dis+".arcLength") ($con+".firstTerm");connectAttr ($dis2+".arcLength") ($con+".secondTerm");connectAttr ($div+".outputX") ($con+".colorIfTrueR");setAttr ($con+".operation") 2;if (`objExists L_Hip_SK_JNT`) connectAttr ($con+".outColorR") L_Hip_SK_JNT.sx;if (`objExists L_Knee_SK_JNT`) connectAttr ($con+".outColorR") L_Knee_SK_JNT.sx;$tmp=`spaceLocator`;rename $tmp[0] "R_F_1_ST_Lc";$tmp=`spaceLocator`;rename $tmp[0] "R_F_2_ST_Lc";parentConstraint -n"R_F_1_ST_CNT" Root_HLP R_F_1_ST_Lc;parentConstraint -n"R_F_2_ST_CNT" R_Foot_HLP R_F_2_ST_Lc;$pos2s=`xform -q -ws -piv R_F_1_ST_Lc`;$pos2e=`xform -q -ws -piv R_F_2_ST_Lc`;curve -d 1 -p $pos2s[0] $pos2s[1] $pos2s[2] -p $pos2e[0] $pos2e[1] $pos2e[2] -k 0 -k 1 -n "R_ST_Foot_Base_Crv";$stcv=`duplicate`;rename $stcv[0] "R_ST_Foot_Current_Crv";select R_ST_Foot_Current_Crv.cv[0];cluster -n "R_ST_Foot_Current_1_Cls";select R_ST_Foot_Current_Crv.cv[1];cluster -n "R_ST_Foot_Current_2_Cls";parentConstraint -mo -n "R_L_1_ST_CNT" R_F_1_ST_Lc R_ST_Foot_Current_1_ClsHandle;parentConstraint -mo -n "R_L_2_ST_CNT" R_F_2_ST_Lc R_ST_Foot_Current_2_ClsHandle;parent "R_ST_Foot_Current_?_ClsHandle" Cls_GRP;string $dis=`createNode -n"R_L_ST_Current_Dis" curveInfo`;string $dis2=`createNode -n"R_L_ST_Base_Dis" curveInfo`;connectAttr -f R_ST_Foot_Current_Crv.worldSpace[0] ($dis+".inputCurve");connectAttr -f R_ST_Foot_Base_Crv.worldSpace[0] ($dis2+".inputCurve");string $div=`createNode -n"R_F_ST_Div" multiplyDivide`;setAttr ($div+".operation") 2;connectAttr ($dis+".arcLength") ($div+".input1X");connectAttr ($dis2+".arcLength") ($div+".input2X");string $con=`createNode -n"R_F_ST_Con" condition`;connectAttr ($dis+".arcLength") ($con+".firstTerm");connectAttr ($dis2+".arcLength") ($con+".secondTerm");connectAttr ($div+".outputX") ($con+".colorIfTrueR");setAttr ($con+".operation") 2;if (`objExists R_Hip_SK_JNT`) connectAttr ($con+".outColorR") R_Hip_SK_JNT.sx;if (`objExists R_Knee_SK_JNT`) connectAttr ($con+".outColorR") R_Knee_SK_JNT.sx;}if (`objExists L_Elbow_HLP`&&`objExists L_ARM_IK_HND`) poleVectorConstraint -n "L_Elbow_CNT" L_Elbow_HLP L_ARM_IK_HND;if (`objExists R_Elbow_HLP`&&`objExists R_ARM_IK_HND`) poleVectorConstraint -n "R_Elbow_CNT" R_Elbow_HLP R_ARM_IK_HND;if (`objExists "*_ST_Lc"`) parent "*_ST_Lc" H_EX_GRP;scaleConstraint -mo -n"Crv_Scl_CNT" Glb_Scl CRV_GRP;if ($hnfn){if (`objExists L_H_T_1_SK_JNT`) {select -hi L_H_T_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_H_T_HLP.rx ($tmp[$i]+".rx");connectAttr L_H_T_HLP.ry ($tmp[$i]+".ry");connectAttr L_H_T_HLP.rz ($tmp[$i]+".rz"); }}if (`objExists R_H_T_1_SK_JNT`) {select -hi R_H_T_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_H_T_HLP.rx ($tmp[$i]+".rx");connectAttr R_H_T_HLP.ry ($tmp[$i]+".ry");connectAttr R_H_T_HLP.rz ($tmp[$i]+".rz"); }}if (`objExists L_H_I_1_SK_JNT`) {select -hi L_H_I_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_H_I_HLP.ry ($tmp[$i]+".ry");connectAttr L_H_I_HLP.rz ($tmp[$i]+".rz"); }}if (`objExists R_H_I_1_SK_JNT`) {select -hi R_H_I_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_H_I_HLP.ry ($tmp[$i]+".ry");connectAttr R_H_I_HLP.rz ($tmp[$i]+".rz"); }}if (`objExists L_H_M_1_SK_JNT`) {select -hi L_H_M_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_H_M_HLP.ry ($tmp[$i]+".ry");connectAttr L_H_M_HLP.rz ($tmp[$i]+".rz"); }}if (`objExists R_H_M_1_SK_JNT`) {select -hi R_H_M_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_H_M_HLP.ry ($tmp[$i]+".ry");connectAttr R_H_M_HLP.rz ($tmp[$i]+".rz"); }}if (`objExists L_H_R_1_SK_JNT`) {select -hi L_H_R_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_H_R_HLP.ry ($tmp[$i]+".ry");connectAttr L_H_R_HLP.rz ($tmp[$i]+".rz"); }}if (`objExists R_H_R_1_SK_JNT`) {select -hi R_H_R_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_H_R_HLP.ry ($tmp[$i]+".ry");connectAttr R_H_R_HLP.rz ($tmp[$i]+".rz"); }}if (`objExists L_H_P_1_SK_JNT`) {select -hi L_H_P_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_H_P_HLP.ry ($tmp[$i]+".ry");connectAttr L_H_P_HLP.rz ($tmp[$i]+".rz"); }}if (`objExists R_H_P_1_SK_JNT`) {select -hi R_H_P_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_H_P_HLP.ry ($tmp[$i]+".ry");connectAttr R_H_P_HLP.rz ($tmp[$i]+".rz"); }}}if ($lgfn){select -hi L_F_T_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_F_T_HLP.rx ($tmp[$i]+".rz");connectAttr L_F_T_HLP.ry ($tmp[$i]+".ry");connectAttr L_F_T_HLP.rz ($tmp[$i]+".rx"); }select -hi R_F_T_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_F_T_HLP.rx ($tmp[$i]+".rz");connectAttr R_F_T_HLP.ry ($tmp[$i]+".ry");connectAttr R_F_T_HLP.rz ($tmp[$i]+".rx"); }select -hi L_F_I_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_F_I_HLP.ry ($tmp[$i]+".ry");connectAttr L_F_I_HLP.rx ($tmp[$i]+".rz"); }select -hi R_F_I_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_F_I_HLP.ry ($tmp[$i]+".ry");connectAttr R_F_I_HLP.rx ($tmp[$i]+".rz"); }select -hi L_F_M_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_F_M_HLP.ry ($tmp[$i]+".ry");connectAttr L_F_M_HLP.rx ($tmp[$i]+".rz"); }select -hi R_F_M_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_F_M_HLP.ry ($tmp[$i]+".ry");connectAttr R_F_M_HLP.rx ($tmp[$i]+".rz"); }select -hi L_F_R_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_F_R_HLP.ry ($tmp[$i]+".ry");connectAttr L_F_R_HLP.rx ($tmp[$i]+".rz"); }select -hi R_F_R_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_F_R_HLP.ry ($tmp[$i]+".ry");connectAttr R_F_R_HLP.rx ($tmp[$i]+".rz"); }select -hi L_F_P_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr L_F_P_HLP.ry ($tmp[$i]+".ry");connectAttr L_F_P_HLP.rx ($tmp[$i]+".rz"); }select -hi R_F_P_1_SK_JNT;$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){connectAttr R_F_P_HLP.ry ($tmp[$i]+".ry");connectAttr R_F_P_HLP.rx ($tmp[$i]+".rz"); }}adset_cnt_hlp_hlp;if (`checkBox -q -v adset_Dyn_Ears_bx`) css_adset_dynik ("L_Ear");if (`checkBox -q -v adset_Dyn_Sensor_bx`) css_adset_dynik ("L_Sen");if (`checkBox -q -v adset_Dyn_Ears_bx`) css_adset_dynik ("R_Ear");if (`checkBox -q -v adset_Dyn_Sensor_bx`) css_adset_dynik ("R_Sen");if (`checkBox -q -v adset_Dyn_Vac_bx`) css_adset_dynik ("Vac");if (`checkBox -q -v adset_Dyn_Tail_bx`) css_adset_dynik ("Tail");if ($hn) adset_aut_scap_win;if ($hn) adset_ul_rad_win;if (`objExists L_Eye_IK_HND`){delete L_Eye_IK_HND;aimConstraint -mo -n"L_Eye_Aim_CNT" L_Eye_HLP L_Eye_1_SK_JNT;}if (`objExists R_Eye_IK_HND`){delete R_Eye_IK_HND;aimConstraint -mo -n"R_Eye_Aim_CNT" R_Eye_HLP R_Eye_1_SK_JNT;}if (`objExists Head_B_ST_H_CNT`){delete Head_B_ST_H_CNT;parent Head_B_ST_H_GRP Head_HLP;}select -cl;if ($hd) css_geo_eye_win;adset_bn_cn_cmd (2);adset_bn_cn_cmd (5);}//*************************************************************************************************************//*********************************************Create Standard Groups******************************************//*************************************************************************************************************global proc adset_grp (){if (`objExists Ori_NOD_GRP`) rename Ori_NOD_GRP Ori_GRP;string $nm[];$nm={"Glb_GRP","Glb_TX","Glb_TY","Glb_TZ","Glb_RX","Glb_RY","Glb_RZ","Glb_Scl","JNT_GRP","Mesh_GRP","OBJ_GRP","Muscle_GRP","Morph_GRP","HLP_GRP","IK_GRP","EX_GRP","V_EX_GRP","H_EX_GRP","Ori_GRP"};for ($i=0;$i<size($nm);$i++){if (!`objExists $nm[$i]`) group -em -n $nm[$i];}parent Glb_TX Glb_GRP;parent Glb_TY Glb_TX ;parent Glb_TZ Glb_TY;parent Glb_RX Glb_TZ;parent Glb_RY Glb_RX;parent Glb_RZ Glb_RY;parent Glb_Scl Glb_RZ;parent JNT_GRP Glb_Scl;parent HLP_GRP Glb_Scl;parent IK_GRP Glb_Scl;parent Muscle_GRP Glb_Scl;parent Mesh_GRP Glb_GRP;parent OBJ_GRP Mesh_GRP;parent Morph_GRP Mesh_GRP;parent EX_GRP Glb_GRP;parent V_EX_GRP EX_GRP;parent H_EX_GRP EX_GRP;parent Ori_GRP Glb_Scl;if (`objExists Cls_GRP`) parent Cls_GRP H_EX_GRP;if (`objExists CRV_GRP`) parent CRV_GRP H_EX_GRP;if (`objExists Character_HLP`) parent Character_HLP V_EX_GRP;css_TD_LockUnlock ("Glb_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);css_TD_LockUnlock ("Glb_TX",1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1);css_TD_LockUnlock ("Glb_TY",0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1);css_TD_LockUnlock ("Glb_TZ",0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1);css_TD_LockUnlock ("Glb_RX",0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1);css_TD_LockUnlock ("Glb_RY",0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1);css_TD_LockUnlock ("Glb_RZ",0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1);css_TD_LockUnlock ("Glb_Scl",0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1);css_TD_LockUnlock ("JNT_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);css_TD_LockUnlock ("HLP_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);css_TD_LockUnlock ("IK_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);css_TD_LockUnlock ("Muscle_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);css_TD_LockUnlock ("Ori_GRP",0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1);css_TD_LockUnlock ("Mesh_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);css_TD_LockUnlock ("OBJ_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);css_TD_LockUnlock ("Morph_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);css_TD_LockUnlock ("EX_GRP",0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1);css_TD_LockUnlock ("V_EX_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);css_TD_LockUnlock ("H_EX_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0);setAttr -l 1 H_EX_GRP.v 0;setAttr -l 1 V_EX_GRP.v 1;setAttr -l 1 JNT_GRP.v 0;setAttr -l 1 IK_GRP.v 0;select -cl;}//*************************************************************************************************************//*********************************************  Create Helpers  **********************************************//*************************************************************************************************************global proc adset_hlp_crt (){string $nm[],$n[],$tmp[],$tp;float $pos[],$my[],$mz[],$rx[],$rz[];int $hlp[];$tmp=`spaceLocator`;rename $tmp[0] tp_lc;$nm={"Root_R","Spine_1","Spine_2","Spine_3","Clav_B","Neck_B","Neck_M","Head_B","L_Eye_2","R_Eye_2","Head_M","Jaw_2","L_Elbow","R_Elbow","L_Wrist","R_Wrist","L_Knee","R_Knee"	,"L_H_T_1","L_H_I_1","L_H_M_1","L_H_R_1","L_H_P_1","R_H_T_1","R_H_I_1","R_H_M_1","R_H_R_1","R_H_P_1","L_F_T_1","L_F_I_1","L_F_M_1","L_F_R_1","L_F_P_1","R_F_T_1","R_F_I_1","R_F_M_1","R_F_R_1","R_F_P_1"	,"Clav_B","Head_T","Head_M","Head_M"};$n={"Root","Sp_1","Sp_2","Sp_3","Clavicle","Neck_B","Neck_M","Head","L_Eye","R_Eye","Eyes","Jaw","L_Elbow","R_Elbow","L_Hand","R_Hand","L_Knee","R_Knee"	,"L_H_T","L_H_I","L_H_M","L_H_R","L_H_P","R_H_T","R_H_I","R_H_M","R_H_R","R_H_P","L_F_T","L_F_I","L_F_M","L_F_R","L_F_P","R_F_T","R_F_I","R_F_M","R_F_R","R_F_P"	,"Wings","Ear_Vac_Sen","ST_Eye","Ex_Eye"};$hlp={7,13,13,13,13,13,13,13,7,7,12,7,8,8,4,4,8,8	,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6	,1,1,7,7};$my={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0	,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5	,1.0,10.0,0.5,-0.5};$mz={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10.0,10.0,10.5,0.0,-3.0,-3.0,0.0,0.0,3.0,3.0	,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0	,-10.0,-5.0,10.0,10.0};$rx={0,0,0,0,0,0,0,0,90,90,0,90,90,90,0,0,90,90,0,0,0,0,0,0,0,0,0,0,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,0,0,0,0};$rz={0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,0,0,0};for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i]+"_SK_JNT")`){$pos=`xform -q -ws -piv ($nm[$i]+"_SK_JNT")`;move $pos[0] ($pos[1]+$my[$i]) ($pos[2]+$mz[$i]) tp_lc;select -r tp_lc;$tp=`css_adset_hlp ($hlp[$i])`;rename $tp ($n[$i]+"_HLP");rotate $rx[$i] 0 $rz[$i] ($n[$i]+"_HLP");makeIdentity -a 1 -r 1 -t 1 -s 1 ($n[$i]+"_HLP");group -em -n ($n[$i]+"_H_GRP");move $pos[0] ($pos[1]+$my[$i]) ($pos[2]+$mz[$i]) ($n[$i]+"_H_GRP");makeIdentity -a 1 -r 1 -t 1 -s 1 ($n[$i]+"_H_GRP");parent ($n[$i]+"_HLP") ($n[$i]+"_H_GRP");refresh;}}$nm={"L_Foot_GRP","R_Foot_GRP",	"L_Ear_1_ClsHandle","L_Ear_2_ClsHandle","L_Ear_3_ClsHandle","L_Ear_4_ClsHandle",	"R_Ear_1_ClsHandle","R_Ear_2_ClsHandle","R_Ear_3_ClsHandle","R_Ear_4_ClsHandle",	"L_Sen_1_ClsHandle","L_Sen_2_ClsHandle","L_Sen_3_ClsHandle","L_Sen_4_ClsHandle",	"R_Sen_1_ClsHandle","R_Sen_2_ClsHandle","R_Sen_3_ClsHandle","R_Sen_4_ClsHandle",	"L_Wing_B_1_ClsHandle","L_Wing_B_2_ClsHandle","L_Wing_B_3_ClsHandle","L_Wing_B_4_ClsHandle",	"R_Wing_B_1_ClsHandle","R_Wing_B_2_ClsHandle","R_Wing_B_3_ClsHandle","R_Wing_B_4_ClsHandle",	"L_Wing_M_1_ClsHandle","L_Wing_M_2_ClsHandle","L_Wing_M_3_ClsHandle","L_Wing_M_4_ClsHandle",	"R_Wing_M_1_ClsHandle","R_Wing_M_2_ClsHandle","R_Wing_M_3_ClsHandle","R_Wing_M_4_ClsHandle",	"L_Wing_T_1_ClsHandle","L_Wing_T_2_ClsHandle","L_Wing_T_3_ClsHandle","L_Wing_T_4_ClsHandle",	"R_Wing_T_1_ClsHandle","R_Wing_T_2_ClsHandle","R_Wing_T_3_ClsHandle","R_Wing_T_4_ClsHandle",	"Tail_1_ClsHandle","Tail_2_ClsHandle","Tail_3_ClsHandle","Tail_4_ClsHandle",	"Vac_1_ClsHandle","Vac_2_ClsHandle","Vac_3_ClsHandle","Vac_4_ClsHandle",	"L_Clavicle_B_ACLV_JNT","R_Clavicle_B_ACLV_JNT"};$n={"L_Foot","R_Foot","L_Ear_1","L_Ear_2","L_Ear_3","L_Ear_4","R_Ear_1","R_Ear_2","R_Ear_3","R_Ear_4",	"L_Sen_1","L_Sen_2","L_Sen_3","L_Sen_4","R_Sen_1","R_Sen_2","R_Sen_3","R_Sen_4",	"L_W_B_1","L_W_B_2","L_W_B_3","L_W_B_4","R_W_B_1","R_W_B_2","R_W_B_3","R_W_B_4",	"L_W_M_1","L_W_M_2","L_W_M_3","L_W_M_4","R_W_M_1","R_W_M_2","R_W_M_3","R_W_M_4",	"L_W_T_1","L_W_T_2","L_W_T_3","L_W_T_4","R_W_T_1","R_W_T_2","R_W_T_3","R_W_T_4",	"Tail_1","Tail_2","Tail_3","Tail_4","Vac_1","Vac_2","Vac_3","Vac_4","L_Shoulder","R_Shoulder"};$hlp={2,2,10,10,10,10,10,10,10,10,12,12,12,12,12,12,12,12,10,10,10,10,10,10,10,10,10,10,10,10,	10,10,10,10,10,10,10,10,10,10,10,10,12,12,12,12,12,12,12,12,12,12};for ($i=0;$i<size($nm);$i++){if (`objExists $nm[$i]`){$pos=`xform -q -ws -piv ($nm[$i])`;move $pos[0] ($pos[1]) ($pos[2]) tp_lc;select -r tp_lc;$tp=`css_adset_hlp ($hlp[$i])`;rename $tp ($n[$i]+"_HLP");rotate $rx[$i] 0 $rz[$i] ($n[$i]+"_HLP");makeIdentity -a 1 -r 1 -t 1 -s 1 ($n[$i]+"_HLP");group -em -n ($n[$i]+"_H_GRP");move $pos[0] ($pos[1]+$my[$i]) ($pos[2]+$mz[$i]) ($n[$i]+"_H_GRP");makeIdentity -a 1 -r 1 -t 1 -s 1 ($n[$i]+"_H_GRP");parent ($n[$i]+"_HLP") ($n[$i]+"_H_GRP");refresh;}}delete tp_lc;select -cl;if (`objExists "*_Eye_HLP"`){scale .03 .03 .03 "*_Eye_HLP";makeIdentity -a 1 -r 1 -t 1 -s 1 "*_Eye_HLP";}if (`objExists "*_Elbow_HLP"`){scale .1 .1 .1 "*_Elbow_HLP";makeIdentity -a 1 -r 1 -t 1 -s 1 "*_Elbow_HLP";}if (`objExists "*_Knee_HLP"`){scale .1 .1 .1 "*_Knee_HLP";makeIdentity -a 1 -r 1 -t 1 -s 1 "*_Knee_HLP";}if (`objExists "Jaw_HLP"`){scale .1 .1 .1 "Jaw_HLP";makeIdentity -a 1 -r 1 -t 1 -s 1 "Jaw_HLP";}if (`objExists "?_W_?_?_HLP"`){scale .3 .3 .3 "?_W_?_?_HLP";makeIdentity -a 1 -r 1 -t 1 -s 1 "L_W_?_?_HLP";}if (`objExists "*_Ear_?_HLP"`){scale .3 .3 .3 "*_Ear_?_HLP";makeIdentity -a 1 -r 1 -t 1 -s 1 "*_Ear_?_HLP";}if (`objExists "*_Sen_?_HLP"`){scale .6 .6 .6 "*_Sen_?_HLP";makeIdentity -a 1 -r 1 -t 1 -s 1 "*_Sen_?_HLP";}if (`objExists "Vac_?_HLP"`){scale .6 .6 .6 "Vac_?_HLP";makeIdentity -a 1 -r 1 -t 1 -s 1 "Vac_?_HLP";}if (`objExists "Tail_?_HLP"`){scale .6 .6 .6 "Tail_?_HLP";makeIdentity -a 1 -r 1 -t 1 -s 1 "Tail_?_HLP";}if (`objExists Eyes_HLP`&&`objExists L_Eye_HLP`&&`objExists R_Eye_HLP`){pointConstraint -n "tmp_const" L_Eye_HLP R_Eye_HLP Eyes_H_GRP;delete tmp_const;makeIdentity -a 1 -r 1 -t 1 -s 1 Eyes_H_GRP;}if (`objExists ST_Eye_HLP`&&`objExists L_Eye_HLP`&&`objExists R_Eye_HLP`){pointConstraint -n "tmp_const" Eyes_H_GRP ST_Eye_H_GRP;delete tmp_const;makeIdentity -a 1 -r 1 -t 1 -s 1 ST_Eye_H_GRP;move 0 .5 0 ST_Eye_H_GRP; makeIdentity -a 1 -r 1 -t 1 -s 1 ST_Eye_H_GRP;}if (`objExists Ex_Eye_HLP`&&`objExists L_Eye_HLP`&&`objExists R_Eye_HLP`){pointConstraint -n "tmp_const" Eyes_H_GRP Ex_Eye_H_GRP;delete tmp_const;makeIdentity -a 1 -r 1 -t 1 -s 1 Ex_Eye_H_GRP;move 0 -.5 0 Ex_Eye_H_GRP;makeIdentity -a 1 -r 1 -t 1 -s 1 Ex_Eye_H_GRP;}if (!`objExists HLP_T_GRP`) group -em -n "HLP_GRP";parent "*_H_GRP" "HLP_GRP";if (!`getAttr Character_HLP.Wing`) delete Wings_H_GRP;if (`getAttr Character_HLP.stretchyHead`){float $pos1[],$pos2[];string $ctp;$pos1=`xform -q -ws -piv Head_B_SK_JNT`;$pos2=`xform -q -ws -piv Head_T_SK_JNT`;$ctp=`curve -d 1 -p $pos1[0] $pos1[1] $pos1[2] -p $pos2[0] $pos2[1] $pos2[2] -k 0 -k 1 -n "Head_ST_CRV"`;select -r Head_ST_CRV.cv[0];cluster -n "Head_ST_B_Cls";select -r "Head_ST_B_ClsHandle";css_adset_hlp 10;rename Sphere_Hlp_1 "Head_B_ST_HLP";scale .2 .2 .2 Head_B_ST_HLP;makeIdentity -a 1 -t 1 -r 1 -s 1 Head_B_ST_HLP;select -r Head_ST_CRV.cv[1];cluster -n "Head_ST_T_Cls";select -r "Head_ST_T_ClsHandle";css_adset_hlp 10;rename Sphere_Hlp_1 "Head_T_ST_HLP";scale .5 .5 .5 Head_T_ST_HLP;makeIdentity -a 1 -t 1 -r 1 -s 1 Head_T_ST_HLP;parentConstraint -mo -n "Head_B_ST_CNT" Head_B_ST_HLP Head_ST_B_ClsHandle;parentConstraint -mo -n "Head_T_ST_CNT" Head_T_ST_HLP Head_ST_T_ClsHandle;group -em -n "Head_B_ST_H_GRP";group -em -n "Head_T_ST_H_GRP";parent Head_B_ST_HLP Head_B_ST_H_GRP;parent Head_T_ST_HLP Head_T_ST_H_GRP;parentConstraint -mo -n "Head_B_ST_H_CNT" Head_B_SK_JNT Head_B_ST_H_GRP;parentConstraint -mo -n "Head_T_ST_H_CNT" Head_T_SK_JNT Head_T_ST_H_GRP;parent "Head_?_ST_H_GRP" HLP_GRP;parent "Head_ST_?_ClsHandle" Cls_GRP;parent Head_ST_CRV CRV_GRP;}select -cl;setObjectPickMask "Curve" true;}//*************************************************************************************************************//*********************************************Create Jcon and Jori********************************************//*************************************************************************************************************global proc crt_jcon_jori (string $prnt,string $chld,string $cntrl){string $nm[],$tmp[],$tp;float $pos[],$posx[],$posy[],$posz[];$pos=`xform -q -ws -piv $chld`;select -cl;$tp=`joint -p $pos[0] $pos[1] $pos[2]`;rename $tp ($chld+"_Jori_JNT");select -cl;$tp=`joint -p $pos[0] $pos[1] $pos[2]`;rename $tp ($chld+"_Jcon_JNT");select -cl;$tp=`joint -p $pos[0] $pos[1] $pos[2]`;rename $tp ($chld+"_Conn_JNT");select -cl;pointConstraint -n"TMP_CNT_P" $chld ($chld+"_Jori_JNT") ;orientConstraint -n"TMP_CNT_O" $chld ($chld+"_Jori_JNT");delete "TMP_CNT_*";pointConstraint -n"TMP_CNT_P" $chld ($chld+"_Jcon_JNT") ;orientConstraint -n"TMP_CNT_O" $chld ($chld+"_Jcon_JNT");delete "TMP_CNT_*";pointConstraint -n"TMP_CNT_P" $chld ($chld+"_Conn_JNT") ;orientConstraint -n"TMP_CNT_O" $chld ($chld+"_Conn_JNT");delete "TMP_CNT_*";parent ($chld+"_Jori_JNT") ($chld+"_Conn_JNT");parent $chld ($chld+"_Jcon_JNT");parent ($chld+"_Conn_JNT") $prnt;pointConstraint -n ($chld+"_p_Cnt") ($chld+"_Conn_JNT") ($chld+"_Jcon_JNT");group -em -n ($chld+"_Ori_NOD");pointConstraint -n"TMP_CNT_P" $chld ($chld+"_Ori_NOD") ;orientConstraint -n"TMP_CNT_O" $chld ($chld+"_Ori_NOD");delete "TMP_CNT_*";orientConstraint -n ($chld+"_O_Cnt") ($chld+"_Ori_NOD") ($chld+"_Jori_JNT") ($chld+"_Jcon_JNT");if (!`objExists Character_HLP`) {$tp=`css_adset_hlp 13`;rename $tp Character_HLP;}if (`objExists Character_HLP`){if(!`attributeExists "ORI_GRP" Character_HLP`){addAttr -ln "ORI_GRP"  -at double  Character_HLP;setAttr -e-channelBox true Character_HLP.ORI_GRP;}addAttr -ln ($cntrl+"_Ori")  -at double -k 1 -w 1 -r 1 -min 0 -max 1 -dv 0 Character_HLP;}connectAttr ("Character_HLP."+$cntrl+"_Ori") ($chld+"_O_Cnt."+$chld+"_Jori_JNTW1");createNode -n ($cntrl+"_REV_Ori") reverse;connectAttr ("Character_HLP."+$cntrl+"_Ori") ($cntrl+"_REV_Ori.inputX");connectAttr ($cntrl+"_REV_Ori.outputX") ($chld+"_O_Cnt."+$chld+"_Ori_NODW0");}//*************************************************************************************************************//*********************************************Parent Body Parts **********************************************//*************************************************************************************************************global proc adset_parent_parts (){string $ltw,$lmw,$lbw,$rtw,$rmw,$rbw,$vac,$sen,$tl,$er;$ltw=`textFieldGrp -q -tx l_s_w_t_btn`;$lmw=`textFieldGrp -q -tx l_s_w_m_btn`;$lbw=`textFieldGrp -q -tx l_s_w_b_btn`;$rtw=`textFieldGrp -q -tx r_s_w_t_btn`;$rmw=`textFieldGrp -q -tx r_s_w_m_btn`;$rbw=`textFieldGrp -q -tx r_s_w_b_btn`;$vac=`textFieldGrp -q -tx v_btn`;$sen=`textFieldGrp -q -tx s_btn`;$tl=`textFieldGrp -q -tx t_btn`;$er=`textFieldGrp -q -tx e_btn`;if (`objExists Clav_B_SK_JNT`&&`objExists Neck_B_SK_JNT`){string $prnt="Clav_B_SK_JNT";string $chld="Neck_B_SK_JNT";string $cntrl="Neck";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Head_B_SK_JNT`&&`objExists Head_M_SK_JNT`){string $prnt="Head_B_SK_JNT";string $chld="Head_M_SK_JNT";string $cntrl="Head";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Head_M_SK_JNT`&&`objExists Jaw_1_SK_JNT`){string $prnt="Head_M_SK_JNT";string $chld="Jaw_1_SK_JNT";string $cntrl="Jaw";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Head_M_SK_JNT`&&`objExists L_Eye_1_SK_JNT`){string $prnt="Head_M_SK_JNT";string $chld="L_Eye_1_SK_JNT";string $cntrl="L_Eye";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Head_M_SK_JNT`&&`objExists R_Eye_1_SK_JNT`){string $prnt="Head_M_SK_JNT";string $chld="R_Eye_1_SK_JNT";string $cntrl="R_Eye";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $ltw`&&`objExists L_W_T_1_SK_JNT`){string $prnt=$ltw;string $chld="L_W_T_1_SK_JNT";string $cntrl="L_W_T";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $lmw`&&`objExists L_W_M_1_SK_JNT`){string $prnt=$lmw;string $chld="L_W_M_1_SK_JNT";string $cntrl="L_W_M";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $lbw`&&`objExists L_W_B_1_SK_JNT`){string $prnt=$lbw;string $chld="L_W_B_1_SK_JNT";string $cntrl="L_W_B";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $rtw`&&`objExists R_W_T_1_SK_JNT`){string $prnt=$rtw;string $chld="R_W_T_1_SK_JNT";string $cntrl="R_W_T";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $rmw`&&`objExists R_W_M_1_SK_JNT`){string $prnt=$rmw;string $chld="R_W_M_1_SK_JNT";string $cntrl="R_W_M";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $rbw`&&`objExists R_W_B_1_SK_JNT`){string $prnt=$rbw;string $chld="R_W_B_1_SK_JNT";string $cntrl="R_W_B";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $vac`&&`objExists Vac_1_SK_JNT`){string $prnt=$vac;string $chld="Vac_1_SK_JNT";string $cntrl="Vac";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $sen`&&`objExists L_Sen_1_SK_JNT`){string $prnt=$sen;string $chld="L_Sen_1_SK_JNT";string $cntrl="L_Sen";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $sen`&&`objExists R_Sen_1_SK_JNT`){string $prnt=$sen;string $chld="R_Sen_1_SK_JNT";string $cntrl="R_Sen";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $er`&&`objExists L_Ear_1_SK_JNT`){string $prnt=$er;string $chld="L_Ear_1_SK_JNT";string $cntrl="L_Ear";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $er`&&`objExists R_Ear_1_SK_JNT`){string $prnt=$er;string $chld="R_Ear_1_SK_JNT";string $cntrl="R_Ear";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists $tl`&&`objExists Tail_1_SK_JNT`){string $prnt=$tl;string $chld="Tail_1_SK_JNT";string $cntrl="Tail";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Root_R_SK_JNT`&&`objExists L_Hip_SK_JNT`){string $prnt="Root_R_SK_JNT";string $chld="L_Hip_SK_JNT";string $cntrl="L_Leg";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Root_R_SK_JNT`&&`objExists R_Hip_SK_JNT`){string $prnt="Root_R_SK_JNT";string $chld="R_Hip_SK_JNT";string $cntrl="R_Leg";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Spine_3_SK_JNT`&&`objExists L_Clavicle_B_ACLV_JNT`){string $prnt="Spine_3_SK_JNT";string $chld="L_Clavicle_B_ACLV_JNT";string $cntrl="L_S_ACLV";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Spine_3_SK_JNT`&&`objExists R_Clavicle_B_ACLV_JNT`){string $prnt="Spine_3_SK_JNT";string $chld="R_Clavicle_B_ACLV_JNT";string $cntrl="R_S_ACLV";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Spine_3_SK_JNT`&&`objExists L_Shoulder_CLV_JNT`){string $prnt="Spine_3_SK_JNT";string $chld="L_Shoulder_CLV_JNT";string $cntrl="L_S_CLV";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Spine_3_SK_JNT`&&`objExists R_Shoulder_CLV_JNT`){string $prnt="Spine_3_SK_JNT";string $chld="R_Shoulder_CLV_JNT";string $cntrl="R_S_CLV";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Clav_B_SK_JNT`&&`objExists L_Clavicle_B_SK_JNT`){string $prnt="Clav_B_SK_JNT";string $chld="L_Clavicle_B_SK_JNT";string $cntrl="L_S";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists Clav_B_SK_JNT`&&`objExists R_Clavicle_B_SK_JNT`){string $prnt="Clav_B_SK_JNT";string $chld="R_Clavicle_B_SK_JNT";string $cntrl="R_S";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Clavicle_E_SK_JNT`&&`objExists L_Shoulder_IK_JNT`) parent L_Shoulder_IK_JNT L_Clavicle_E_SK_JNT;if (`objExists R_Clavicle_E_SK_JNT`&&`objExists R_Shoulder_IK_JNT`) parent R_Shoulder_IK_JNT R_Clavicle_E_SK_JNT;if (`objExists L_Clavicle_E_SK_JNT`&&`objExists L_Shoulder_FK_JNT`) parent L_Shoulder_FK_JNT L_Clavicle_E_SK_JNT;if (`objExists R_Clavicle_E_SK_JNT`&&`objExists R_Shoulder_FK_JNT`) parent R_Shoulder_FK_JNT R_Clavicle_E_SK_JNT;if (`objExists L_Wrist_SK_JNT`&&`objExists L_H_T_1_SK_JNT`){string $prnt="L_Wrist_SK_JNT";string $chld="L_H_T_1_SK_JNT";string $cntrl="L_H_T";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Wrist_SK_JNT`&&`objExists L_H_I_1_SK_JNT`){string $prnt="L_Wrist_SK_JNT";string $chld="L_H_I_1_SK_JNT";string $cntrl="L_H_I";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Wrist_SK_JNT`&&`objExists L_H_M_1_SK_JNT`){string $prnt="L_Wrist_SK_JNT";string $chld="L_H_M_1_SK_JNT";string $cntrl="L_H_M";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Wrist_SK_JNT`&&`objExists L_H_R_1_SK_JNT`){string $prnt="L_Wrist_SK_JNT";string $chld="L_H_R_1_SK_JNT";string $cntrl="L_H_R";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Wrist_SK_JNT`&&`objExists L_H_P_1_SK_JNT`){string $prnt="L_Wrist_SK_JNT";string $chld="L_H_P_1_SK_JNT";string $cntrl="L_H_P";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Wrist_SK_JNT`&&`objExists R_H_T_1_SK_JNT`){string $prnt="R_Wrist_SK_JNT";string $chld="R_H_T_1_SK_JNT";string $cntrl="R_H_T";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Wrist_SK_JNT`&&`objExists R_H_I_1_SK_JNT`){string $prnt="R_Wrist_SK_JNT";string $chld="R_H_I_1_SK_JNT";string $cntrl="R_H_I";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Wrist_SK_JNT`&&`objExists R_H_M_1_SK_JNT`){string $prnt="R_Wrist_SK_JNT";string $chld="R_H_M_1_SK_JNT";string $cntrl="R_H_M";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Wrist_SK_JNT`&&`objExists R_H_R_1_SK_JNT`){string $prnt="R_Wrist_SK_JNT";string $chld="R_H_R_1_SK_JNT";string $cntrl="R_H_R";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Wrist_SK_JNT`&&`objExists R_H_P_1_SK_JNT`){string $prnt="R_Wrist_SK_JNT";string $chld="R_H_P_1_SK_JNT";string $cntrl="R_H_P";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Toe_SK_JNT`&&`objExists L_F_T_1_SK_JNT`){string $prnt="L_Toe_SK_JNT";string $chld="L_F_T_1_SK_JNT";string $cntrl="L_F_T";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Toe_SK_JNT`&&`objExists L_F_I_1_SK_JNT`){string $prnt="L_Toe_SK_JNT";string $chld="L_F_I_1_SK_JNT";string $cntrl="L_F_I";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Toe_SK_JNT`&&`objExists L_F_M_1_SK_JNT`){string $prnt="L_Toe_SK_JNT";string $chld="L_F_M_1_SK_JNT";string $cntrl="L_F_M";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Toe_SK_JNT`&&`objExists L_F_R_1_SK_JNT`){string $prnt="L_Toe_SK_JNT";string $chld="L_F_R_1_SK_JNT";string $cntrl="L_F_R";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists L_Toe_SK_JNT`&&`objExists L_F_P_1_SK_JNT`){string $prnt="L_Toe_SK_JNT";string $chld="L_F_P_1_SK_JNT";string $cntrl="L_F_P";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Toe_SK_JNT`&&`objExists R_F_T_1_SK_JNT`){string $prnt="R_Toe_SK_JNT";string $chld="R_F_T_1_SK_JNT";string $cntrl="R_F_T";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Toe_SK_JNT`&&`objExists R_F_I_1_SK_JNT`){string $prnt="R_Toe_SK_JNT";string $chld="R_F_I_1_SK_JNT";string $cntrl="R_F_I";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Toe_SK_JNT`&&`objExists R_F_M_1_SK_JNT`){string $prnt="R_Toe_SK_JNT";string $chld="R_F_M_1_SK_JNT";string $cntrl="R_F_M";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Toe_SK_JNT`&&`objExists R_F_R_1_SK_JNT`){string $prnt="R_Toe_SK_JNT";string $chld="R_F_R_1_SK_JNT";string $cntrl="R_F_R";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists R_Toe_SK_JNT`&&`objExists R_F_P_1_SK_JNT`){string $prnt="R_Toe_SK_JNT";string $chld="R_F_P_1_SK_JNT";string $cntrl="R_F_P";crt_jcon_jori ($prnt,$chld,$cntrl);}if (`objExists "*_SK_JNT_Jcon_JNT"`) parent "*_SK_JNT_Jcon_JNT" "JNT_GRP";select -cl;if (`objExists "*_ACLV_JNT_Jcon_JNT"`) parent "*_ACLV_JNT_Jcon_JNT" "JNT_GRP";select -cl;if (`objExists "*_CLV_JNT_Jcon_JNT"`) parent "*_CLV_JNT_Jcon_JNT" "JNT_GRP";select -cl;if (!`objExists "Ori_NOD_GRP"`) group -em -n "Ori_NOD_GRP";if (`objExists "*_SK_JNT_Ori_NOD"`) parent "*_SK_JNT_Ori_NOD" "Ori_NOD_GRP";if (`objExists "*_ACLV_JNT_Ori_NOD"`) parent "*_ACLV_JNT_Ori_NOD" "Ori_NOD_GRP";if (`objExists "*_CLV_JNT_Ori_NOD"`) parent "*_CLV_JNT_Ori_NOD" "Ori_NOD_GRP";select -cl;if (`objExists Clav_B_BN_JNT`&&`objExists Neck_B_BN_JNT`) parent Neck_B_BN_JNT Clav_B_BN_JNT;if (`objExists Head_M_BN_JNT`&&`objExists Jaw_1_BN_JNT`) parent Jaw_1_BN_JNT Head_M_BN_JNT;if (`objExists Head_M_BN_JNT`&&`objExists L_Eye_1_BN_JNT`) parent L_Eye_1_BN_JNT Head_M_BN_JNT;if (`objExists Head_M_BN_JNT`&&`objExists R_Eye_1_BN_JNT`) parent R_Eye_1_BN_JNT Head_M_BN_JNT;if (`objExists $ltw`) $ltw=substring ($ltw,1,(size($ltw)-7))+"_BN_JNT";if (`objExists $ltw`&&`objExists L_W_T_1_BN_JNT`) parent L_W_T_1_BN_JNT $ltw;if (`objExists $lmw`) $lmw=substring ($lmw,1,(size($lmw)-7))+"_BN_JNT";if (`objExists $lmw`&&`objExists L_W_M_1_BN_JNT`) parent L_W_M_1_BN_JNT $lmw;if (`objExists $lbw`) $lbw=substring ($lbw,1,(size($lbw)-7))+"_BN_JNT";if (`objExists $lbw`&&`objExists L_W_B_1_BN_JNT`) parent L_W_B_1_BN_JNT $lbw;if (`objExists $rtw`) $rtw=substring ($rtw,1,(size($rtw)-7))+"_BN_JNT";if (`objExists $rtw`&&`objExists R_W_T_1_BN_JNT`) parent R_W_T_1_BN_JNT $rtw;if (`objExists $rmw`) $rmw=substring ($rmw,1,(size($rmw)-7))+"_BN_JNT";if (`objExists $rmw`&&`objExists R_W_M_1_BN_JNT`) parent R_W_M_1_BN_JNT $rmw;if (`objExists $rbw`) $rbw=substring ($rbw,1,(size($rbw)-7))+"_BN_JNT";if (`objExists $rbw`&&`objExists R_W_B_1_BN_JNT`) parent R_W_B_1_BN_JNT $rbw;if (`objExists $vac`) $vac=substring ($vac,1,(size($vac)-7))+"_BN_JNT";if (`objExists $vac`&&`objExists Vac_1_BN_JNT`) parent Vac_1_BN_JNT $vac;if (`objExists $sen`) $sen=substring ($sen,1,(size($sen)-7))+"_BN_JNT";if (`objExists $sen`&&`objExists R_Sen_1_BN_JNT`) parent R_Sen_1_BN_JNT $sen;if (`objExists $sen`&&`objExists L_Sen_1_BN_JNT`) parent L_Sen_1_BN_JNT $sen;if (`objExists $tl`) $tl=substring ($tl,1,(size($tl)-7))+"_BN_JNT";if (`objExists $tl`&&`objExists Tail_1_BN_JNT`) parent Tail_1_BN_JNT $tl;if (`objExists $er`) $er=substring ($er,1,(size($er)-7))+"_BN_JNT";if (`objExists $er`&&`objExists L_Ear_1_BN_JNT`) parent L_Ear_1_BN_JNT $er;if (`objExists $er`&&`objExists R_Ear_1_BN_JNT`) parent R_Ear_1_BN_JNT $er;if (`objExists Root_R_BN_JNT`&&`objExists L_Hip_BN_JNT`) parent L_Hip_BN_JNT Root_R_BN_JNT;if (`objExists Root_R_BN_JNT`&&`objExists R_Hip_BN_JNT`) parent R_Hip_BN_JNT Root_R_BN_JNT;if (`objExists Clav_B_BN_JNT`&&`objExists L_Clavicle_B_BN_JNT`) parent L_Clavicle_B_BN_JNT Clav_B_BN_JNT;if (`objExists Clav_B_BN_JNT`&&`objExists R_Clavicle_B_BN_JNT`) parent R_Clavicle_B_BN_JNT Clav_B_BN_JNT;if (`objExists L_Wrist_BN_JNT`&&`objExists L_H_T_1_BN_JNT`) parent L_H_T_1_BN_JNT L_Wrist_BN_JNT;if (`objExists L_Wrist_BN_JNT`&&`objExists L_H_I_1_BN_JNT`) parent L_H_I_1_BN_JNT L_Wrist_BN_JNT;if (`objExists L_Wrist_BN_JNT`&&`objExists L_H_M_1_BN_JNT`) parent L_H_M_1_BN_JNT L_Wrist_BN_JNT;if (`objExists L_Wrist_BN_JNT`&&`objExists L_H_R_1_BN_JNT`) parent L_H_R_1_BN_JNT L_Wrist_BN_JNT;if (`objExists L_Wrist_BN_JNT`&&`objExists L_H_P_1_BN_JNT`) parent L_H_P_1_BN_JNT L_Wrist_BN_JNT;if (`objExists R_Wrist_BN_JNT`&&`objExists R_H_T_1_BN_JNT`) parent R_H_T_1_BN_JNT R_Wrist_BN_JNT;if (`objExists R_Wrist_BN_JNT`&&`objExists R_H_I_1_BN_JNT`) parent R_H_I_1_BN_JNT R_Wrist_BN_JNT;if (`objExists R_Wrist_BN_JNT`&&`objExists R_H_M_1_BN_JNT`) parent R_H_M_1_BN_JNT R_Wrist_BN_JNT;if (`objExists R_Wrist_BN_JNT`&&`objExists R_H_R_1_BN_JNT`) parent R_H_R_1_BN_JNT R_Wrist_BN_JNT;if (`objExists R_Wrist_BN_JNT`&&`objExists R_H_P_1_BN_JNT`) parent R_H_P_1_BN_JNT R_Wrist_BN_JNT;if (`objExists L_Toe_BN_JNT`&&`objExists L_F_T_1_BN_JNT`) parent L_F_T_1_BN_JNT L_Toe_BN_JNT;if (`objExists L_Toe_BN_JNT`&&`objExists L_F_I_1_BN_JNT`) parent L_F_I_1_BN_JNT L_Toe_BN_JNT;if (`objExists L_Toe_BN_JNT`&&`objExists L_F_M_1_BN_JNT`) parent L_F_M_1_BN_JNT L_Toe_BN_JNT;if (`objExists L_Toe_BN_JNT`&&`objExists L_F_R_1_BN_JNT`) parent L_F_R_1_BN_JNT L_Toe_BN_JNT;if (`objExists L_Toe_BN_JNT`&&`objExists L_F_P_1_BN_JNT`) parent L_F_P_1_BN_JNT L_Toe_BN_JNT;if (`objExists R_Toe_BN_JNT`&&`objExists R_F_T_1_BN_JNT`) parent R_F_T_1_BN_JNT R_Toe_BN_JNT;if (`objExists R_Toe_BN_JNT`&&`objExists R_F_I_1_BN_JNT`) parent R_F_I_1_BN_JNT R_Toe_BN_JNT;if (`objExists R_Toe_BN_JNT`&&`objExists R_F_M_1_BN_JNT`) parent R_F_M_1_BN_JNT R_Toe_BN_JNT;if (`objExists R_Toe_BN_JNT`&&`objExists R_F_R_1_BN_JNT`) parent R_F_R_1_BN_JNT R_Toe_BN_JNT;if (`objExists R_Toe_BN_JNT`&&`objExists R_F_P_1_BN_JNT`) parent R_F_P_1_BN_JNT R_Toe_BN_JNT;select -cl;if (`window -ex adset_prnt`) deleteUI adset_prnt;}//*************************************************************************************************************//********************************************* Connect Body Win **********************************************//*************************************************************************************************************global proc adset_cn_body (){if (`window -ex adset_prnt`) deleteUI adset_prnt;window -t "Parenting" adset_prnt;columnLayout -adj 1;rowColumnLayout -nc 2 -cw 1 140 -cw 2 30 css_adset_L_Wing_CM;text -l"Left side" -al"center";text -l"";textFieldGrp -l"T Wing" -cw 1 50 -adj 2 l_s_w_t_btn;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] l_s_w_t_btn;"} l_s_w_t_fld;textFieldGrp -l"M Wing" -cw 1 50 -adj 2 l_s_w_m_btn;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] l_s_w_m_btn;"} l_s_w_m_fld;textFieldGrp -l"B Wing" -cw 1 50 -adj 2 l_s_w_b_btn;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] l_s_w_b_btn;"} l_s_w_b_fld;setParent..;rowColumnLayout -nc 2 -cw 1 140 -cw 2 30 css_adset_R_Wing_CM;text -l"Right side" -al"center";text -l"";textFieldGrp -l"T Wing" -cw 1 50 -adj 2 r_s_w_t_btn;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] r_s_w_t_btn;"} r_s_w_t_fld;textFieldGrp -l"M Wing" -cw 1 50 -adj 2 r_s_w_m_btn;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] r_s_w_m_btn;"} r_s_w_m_fld;textFieldGrp -l"B Wing" -cw 1 50 -adj 2 r_s_w_b_btn;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] r_s_w_b_btn;"} r_s_w_b_fld;setParent..;separator;separator;rowColumnLayout -nc 2 -cw 1 140 -cw 2 30 css_adset_ear_CM;textFieldGrp -l"Ears" -cw 1 50 -adj 2 e_btn;button -l"<<<"  -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] e_btn;"} e_fld;setParent..;rowColumnLayout -nc 2 -cw 1 140 -cw 2 30 css_adset_sen_CM;textFieldGrp -l"Sensors" -cw 1 50 -adj 2 s_btn;button -l"<<<"  -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] s_btn;"} s_fld;setParent..;rowColumnLayout -nc 2 -cw 1 140 -cw 2 30 css_adset_vac_CM;textFieldGrp -l"Vacume" -cw 1 50 -adj 2 v_btn;button -l"<<<" -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] v_btn;"} v_fld;setParent..;rowColumnLayout -nc 2 -cw 1 140 -cw 2 30 css_adset_tail_CM;textFieldGrp -l"Tail" -cw 1 50 -adj 2 t_btn;button -l"<<<"  -c {"string $tmp[];$tmp=`ls -sl`; textFieldGrp -e -tx $tmp[0] t_btn;"} t_fld;setParent..;button -l"Parent Now" -c"adset_parent_parts";showWindow adset_prnt;window -e -wh 180 317 adset_prnt;int $ch3=`checkBox -q -v adset_ear_bx`;int $ch4=`checkBox -q -v adset_sens_bx`;int $ch5=`checkBox -q -v adset_vac_bx`;int $ch6=`checkBox -q -v adset_tail_bx`;int $ch7=`checkBox -q -v adset_wing_bx`;textFieldGrp -e -en $ch7 -vis $ch7 l_s_w_t_btn;button -e -en $ch7 -vis $ch7 l_s_w_t_fld;textFieldGrp -e -en $ch7 -vis $ch7 l_s_w_m_btn;button -e -en $ch7 -vis $ch7 l_s_w_m_fld;textFieldGrp -e -en $ch7 -vis $ch7 l_s_w_b_btn;button -e -en $ch7 -vis $ch7 l_s_w_b_fld;textFieldGrp -e -en $ch7 -vis $ch7 r_s_w_t_btn;button -e -en $ch7 -vis $ch7 r_s_w_t_fld;textFieldGrp -e -en $ch7 -vis $ch7 r_s_w_m_btn;button -e -en $ch7 -vis $ch7 r_s_w_m_fld;textFieldGrp -e -en $ch7 -vis $ch7 r_s_w_b_btn;button -e -en $ch7 -vis $ch7 r_s_w_b_fld;textFieldGrp -e -en $ch3 -vis $ch3 e_btn;button -e -en $ch3 -vis $ch3 e_fld;textFieldGrp -e -en $ch4 -vis $ch4 s_btn;button -e -en $ch4 -vis $ch4 s_fld;textFieldGrp -e -en $ch5 -vis $ch5 v_btn;button -e -en $ch5 -vis $ch5 v_fld;textFieldGrp -e -en $ch6 -vis $ch6 t_btn;button -e -en $ch6 -vis $ch6 t_fld;int $t;if (!`checkBox -q -v adset_ear_bx`){rowColumnLayout -e -vis 0 css_adset_ear_CM;$t=`window -q -h adset_prnt`;window -e -wh 180 ($t-22) adset_prnt;}if (!`checkBox -q -v adset_sens_bx`){rowColumnLayout -e -vis 0 css_adset_sen_CM;$t=`window -q -h adset_prnt`;window -e -wh 180 ($t-22) adset_prnt;}if (!`checkBox -q -v adset_vac_bx`){rowColumnLayout -e -vis 0 css_adset_vac_CM;$t=`window -q -h adset_prnt`;window -e -wh 180 ($t-22) adset_prnt;}if (!`checkBox -q -v adset_tail_bx`){rowColumnLayout -e -vis 0 css_adset_tail_CM;$t=`window -q -h adset_prnt`;window -e -wh 180 ($t-22) adset_prnt;}if (!`checkBox -q -v adset_wing_bx`){rowColumnLayout -e -vis 0 css_adset_R_Wing_CM;rowColumnLayout -e -vis 0 css_adset_L_Wing_CM;$t=`window -q -h adset_prnt`;window -e -wh 180 ($t-165) adset_prnt;}if (!`checkBox -q -v adset_ear_bx`&&!`checkBox -q -v adset_sens_bx`&&!`checkBox -q -v adset_vac_bx`&&!`checkBox -q -v adset_tail_bx`&&!`checkBox -q -v adset_wing_bx`) adset_parent_parts;}//*************************************************************************************************************//********************************************* Create IK System **********************************************//*************************************************************************************************************global proc adset_ik_crt (){float $pos[];string $tmp[];if (`objExists L_Hip_SK_JNT`){ikHandle -sol "ikRPsolver" -sj L_Hip_SK_JNT -ee L_Ball_SK_JNT -n "L_Leg_IK_HND";rename effector1 "L_Leg_Eff";ikHandle -sol "ikSCsolver" -sj L_Ball_SK_JNT -ee L_Toe_SK_JNT -n "L_Foot_IK_HND";rename effector1 "L_Foot_Eff";ikHandle -sol "ikSCsolver" -sj L_Toe_SK_JNT -ee L_Toe_end_SK_JNT -n "L_Toe_IK_HND";rename effector1 "L_Toe_Eff";select -r L_Leg_IK_HND;group -n "L_Ball_Raw_GRP";$pos=`xform -q -ws -piv L_Toe_SK_JNT`;xform -ws -piv $pos[0] $pos[1] $pos[2] L_Ball_Raw_GRP;select -add "L_Foot_IK_HND";group -n "L_Toe_Raw_GRP";$pos=`xform -q -ws -piv L_Toe_end_SK_JNT`;xform -ws -piv $pos[0] $pos[1] $pos[2] L_Toe_Raw_GRP;select -r "L_Toe_IK_HND";group -n "L_Toe_Bend_GRP";$pos=`xform -q -ws -piv L_Toe_SK_JNT`;xform -ws -piv $pos[0] $pos[1] $pos[2] L_Toe_Bend_GRP;parent L_Toe_Bend_GRP L_Foot_GRP;parent L_Toe_Raw_GRP L_Foot_GRP;select -cl;}refresh;if (`objExists R_Hip_SK_JNT`){ikHandle -sol "ikRPsolver" -sj R_Hip_SK_JNT -ee R_Ball_SK_JNT -n "R_Leg_IK_HND";rename effector1 "R_Leg_Eff";ikHandle -sol "ikSCsolver" -sj R_Ball_SK_JNT -ee R_Toe_SK_JNT -n "R_Foot_IK_HND";rename effector1 "R_Foot_Eff";ikHandle -sol "ikSCsolver" -sj R_Toe_SK_JNT -ee R_Toe_end_SK_JNT -n "R_Toe_IK_HND";rename effector1 "R_Toe_Eff";select -r R_Leg_IK_HND;group -n "R_Ball_Raw_GRP";$pos=`xform -q -ws -piv R_Toe_SK_JNT`;xform -ws -piv $pos[0] $pos[1] $pos[2] R_Ball_Raw_GRP;select -add "R_Foot_IK_HND";group -n "R_Toe_Raw_GRP";$pos=`xform -q -ws -piv R_Toe_end_SK_JNT`;xform -ws -piv $pos[0] $pos[1] $pos[2] R_Toe_Raw_GRP;select -r "R_Toe_IK_HND";group -n "R_Toe_Bend_GRP";$pos=`xform -q -ws -piv R_Toe_SK_JNT`;xform -ws -piv $pos[0] $pos[1] $pos[2] R_Toe_Bend_GRP;parent R_Toe_Bend_GRP R_Foot_GRP;parent R_Toe_Raw_GRP R_Foot_GRP;select -cl;}refresh;if (`objExists L_Clavicle_B_ACLV_JNT`){ikHandle -sol "ikSCsolver" -sj L_Clavicle_B_ACLV_JNT -ee L_Clavicle_E_ACLV_JNT -n "L_ACLV_IK_HND";rename effector1 "L_ACLV_Eff";$pos=`xform -q -ws -piv L_Clavicle_E_ACLV_JNT`;$tmp=`spaceLocator`;move $pos[0] $pos[1] $pos[2] $tmp;scale .1 .1 .1 $tmp;makeIdentity -r 1 -t 1 -s 0 -a 1 $tmp;rename $tmp[0] "L_ACLV_Lc";}select -cl;refresh;if (`objExists R_Clavicle_B_ACLV_JNT`){ikHandle -sol "ikSCsolver" -sj R_Clavicle_B_ACLV_JNT -ee R_Clavicle_E_ACLV_JNT -n "R_ACLV_IK_HND";rename effector1 "R_ACLV_Eff";$pos=`xform -q -ws -piv R_Clavicle_E_ACLV_JNT`;$tmp=`spaceLocator`;move $pos[0] $pos[1] $pos[2] $tmp;scale .1 .1 .1 $tmp;makeIdentity -r 1 -t 1 -s 0 -a 1 $tmp;rename $tmp[0] "R_ACLV_Lc";}select -cl;refresh;if (`objExists L_Shoulder_CLV_JNT`){ikHandle -sol "ikRPsolver" -sj L_Shoulder_CLV_JNT -ee L_Forearm_CLV_JNT -n "L_CLV_IK_HND";rename effector1 "L_CLV_Eff";$pos=`xform -q -ws -piv L_Wrist_SK_JNT`;move $pos[0] $pos[1] $pos[2] L_CLV_Eff.scalePivot L_CLV_Eff.rotatePivot;$pos=`xform -q -ws -piv L_Elbow_CLV_JNT`;$tmp=`spaceLocator`;move $pos[0] $pos[1] $pos[2] $tmp;scale .1 .1 .1 $tmp;makeIdentity -r 1 -t 1 -s 0 -a 1 $tmp;rename $tmp[0] "L_CLV_Lc";}select -cl;refresh;if (`objExists R_Shoulder_CLV_JNT`){ikHandle -sol "ikRPsolver" -sj R_Shoulder_CLV_JNT -ee R_Forearm_CLV_JNT -n "R_CLV_IK_HND";rename effector1 "R_CLV_Eff";$pos=`xform -q -ws -piv R_Wrist_SK_JNT`;move $pos[0] $pos[1] $pos[2] R_CLV_Eff.scalePivot R_CLV_Eff.rotatePivot;$pos=`xform -q -ws -piv R_Elbow_CLV_JNT`;$tmp=`spaceLocator`;move $pos[0] $pos[1] $pos[2] $tmp;scale .1 .1 .1 $tmp;makeIdentity -r 1 -t 1 -s 0 -a 1 $tmp;rename $tmp[0] "R_CLV_Lc";}select -cl;refresh;if (`objExists L_Clavicle_B_SK_JNT`){ikHandle -sol "ikSCsolver" -sj L_Clavicle_B_SK_JNT -ee L_Clavicle_E_SK_JNT -n "L_CLVCL_IK_HND";rename effector1 "L_CLVCL_Eff";}select -cl;refresh;if (`objExists R_Clavicle_B_SK_JNT`){ikHandle -sol "ikSCsolver" -sj R_Clavicle_B_SK_JNT -ee R_Clavicle_E_SK_JNT -n "R_CLVCL_IK_HND";rename effector1 "R_CLVCL_Eff";}select -cl;refresh;if (`objExists L_Shoulder_IK_JNT`){ikHandle -sol "ikRPsolver" -sj L_Shoulder_IK_JNT -ee L_Forearm_IK_JNT -n "L_ARM_IK_HND";rename effector1 "L_ARM_Eff";$pos=`xform -q -ws -piv L_Wrist_SK_JNT`;move $pos[0] $pos[1] $pos[2] L_ARM_Eff.scalePivot L_ARM_Eff.rotatePivot;}select -cl;refresh;if (`objExists R_Shoulder_IK_JNT`){ikHandle -sol "ikRPsolver" -sj R_Shoulder_IK_JNT -ee R_Forearm_IK_JNT -n "R_ARM_IK_HND";rename effector1 "R_ARM_Eff";$pos=`xform -q -ws -piv R_Wrist_SK_JNT`;move $pos[0] $pos[1] $pos[2] R_ARM_Eff.scalePivot R_ARM_Eff.rotatePivot;}select -cl;refresh;if (`objExists L_ACLV_IK_HND`) parent L_ACLV_IK_HND L_Hand_GRP;if (`objExists L_ACLV_Lc`) parent L_ACLV_Lc L_Hand_GRP;if (`objExists L_CLV_IK_HND`) parent L_CLV_IK_HND L_Hand_GRP;if (`objExists L_CLV_Lc`) parent L_CLV_Lc L_Hand_GRP;if (`objExists L_CLVCL_IK_HND`) parent L_CLVCL_IK_HND L_Hand_GRP;if (`objExists L_ARM_IK_HND`) parent L_ARM_IK_HND L_Hand_GRP;if (`objExists R_ACLV_IK_HND`) parent R_ACLV_IK_HND R_Hand_GRP;if (`objExists R_ACLV_Lc`) parent R_ACLV_Lc R_Hand_GRP;if (`objExists R_CLV_IK_HND`) parent R_CLV_IK_HND R_Hand_GRP;if (`objExists R_CLV_Lc`) parent R_CLV_Lc R_Hand_GRP;if (`objExists R_CLVCL_IK_HND`) parent R_CLVCL_IK_HND R_Hand_GRP;if (`objExists R_ARM_IK_HND`) parent R_ARM_IK_HND R_Hand_GRP;int $flg=`getAttr Character_HLP.ikspine`;float $posx[],$posy[],$posz[];string $nm[],$tp;if ($flg){$nm={"Root_R","Spine_1","Spine_2","Spine_3","Clav_B"};for ($i=0;$i<size($nm);$i++){$pos=`xform -q -ws -piv ($nm[$i]+"_SK_JNT")`;$posx[$i]=$pos[0];$posy[$i]=$pos[1];$posz[$i]=$pos[2];}$tp=`curve -d 3 -p $posx[0] $posy[0] $posz[0] -p $posx[0] $posy[0] $posz[0] -p $posx[1] $posy[1] $posz[1] -p $posx[2] $posy[2] $posz[2] -p $posx[3] $posy[3] $posz[3] -p $posx[4] $posy[4] $posz[4] -p $posx[4] $posy[4] $posz[4] -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 4 -k 4`;rename $tp "Body_Crv";select -r Body_Crv.cv[0:1] ;cluster -n "Spine_1_Cls";select -r Body_Crv.cv[2] ;cluster -n "Spine_2_Cls";select -r Body_Crv.cv[3] ;cluster -n "Spine_3_Cls";select -r Body_Crv.cv[4] ;cluster -n "Spine_4_Cls";select -r Body_Crv.cv[5:6] ;cluster -n "Spine_5_Cls";ikHandle -n "Body_Spine_IK_HND" -sj Root_R_SK_JNT -ee Clav_B_SK_JNT -sol "ikSplineSolver" -c Body_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 Body_Spine_Eff;parent Body_Crv CRV_GRP;}int $flg=`getAttr Character_HLP.ikear`;if (`objExists L_Ear_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.earnum`;select -r L_Ear_Crv.cv[0] ;cluster -n "L_Ear_1_Cls";select -r L_Ear_Crv.cv[1] ;cluster -n "L_Ear_2_Cls";select -r L_Ear_Crv.cv[2] ;cluster -n "L_Ear_3_Cls";select -r L_Ear_Crv.cv[3] ;cluster -n "L_Ear_4_Cls";ikHandle -n "L_Ear_IK_HND" -sj L_Ear_1_SK_JNT -ee ("L_Ear_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c L_Ear_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 L_Ear_Eff;}int $flg=`getAttr Character_HLP.ikear`;if (`objExists R_Ear_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.earnum`;select -r R_Ear_Crv.cv[0] ;cluster -n "R_Ear_1_Cls";select -r R_Ear_Crv.cv[1] ;cluster -n "R_Ear_2_Cls";select -r R_Ear_Crv.cv[2] ;cluster -n "R_Ear_3_Cls";select -r R_Ear_Crv.cv[3] ;cluster -n "R_Ear_4_Cls";ikHandle -n "R_Ear_IK_HND" -sj R_Ear_1_SK_JNT -ee ("R_Ear_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c R_Ear_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 R_Ear_Eff;}int $flg=`getAttr Character_HLP.iksen`;if (`objExists L_Sen_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.sennum`;select -r L_Sen_Crv.cv[0] ;cluster -n "L_Sen_1_Cls";select -r L_Sen_Crv.cv[1] ;cluster -n "L_Sen_2_Cls";select -r L_Sen_Crv.cv[2] ;cluster -n "L_Sen_3_Cls";select -r L_Sen_Crv.cv[3] ;cluster -n "L_Sen_4_Cls";ikHandle -n "L_Sen_IK_HND" -sj L_Sen_1_SK_JNT -ee ("L_Sen_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c L_Sen_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 L_Sen_Eff;}int $flg=`getAttr Character_HLP.iksen`;if (`objExists R_Sen_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.sennum`;select -r R_Sen_Crv.cv[0] ;cluster -n "R_Sen_1_Cls";select -r R_Sen_Crv.cv[1] ;cluster -n "R_Sen_2_Cls";select -r R_Sen_Crv.cv[2] ;cluster -n "R_Sen_3_Cls";select -r R_Sen_Crv.cv[3] ;cluster -n "R_Sen_4_Cls";ikHandle -n "R_Sen_IK_HND" -sj R_Sen_1_SK_JNT -ee ("R_Sen_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c R_Sen_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 R_Sen_Eff;}int $flg=`getAttr Character_HLP.ikwing`;if (`objExists L_W_T_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.w1num`;select -r L_Wing_T_Crv.cv[0] ;cluster -n "L_Wing_T_1_Cls";select -r L_Wing_T_Crv.cv[1] ;cluster -n "L_Wing_T_2_Cls";select -r L_Wing_T_Crv.cv[2] ;cluster -n "L_Wing_T_3_Cls";select -r L_Wing_T_Crv.cv[3] ;cluster -n "L_Wing_T_4_Cls";ikHandle -n "L_Wing_T_IK_HND" -sj L_W_T_1_SK_JNT -ee ("L_W_T_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c L_Wing_T_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 L_Wing_T_Eff;}int $flg=`getAttr Character_HLP.ikwing`;if (`objExists R_W_T_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.w1num`;select -r R_Wing_T_Crv.cv[0] ;cluster -n "R_Wing_T_1_Cls";select -r R_Wing_T_Crv.cv[1] ;cluster -n "R_Wing_T_2_Cls";select -r R_Wing_T_Crv.cv[2] ;cluster -n "R_Wing_T_3_Cls";select -r R_Wing_T_Crv.cv[3] ;cluster -n "R_Wing_T_4_Cls";ikHandle -n "R_Wing_T_IK_HND" -sj R_W_T_1_SK_JNT -ee ("R_W_T_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c R_Wing_T_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 R_Wing_T_Eff;}int $flg=`getAttr Character_HLP.ikwing`;if (`objExists L_W_M_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.w2num`;select -r L_Wing_M_Crv.cv[0] ;cluster -n "L_Wing_M_1_Cls";select -r L_Wing_M_Crv.cv[1] ;cluster -n "L_Wing_M_2_Cls";select -r L_Wing_M_Crv.cv[2] ;cluster -n "L_Wing_M_3_Cls";select -r L_Wing_M_Crv.cv[3] ;cluster -n "L_Wing_M_4_Cls";ikHandle -n "L_Wing_M_IK_HND" -sj L_W_M_1_SK_JNT -ee ("L_W_M_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c L_Wing_M_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 L_Wing_M_Eff;}int $flg=`getAttr Character_HLP.ikwing`;if (`objExists R_W_M_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.w2num`;select -r R_Wing_M_Crv.cv[0] ;cluster -n "R_Wing_M_1_Cls";select -r R_Wing_M_Crv.cv[1] ;cluster -n "R_Wing_M_2_Cls";select -r R_Wing_M_Crv.cv[2] ;cluster -n "R_Wing_M_3_Cls";select -r R_Wing_M_Crv.cv[3] ;cluster -n "R_Wing_M_4_Cls";ikHandle -n "R_Wing_M_IK_HND" -sj R_W_M_1_SK_JNT -ee ("R_W_M_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c R_Wing_M_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 R_Wing_M_Eff;}int $flg=`getAttr Character_HLP.ikwing`;if (`objExists L_W_B_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.w3num`;select -r L_Wing_B_Crv.cv[0] ;cluster -n "L_Wing_B_1_Cls";select -r L_Wing_B_Crv.cv[1] ;cluster -n "L_Wing_B_2_Cls";select -r L_Wing_B_Crv.cv[2] ;cluster -n "L_Wing_B_3_Cls";select -r L_Wing_B_Crv.cv[3] ;cluster -n "L_Wing_B_4_Cls";ikHandle -n "L_Wing_B_IK_HND" -sj L_W_B_1_SK_JNT -ee ("L_W_B_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c L_Wing_B_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 L_Wing_B_Eff;}int $flg=`getAttr Character_HLP.ikwing`;if (`objExists R_W_B_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.w3num`;select -r R_Wing_B_Crv.cv[0] ;cluster -n "R_Wing_B_1_Cls";select -r R_Wing_B_Crv.cv[1] ;cluster -n "R_Wing_B_2_Cls";select -r R_Wing_B_Crv.cv[2] ;cluster -n "R_Wing_B_3_Cls";select -r R_Wing_B_Crv.cv[3] ;cluster -n "R_Wing_B_4_Cls";ikHandle -n "R_Wing_B_IK_HND" -sj R_W_B_1_SK_JNT -ee ("R_W_B_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c R_Wing_B_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 R_Wing_B_Eff;}int $flg=`getAttr Character_HLP.iktail`;if (`objExists Tail_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.tailnum`;select -r Tail_Crv.cv[0] ;cluster -n "Tail_1_Cls";select -r Tail_Crv.cv[1] ;cluster -n "Tail_2_Cls";select -r Tail_Crv.cv[2] ;cluster -n "Tail_3_Cls";select -r Tail_Crv.cv[3] ;cluster -n "Tail_4_Cls";ikHandle -n "Tail_IK_HND" -sj Tail_1_SK_JNT -ee ("Tail_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c Tail_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 Tail_Eff;}int $flg=`getAttr Character_HLP.ikvac`;if (`objExists Vac_1_SK_JNT` && $flg){int $flg=`getAttr Character_HLP.vacnum`;select -r Vac_Crv.cv[0] ;cluster -n "Vac_1_Cls";select -r Vac_Crv.cv[1] ;cluster -n "Vac_2_Cls";select -r Vac_Crv.cv[2] ;cluster -n "Vac_3_Cls";select -r Vac_Crv.cv[3] ;cluster -n "Vac_4_Cls";ikHandle -n "Vac_IK_HND" -sj Vac_1_SK_JNT -ee ("Vac_"+$flg+"_SK_JNT") -sol "ikSplineSolver" -c Vac_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 Vac_Eff;}int $flg=`getAttr Character_HLP.ikspine`;float $posx[],$posy[],$posz[];string $nm[],$tp;if ($flg){$nm={"Neck_B","Neck_M","Head_B"};for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i]+"_SK_JNT")`){$pos=`xform -q -ws -piv ($nm[$i]+"_SK_JNT")`;$posx[$i]=$pos[0];$posy[$i]=$pos[1];$posz[$i]=$pos[2];}}if (`objExists Head_B_SK_JNT`){$tp=`curve -d 3 -p $posx[0] $posy[0] $posz[0] -p $posx[1] $posy[1] $posz[1] -p $posx[1] $posy[1] $posz[1] -p $posx[2] $posy[2] $posz[2] -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;rename $tp "Neck_Crv";select -r Neck_Crv.cv[0] ;cluster -n "Neck_1_Cls";select -r Neck_Crv.cv[1:2] ;cluster -n "Neck_2_Cls";select -r Neck_Crv.cv[3] ;cluster -n "Neck_3_Cls";ikHandle -n "Neck_Spine_IK_HND" -sj Neck_B_SK_JNT -ee Head_B_SK_JNT -sol "ikSplineSolver" -c Neck_Crv -ccv 0 -scv 0 -roc 1 -pcv 0 -snc 0;rename effector1 Neck_Spine_Eff;parent Neck_Crv CRV_GRP;parent -w Head_M_SK_JNT;}}if (`objExists Jaw_1_SK_JNT`){ikHandle -sol "ikSCsolver" -sj Jaw_1_SK_JNT -ee Jaw_2_SK_JNT -n "Jaw_IK_HND";rename effector1 "Jaw_Eff";}if (`objExists L_Eye_1_SK_JNT`){ikHandle -sol "ikSCsolver" -sj L_Eye_1_SK_JNT -ee L_Eye_2_SK_JNT -n "L_Eye_IK_HND";rename effector1 "L_Eye_Eff";}if (`objExists R_Eye_1_SK_JNT`){ikHandle -sol "ikSCsolver" -sj R_Eye_1_SK_JNT -ee R_Eye_2_SK_JNT -n "R_Eye_IK_HND";rename effector1 "R_Eye_Eff";}select -cl;group -em -n "IK_GRP";if (`objExists "L_Hand_GRP"`) parent L_Hand_GRP IK_GRP;if (`objExists "R_Hand_GRP"`) parent R_Hand_GRP IK_GRP;if (`objExists "L_Foot_GRP"`) parent L_Foot_GRP IK_GRP;if (`objExists "R_Foot_GRP"`) parent R_Foot_GRP IK_GRP;select -cl;if (`objExists "Neck_*_IK_HND"`) select -add "Neck_*_IK_HND";if (`objExists "Vac_IK_HND"`) select -add "Vac_IK_HND";if (`objExists "Tail_IK_HND"`) select -add "Tail_IK_HND";if (`objExists "*_Wing_*_IK_HND"`) select -add "*_Wing_*_IK_HND";if (`objExists "*_Sen_IK_HND"`) select -add "*_Sen_IK_HND";if (`objExists "*_Ear_IK_HND"`) select -add "*_Ear_IK_HND";if (`objExists "*_Eye_IK_HND"`) select -add "*_Eye_IK_HND";if (`objExists "Jaw_IK_HND"`) select -add "Jaw_IK_HND";if (`objExists "Body_*_IK_HND"`) select -add "Body_*_IK_HND";$tmp=`ls -sl`;select -cl;if (size($tmp)>0) parent $tmp "IK_GRP";if (`objExists Head_M_SK_JNT`) parent Head_M_SK_JNT JNT_GRP;select -cl;group -em -n "Cls_GRP";if (`objExists "*_ClsHandle"`){select -r "*_ClsHandle";$tmp=`ls -sl`;parent $tmp Cls_GRP;}if (`objExists "*_IK_HND"`) hide "*_IK_HND";css_TD_LockUnlock ("IK_GRP",0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1);setAttr Cls_GRP.v 0;css_TD_LockUnlock ("Cls_GRP",0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1);select -cl;}//*************************************************************************************************************//*********************************************Finalize Character Win******************************************//*************************************************************************************************************global proc css_adset_fin_char (){if (`window -exists adset_colorize_win`) deleteUI adset_colorize_win;if (`window -exists adset_fin`) deleteUI adset_fin;window -t "Finalize" adset_fin;columnLayout -adj 1;textFieldGrp -l"Name :" -cw 1 50 -adj 2 adset_char_nm;button -l"Create IK System" -c"adset_ik_crt";button -l"ConnectBody Parts" -c"adset_cn_body";button -l"Create Helper System" -c"adset_hlp_crt";button -l"Complete Grouping" -c"adset_grp";button -l"Colorization" -c"css_adset_setup 21";button -l"Finalize Character" -c"adset_final";showWindow adset_fin;window -e -wh 150 190 adset_fin;}//*************************************************************************************************************//********************************************* Duplicate Curves **********************************************//*************************************************************************************************************global proc adset_dup_crv (){select "*_Crv";DeleteHistory;select -cl;parent -w Curve_TMP;string $nm[];$nm={"L_Ear","R_Ear","L_Sen","R_Sen","L_Wing_B","L_Wing_M","L_Wing_T"	,"R_Wing_B","R_Wing_M","R_Wing_T","Tail","Vac"};select -cl;group -em -n "CRV_GRP";for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i]+"_Crv")`){parent -w ($nm[$i]+"_Crv");parent ($nm[$i]+"_Crv") CRV_GRP;}}select -cl;delete "Grp_TMP";delete "Curve_TMP";css_TD_LockUnlock ("CRV_GRP",0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1);}//*************************************************************************************************************//*********************************************Finalize Joint Orientation**************************************//*************************************************************************************************************global proc css_adset_fin_ori (){string $nm[];select "templateSkeletonN_*";$nm=`ls -sl`;for ($i=0;$i<size($nm);$i++){select -r $nm[$i];templateSkeleton_reBuildChain_doIt;select -cl;refresh;}$nm={"Root_R","Tail_1","L_W_B_1","R_W_B_1","L_W_M_1","R_W_M_1","L_W_T_1","R_W_T_1","L_Sen_1","R_Sen_1","L_Ear_1","R_Ear_1","Vac_1","L_Eye_1","R_Eye_1","Jaw_1","Neck_B"	,"L_H_T_1","R_H_T_1","L_H_I_1","R_H_I_1","L_H_M_1","R_H_M_1","L_H_R_1","R_H_R_1","L_H_P_1","R_H_P_1","L_F_T_1","R_F_T_1","L_F_I_1","R_F_I_1","L_F_M_1","R_F_M_1","L_F_R_1","R_F_R_1","L_F_P_1","R_F_P_1"	,"L_Hip","R_Hip","L_Clavicle_B","R_Clavicle_B"};parent -w Root_T_SK_JNT;parent Root_T_SK_JNT Root_R_SK_JNT;parent -w Root_T_BN_JNT;parent Root_T_BN_JNT Root_R_BN_JNT;if (`window -ex ADSET_CNTR`) deleteUI ADSET_CNTR;if (!`objExists JNT_GRP`) group -em -n"JNT_GRP";for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i]+"_BN_JNT")`) parent ($nm[$i]+"_BN_JNT") "BN_JNT_GRP";if (`objExists ($nm[$i]+"_SK_JNT")`) parent ($nm[$i]+"_SK_JNT") "JNT_GRP";}if (`objExists ("*_Shoulder_IK_JNT")`) parent ("*_Shoulder_IK_JNT") "JNT_GRP";if (`objExists ("*_Shoulder_FK_JNT")`) parent ("*_Shoulder_FK_JNT") "JNT_GRP";if (`objExists ("*_Shoulder_CLV_JNT")`) parent ("*_Shoulder_CLV_JNT") "JNT_GRP";if (`objExists ("*_Clavicle_B_ACLV_JNT")`) parent ("*_Clavicle_B_ACLV_JNT") "JNT_GRP";css_TD_LockUnlock ("BN_JNT_GRP",0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0 );setAttr BN_JNT_GRP.v 0;css_TD_LockUnlock ("JNT_GRP",0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1 );select -cl;css_adset_setup 21;}//*************************************************************************************************************//*********************************************Start Joint Orientation*****************************************//*************************************************************************************************************global proc css_adset_jnt_ori (){string $nm[];int $rt[];$nm={"Root_R_SK","Tail_1_SK","L_W_B_1_SK","R_W_B_1_SK","L_W_M_1_SK","R_W_M_1_SK","L_W_T_1_SK","R_W_T_1_SK","L_Sen_1_SK","R_Sen_1_SK","L_Ear_1_SK","R_Ear_1_SK","Vac_1_SK","L_Eye_1_SK","R_Eye_1_SK","Jaw_1_SK","Neck_B_SK"	,"L_H_T_1_SK","R_H_T_1_SK","L_H_I_1_SK","R_H_I_1_SK","L_H_M_1_SK","R_H_M_1_SK","L_H_R_1_SK","R_H_R_1_SK","L_H_P_1_SK","R_H_P_1_SK","L_F_T_1_SK","R_F_T_1_SK","L_F_I_1_SK","R_F_I_1_SK","L_F_M_1_SK","R_F_M_1_SK","L_F_R_1_SK","R_F_R_1_SK","L_F_P_1_SK","R_F_P_1_SK"	,"L_Hip_SK","R_Hip_SK","L_Clavicle_B_SK","R_Clavicle_B_SK","L_Shoulder_IK","R_Shoulder_IK","L_Shoulder_FK","R_Shoulder_FK","L_Shoulder_CLV","R_Shoulder_CLV","L_Clavicle_B_ACLV","R_Clavicle_B_ACLV",	"Root_R_BN","Tail_1_BN","L_W_B_1_BN","R_W_B_1_BN","L_W_M_1_BN","R_W_M_1_BN","L_W_T_1_BN","R_W_T_1_BN","L_Sen_1_BN","R_Sen_1_BN","L_Ear_1_BN","R_Ear_1_BN","Vac_1_BN","L_Eye_1_BN","R_Eye_1_BN","Jaw_1_BN","Neck_B_BN"	,"L_H_T_1_BN","R_H_T_1_BN","L_H_I_1_BN","R_H_I_1_BN","L_H_M_1_BN","R_H_M_1_BN","L_H_R_1_BN","R_H_R_1_BN","L_H_P_1_BN","R_H_P_1_BN","L_F_T_1_BN","R_F_T_1_BN","L_F_I_1_BN","R_F_I_1_BN","L_F_M_1_BN","R_F_M_1_BN","L_F_R_1_BN","R_F_R_1_BN","L_F_P_1_BN","R_F_P_1_BN"	,"L_Hip_BN","R_Hip_BN","L_Clavicle_B_BN","R_Clavicle_B_BN"};for ($i=0;$i<size($nm);$i++){if(`objExists ($nm[$i]+"_JNT")`){select -r ($nm[$i]+"_JNT");templateSkeleton_createTemp_doIt;refresh;}}select "templateSkeletonN_*";$nm=`ls -sl`;for ($i=0;$i<size($nm);$i++){setAttr ("templateSkeletonN_"+($i+1)+".rotGuiScale") .3;}$nm={"Root_R","Spine_1","Spine_2","Spine_3","Clav_B","Neck_B","Neck_M","Head_B","Head_M"};for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i]+"_SK_JNT")`&&`attributeExists rotGui ($nm[$i]+"_SK_JNT")`) setAttr ($nm[$i]+"_SK_JNT.rotGui") 90;if (`objExists ($nm[$i]+"_BN_JNT")`&&`attributeExists rotGui ($nm[$i]+"_BN_JNT")`) setAttr ($nm[$i]+"_BN_JNT.rotGui") 90;}$nm={"L_Knee","R_Knee"};for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i]+"_SK_JNT")`&&`attributeExists rotGui ($nm[$i]+"_SK_JNT")`) setAttr ($nm[$i]+"_SK_JNT.rotGui") 180;if (`objExists ($nm[$i]+"_BN_JNT")`&&`attributeExists rotGui ($nm[$i]+"_BN_JNT")`) setAttr ($nm[$i]+"_BN_JNT.rotGui") 180;}if (`objExists "L_W_*_JNT"`){select -r "L_W_*_JNT";$nm=`ls -sl`;select -cl;for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i])`&&`attributeExists rotGui ($nm[$i])`) setAttr ($nm[$i]+".rotGui") 90;}}if (`objExists "R_W_*_JNT"`){select -r "R_W_*_JNT";$nm=`ls -sl`;select -cl;for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i])`&&`attributeExists rotGui ($nm[$i])`) setAttr ($nm[$i]+".rotGui") -90;}}if (`objExists "L_Ear_*_JNT"`){select -r "L_Ear_*_JNT";$nm=`ls -sl`;select -cl;for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i])`&&`attributeExists rotGui ($nm[$i])`) setAttr ($nm[$i]+".rotGui") 90;}}if (`objExists "R_Ear_*_JNT"`){select -r "R_Ear_*_JNT";$nm=`ls -sl`;select -cl;for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i])`&&`attributeExists rotGui ($nm[$i])`) setAttr ($nm[$i]+".rotGui") -90;}}if (`objExists "?_Sen_*_JNT"`){select -r "?_Sen_*_JNT";$nm=`ls -sl`;select -cl;for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i])`&&`attributeExists rotGui ($nm[$i])`) setAttr ($nm[$i]+".rotGui") 90;}}$nm={"L_Clavicle_B_ACLV_JNT","L_Clavicle_B_SK_JNT","L_Clavicle_E_SK_JNT","L_Shoulder_SK_JNT","L_Elbow_SK_JNT","L_Forearm_SK_JNT","L_Wrist_SK_JNT"	,"L_Clavicle_B_BN_JNT","L_Clavicle_E_BN_JNT","L_Shoulder_BN_JNT","L_Elbow_BN_JNT","L_Forearm_BN_JNT","L_Wrist_BN_JNT"	,"L_Shoulder_IK_JNT","L_Elbow_IK_JNT","L_Forearm_IK_JNT","L_Shoulder_FK_JNT","L_Elbow_FK_JNT","L_Forearm_FK_JNT"	,"L_Shoulder_CLV_JNT","L_Elbow_CLV_JNT","L_Forearm_CLV_JNT"};for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i])`&&`attributeExists rotGui ($nm[$i])`) setAttr ($nm[$i]+".rotGui") 90;}$nm={"R_Clavicle_B_ACLV_JNT","R_Clavicle_B_SK_JNT","R_Clavicle_E_SK_JNT","R_Shoulder_SK_JNT","R_Elbow_SK_JNT","R_Forearm_SK_JNT","R_Wrist_SK_JNT"	,"R_Clavicle_B_BN_JNT","R_Clavicle_E_BN_JNT","R_Shoulder_BN_JNT","R_Elbow_BN_JNT","R_Forearm_BN_JNT","R_Wrist_BN_JNT"	,"R_Shoulder_IK_JNT","R_Elbow_IK_JNT","R_Forearm_IK_JNT","R_Shoulder_FK_JNT","R_Elbow_FK_JNT","R_Forearm_FK_JNT"	,"R_Shoulder_CLV_JNT","R_Elbow_CLV_JNT","R_Forearm_CLV_JNT"};for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i])`&&`attributeExists rotGui ($nm[$i])`) setAttr ($nm[$i]+".rotGui") -90;}if (`objExists ("R_Clavicle_E_SK_JNT")`&&`attributeExists rotGui "R_Clavicle_E_SK_JNT"`) setAttr ("R_Clavicle_E_SK_JNT.rotGui") 90;if (`objExists ("R_Clavicle_E_BN_JNT")`&&`attributeExists rotGui "R_Clavicle_E_BN_JNT"`) setAttr ("R_Clavicle_E_BN_JNT.rotGui") 90;select -cl;adset_dup_crv;}//*************************************************************************************************************//*********************************************Character Helper Attr*******************************************//*************************************************************************************************************global proc adset_char_hlp_attr (){if (! `attributeExists "name" Character_HLP`) addAttr -dt "string" -ln "characterName" -sn "name" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "leg" Character_HLP`) addAttr -at bool -ln "Leg" -sn "leg" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "hand" Character_HLP`) addAttr -at bool -ln "Hand" -sn "hand" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "head" Character_HLP`) addAttr -at bool -ln "Head" -sn "head" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "ear" Character_HLP`) addAttr -at bool -ln "Ear" -sn "ear" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "sen" Character_HLP`) addAttr -at bool -ln "Senor" -sn "sen" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "vac" Character_HLP`) addAttr -at bool -ln "Vacum" -sn "vac" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "tail" Character_HLP`) addAttr -at bool -ln "Tail" -sn "tail" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "wing" Character_HLP`) addAttr -at bool -ln "Wing" -sn "wing" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "hfin" Character_HLP`) addAttr -at bool -ln "HandFinger" -sn "hfin" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "ffin" Character_HLP`) addAttr -at bool -ln "FootFinger" -sn "ffin" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "sbody" Character_HLP`) addAttr -at bool -ln "stretchyBody" -sn "sbody" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "sneck" Character_HLP`) addAttr -at bool -ln "stretchyNeck" -sn "sneck" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "sfoot" Character_HLP`) addAttr -at bool -ln "stretchyFoot" -sn "sfoot" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "shand" Character_HLP`) addAttr -at bool -ln "stretchyHand" -sn "shand" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "shead" Character_HLP`) addAttr -at bool -ln "stretchyHead" -sn "shead" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "seye" Character_HLP`) addAttr -at bool -ln "stretchyEyes" -sn "seye" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "sear" Character_HLP`) addAttr -at bool -ln "stretchyEars" -sn "sear" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "ssen" Character_HLP`) addAttr -at bool -ln "stretchySensors" -sn "ssen" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "svac" Character_HLP`) addAttr -at bool -ln "stretchyVacume" -sn "svac" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "stail" Character_HLP`) addAttr -at bool -ln "stretchyTail" -sn "stail" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "ikspine" Character_HLP`) addAttr -at bool -ln "ikSpine" -sn "ikspine" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "ikear" Character_HLP`) addAttr -at bool -ln "ikEar" -sn "ikear" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "iksen" Character_HLP`) addAttr -at bool -ln "ikSensor" -sn "iksen" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "ikvac" Character_HLP`) addAttr -at bool -ln "ikVacume" -sn "ikvac" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "iktail" Character_HLP`) addAttr -at bool -ln "ikTail" -sn "iktail" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "ikwing" Character_HLP`) addAttr -at bool -ln "ikWings" -sn "ikwing" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "ikfk" Character_HLP`) addAttr -at bool -ln "IkFkSwitch" -sn "ikfk" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "aclv" Character_HLP`) addAttr -at bool -ln "autoClav" -sn "aclv" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "ahip" Character_HLP`) addAttr -at bool -ln "autoHip" -sn "ahip" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "finnum" Character_HLP`) addAttr -at "float" -ln "FingerNum" -sn "finnum" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "hfnnum" Character_HLP`) addAttr -at "float" -ln "handFingerNum" -sn "hfnnum" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "lfnnum" Character_HLP`) addAttr -at "float" -ln "legFingerNum" -sn "lfnnum" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "earnum" Character_HLP`) addAttr -at "float" -ln "earNum" -sn "earnum" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "tailnum" Character_HLP`) addAttr -at "float" -ln "tailNum" -sn "tailnum" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "w1num" Character_HLP`) addAttr -at "float" -ln "wingOneNum" -sn "w1num" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "w2num" Character_HLP`) addAttr -at "float" -ln "WingTwoNum" -sn "w2num" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "w3num" Character_HLP`) addAttr -at "float" -ln "wingThreeNum" -sn "w3num" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "sennum" Character_HLP`) addAttr -at "float" -ln "sensorNum" -sn "sennum" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;if (! `attributeExists "vacnum" Character_HLP`) addAttr -at "float" -ln "vacumeNum" -sn "vacnum" -h 0 -k 0 -r 1 -w 1 -s 1 Character_HLP;string $nm[],$at[];int $v;$at={"leg","hand","head","ear","sen","vac","tail","wing","hfin","ffin"	,"sbody","sneck","sfoot","shand","shead","seye","sear","ssen"	,"svac","stail","ikspine","ikear","iksen","ikvac","iktail","ikwing","ikfk","aclv","ahip"};$nm={"adset_foot_bx","adset_hand_bx","adset_head_bx","adset_ear_bx","adset_sens_bx"	,"adset_vac_bx","adset_tail_bx","adset_wing_bx","adset_hfing_bx","adset_ffing_bx"	,"adset_st_body_bx","adset_st_neck_bx","adset_st_foot_bx","adset_st_hand_bx","adset_st_head_bx"	,"adset_st_eye_bx","adset_st_ear_bx","adset_st_sens_bx","adset_st_vac_bx"	,"adset_st_tail_bx","adset_ik_spin_bx","adset_ik_ear_bx","adset_ik_sen_bx","adset_ik_vac_bx","adset_ik_tail_bx","adset_ik_wing_bx","adset_ikfk_bx","adset_shld_bx","adset_aut_hip_bx"};for ($i=0;$i<size($at);$i++){$v=`checkBox -q -v $nm[$i]`;setAttr ("Character_HLP."+$at[$i]) $v;}$at={"hfnnum","lfnnum","earnum","tailnum","w1num","w2num","w3num","sennum","vacnum"};for ($i=0;$i<size($at);$i++){setAttr ("Character_HLP."+$at[$i]) 0;}setAttr Character_HLP.finnum `intSliderGrp -q -v adset_fin_num`;}//*************************************************************************************************************//*********************************************   Create Joints  **********************************************//*************************************************************************************************************global proc css_adset_jnt_crt (){scriptEditorInfo -ch -sw 1;progressWindow -title "Creating Joints" -pr 0 -st "progress : 0 %" -isInterruptable 0 -min 0 -max 100;setObjectPickMask "Other" false;int $numBones;adset_char_hlp_attr;jointDisplayScale 0.2;string $nm[];float $posx[],$posy[],$posz[],$pos[];if (`objExists Body_Crv`){select "Body_Crv";adset_bonesOnCurve(5,0,0);select -cl;$nm={"Root_T","Root_R","Spine_1","Spine_2","Spine_3","Clav_B"};for ($i=1;$i<7;$i++){rename ("joint"+$i) ($nm[$i-1]+"_SK_JNT");}parent -w Root_R_SK_JNT;parent Root_T_SK_JNT Root_R_SK_JNT;select "Body_Crv";adset_bonesOnCurve(5,0,0);select -cl;$nm={"Root_T","Root_R","Spine_1","Spine_2","Spine_3","Clav_B"};for ($i=1;$i<7;$i++){rename ("joint"+$i) ($nm[$i-1]+"_BN_JNT");}parent -w Root_R_BN_JNT;parent Root_T_BN_JNT Root_R_BN_JNT;}progressWindow -e -st ("Progress : "+(100/41)+" %") -pr (100/41);refresh;if (`objExists Tail_Crv`){$numBones=`intSliderGrp -q -v adset_tail_cntr`-1;setAttr "Character_HLP.tailnum" ($numBones+1);select "Tail_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("Tail_"+$i+"_SK_JNT");}select "Tail_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("Tail_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(2*100/41)+" %") -pr (2*100/41);refresh;if (`objExists L_Wing_B_Crv`){$numBones=`intSliderGrp -q -v adset_wn3_cntr`-1;setAttr "Character_HLP.w3num" ($numBones+1);select "L_Wing_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_W_B_"+$i+"_SK_JNT");}select "L_Wing_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_W_B_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(3*100/41)+" %") -pr (3*100/41);refresh;if (`objExists R_Wing_B_Crv`){$numBones=`intSliderGrp -q -v adset_wn3_cntr`-1;setAttr "Character_HLP.w3num" ($numBones+1);select "R_Wing_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_W_B_"+$i+"_SK_JNT");}select "R_Wing_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_W_B_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(4*100/41)+" %") -pr (4*100/41);refresh;if (`objExists L_Wing_M_Crv`){$numBones=`intSliderGrp -q -v adset_wn2_cntr`-1;setAttr "Character_HLP.w2num" ($numBones+1);select "L_Wing_M_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_W_M_"+$i+"_SK_JNT");}select "L_Wing_M_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_W_M_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(5*100/41)+" %") -pr (5*100/41);refresh;if (`objExists R_Wing_M_Crv`){$numBones=`intSliderGrp -q -v adset_wn2_cntr`-1;setAttr "Character_HLP.w2num" ($numBones+1);select "R_Wing_M_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_W_M_"+$i+"_SK_JNT");}select "R_Wing_M_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_W_M_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(6*100/41)+" %") -pr (6*100/41);refresh;if (`objExists L_Wing_T_Crv`){$numBones=`intSliderGrp -q -v adset_wn1_cntr`-1;setAttr "Character_HLP.w1num" ($numBones+1);select "L_Wing_T_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_W_T_"+$i+"_SK_JNT");}select "L_Wing_T_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_W_T_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(7*100/41)+" %") -pr (7*100/41);refresh;if (`objExists R_Wing_T_Crv`){$numBones=`intSliderGrp -q -v adset_wn1_cntr`-1;setAttr "Character_HLP.w1num" ($numBones+1);select "R_Wing_T_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_W_T_"+$i+"_SK_JNT");}select "R_Wing_T_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_W_T_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(8*100/41)+" %") -pr (8*100/41);refresh;if (`objExists L_Sen_Crv`){$numBones=`intSliderGrp -q -v adset_sens_cntr`-1;setAttr "Character_HLP.sennum" ($numBones+1);select "L_Sen_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_Sen_"+$i+"_SK_JNT");}select "L_Sen_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_Sen_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(9*100/41)+" %") -pr (9*100/41);refresh;if (`objExists R_Sen_Crv`){$numBones=`intSliderGrp -q -v adset_sens_cntr`-1;setAttr "Character_HLP.sennum" ($numBones+1);select "R_Sen_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_Sen_"+$i+"_SK_JNT");}select "R_Sen_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_Sen_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(10*100/41)+" %") -pr (10*100/41);refresh;if (`objExists L_Ear_Crv`){$numBones=`intSliderGrp -q -v adset_ear_cntr`-1;setAttr "Character_HLP.earnum" ($numBones+1);select "L_Ear_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_Ear_"+$i+"_SK_JNT");}select "L_Ear_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_Ear_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(11*100/41)+" %") -pr (11*100/41);refresh;if (`objExists R_Ear_Crv`){$numBones=`intSliderGrp -q -v adset_ear_cntr`-1;setAttr "Character_HLP.earnum" ($numBones+1);select "R_Ear_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_Ear_"+$i+"_SK_JNT");}select "R_Ear_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_Ear_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(12*100/41)+" %") -pr (12*100/41);refresh;if (`objExists Vac_Crv`){$numBones=`intSliderGrp -q -v adset_vac_cntr`-1;setAttr "Character_HLP.vacnum" ($numBones+1);select "Vac_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("Vac_"+$i+"_SK_JNT");}select "Vac_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("Vac_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(13*100/41)+" %") -pr (13*100/41);refresh;if (`objExists L_Eye_Crv`){select "L_Eye_Crv";adset_bonesOnCurve(1,0,0);select -cl;for ($i=1;$i<3;$i++){rename ("joint"+$i) ("L_Eye_"+$i+"_SK_JNT");}select "L_Eye_Crv";adset_bonesOnCurve(1,0,0);select -cl;for ($i=1;$i<3;$i++){rename ("joint"+$i) ("L_Eye_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(14*100/41)+" %") -pr (14*100/41);refresh;if (`objExists R_Eye_Crv`){select "R_Eye_Crv";adset_bonesOnCurve(1,0,0);select -cl;for ($i=1;$i<3;$i++){rename ("joint"+$i) ("R_Eye_"+$i+"_SK_JNT");}select "R_Eye_Crv";adset_bonesOnCurve(1,0,0);select -cl;for ($i=1;$i<3;$i++){rename ("joint"+$i) ("R_Eye_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(15*100/41)+" %") -pr (15*100/41);refresh;if (`objExists Jaw_Crv`){select "Jaw_Crv";adset_bonesOnCurve(1,0,0);select -cl;for ($i=1;$i<3;$i++){rename ("joint"+$i) ("Jaw_"+$i+"_SK_JNT");}select "Jaw_Crv";adset_bonesOnCurve(1,0,0);select -cl;for ($i=1;$i<3;$i++){rename ("joint"+$i) ("Jaw_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(16*100/41)+" %") -pr (16*100/41);refresh;if (`objExists Head_Crv`){select "Head_Crv";adset_bonesOnCurve(4,0,0);select -cl;$nm={"Neck_B","Neck_M","Head_B","Head_M","Head_T"};for ($i=1;$i<6;$i++){rename ("joint"+$i) ($nm[$i-1]+"_SK_JNT");}select "Head_Crv";adset_bonesOnCurve(4,0,0);select -cl;$nm={"Neck_B","Neck_M","Head_B","Head_M","Head_T"};for ($i=1;$i<6;$i++){rename ("joint"+$i) ($nm[$i-1]+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(17*100/41)+" %") -pr (17*100/41);refresh;if (`objExists L_Hand_Thumb_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "L_Hand_Thumb_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_T_"+$i+"_SK_JNT");}select "L_Hand_Thumb_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_T_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(18*100/41)+" %") -pr (18*100/41);refresh;if (`objExists R_Hand_Thumb_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "R_Hand_Thumb_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_T_"+$i+"_SK_JNT");}select "R_Hand_Thumb_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_T_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(19*100/41)+" %") -pr (19*100/41);refresh;if (`objExists L_Hand_Index_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "L_Hand_Index_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_I_"+$i+"_SK_JNT");}select "L_Hand_Index_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_I_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(20*100/41)+" %") -pr (20*100/41);refresh;if (`objExists R_Hand_Index_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "R_Hand_Index_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_I_"+$i+"_SK_JNT");}select "R_Hand_Index_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_I_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(21*100/41)+" %") -pr (21*100/41);refresh;if (`objExists L_Hand_Middle_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "L_Hand_Middle_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_M_"+$i+"_SK_JNT");}select "L_Hand_Middle_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_M_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(22*100/41)+" %") -pr (22*100/41);refresh;if (`objExists R_Hand_Middle_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "R_Hand_Middle_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_M_"+$i+"_SK_JNT");}select "R_Hand_Middle_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_M_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(23*100/41)+" %") -pr (23*100/41);refresh;if (`objExists L_Hand_Ring_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "L_Hand_Ring_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_R_"+$i+"_SK_JNT");}select "L_Hand_Ring_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_R_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(24*100/41)+" %") -pr (24*100/41);refresh;if (`objExists R_Hand_Ring_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "R_Hand_Ring_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_R_"+$i+"_SK_JNT");}select "R_Hand_Ring_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_R_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(25*100/41)+" %") -pr (25*100/41);refresh;if (`objExists L_Hand_Pinky_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "L_Hand_Pinky_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_P_"+$i+"_SK_JNT");}select "L_Hand_Pinky_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_H_P_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(26*100/41)+" %") -pr (26*100/41);refresh;if (`objExists R_Hand_Pinky_B_Crv`){$numBones=`intSliderGrp -q -v adset_hnfn_cntr`-1;setAttr "Character_HLP.hfnnum" ($numBones+1);select "R_Hand_Pinky_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_P_"+$i+"_SK_JNT");}select "R_Hand_Pinky_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_H_P_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(27*100/41)+" %") -pr (27*100/41);refresh;if (`objExists L_Foot_Thumb_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "L_Foot_Thumb_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_T_"+$i+"_SK_JNT");}select "L_Foot_Thumb_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_T_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(28*100/41)+" %") -pr (28*100/41);refresh;if (`objExists R_Foot_Thumb_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "R_Foot_Thumb_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_T_"+$i+"_SK_JNT");}select "R_Foot_Thumb_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_T_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(29*100/41)+" %") -pr (29*100/41);refresh;if (`objExists L_Foot_Index_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "L_Foot_Index_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_I_"+$i+"_SK_JNT");}select "L_Foot_Index_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_I_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(30*100/41)+" %") -pr (30*100/41);refresh;if (`objExists R_Foot_Index_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "R_Foot_Index_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_I_"+$i+"_SK_JNT");}select "R_Foot_Index_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_I_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(31*100/41)+" %") -pr (31*100/41);refresh;if (`objExists L_Foot_Middle_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "L_Foot_Middle_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_M_"+$i+"_SK_JNT");}select "L_Foot_Middle_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_M_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(32*100/41)+" %") -pr (32*100/41);refresh;if (`objExists R_Foot_Middle_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "R_Foot_Middle_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_M_"+$i+"_SK_JNT");}select "R_Foot_Middle_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_M_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(33*100/41)+" %") -pr (33*100/41);refresh;if (`objExists L_Foot_Ring_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "L_Foot_Ring_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_R_"+$i+"_SK_JNT");}select "L_Foot_Ring_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_R_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(34*100/41)+" %") -pr (34*100/41);refresh;if (`objExists R_Foot_Ring_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "R_Foot_Ring_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_R_"+$i+"_SK_JNT");}select "R_Foot_Ring_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_R_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(35*100/41)+" %") -pr (35*100/41);refresh;if (`objExists L_Foot_Pinky_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "L_Foot_Pinky_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_P_"+$i+"_SK_JNT");}select "L_Foot_Pinky_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("L_F_P_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(36*100/41)+" %") -pr (36*100/41);refresh;if (`objExists R_Foot_Pinky_B_Crv`){$numBones=`intSliderGrp -q -v adset_lgfn_cntr`-1;setAttr "Character_HLP.lfnnum" ($numBones+1);select "R_Foot_Pinky_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_P_"+$i+"_SK_JNT");}select "R_Foot_Pinky_B_Crv";adset_bonesOnCurve($numBones,0,0);select -cl;for ($i=1;$i<($numBones+2);$i++){rename ("joint"+$i) ("R_F_P_"+$i+"_BN_JNT");}}progressWindow -e -st ("Progress : "+(37*100/41)+" %") -pr (37*100/41);refresh;$nm={"Hip","Knee","Ball","Toe","Toe_end"};if (`objExists L_Hip_Crv`){for ($i=0;$i<size($nm);$i++){$pos=`xform -q -ws -piv ("L_"+$nm[$i]+"_Lc_TMP")`;$posx[$i]=$pos[0];$posy[$i]=$pos[1];$posz[$i]=$pos[2];}select -cl;for ($i=0;$i<size($nm);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("L_"+$nm[$i]+"_SK_JNT");}select -cl;for ($i=0;$i<size($nm);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("L_"+$nm[$i]+"_BN_JNT");}group -em -n "L_Foot_GRP";$pos=`xform -q -ws -piv L_Heel_Lc_TMP`;xform -ws -piv $pos[0] $pos[1] $pos[2] "L_Foot_GRP";select -cl;}progressWindow -e -st ("Progress : "+(38*100/41)+" %") -pr (38*100/41);if (`objExists R_Hip_Crv`){for ($i=0;$i<size($nm);$i++){$pos=`xform -q -ws -piv ("R_"+$nm[$i]+"_Lc_TMP")`;$posx[$i]=$pos[0];$posy[$i]=$pos[1];$posz[$i]=$pos[2];}select -cl;for ($i=0;$i<size($nm);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("R_"+$nm[$i]+"_SK_JNT");}select -cl;for ($i=0;$i<size($nm);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("R_"+$nm[$i]+"_BN_JNT");}select -cl;group -em -n "R_Foot_GRP";$pos=`xform -q -ws -piv R_Heel_Lc_TMP`;xform -ws -piv $pos[0] $pos[1] $pos[2] "R_Foot_GRP";select -cl;}progressWindow -e -st ("Progress : "+(39*100/41)+" %") -pr (39*100/41);refresh;$nm={"Clavicle_B","Clavicle_E","Shoulder","Elbow","Forearm","Wrist"};if (`objExists L_Clavicle_B_Crv`){if (`objExists L_Hand_Middle_B_Lc_TMP`){int $sz=size($nm);$nm[$sz]="Hand_Middle_B";}for ($i=0;$i<size($nm);$i++){$pos=`xform -q -ws -piv ("L_"+$nm[$i]+"_Lc_TMP")`;$posx[$i]=$pos[0];$posy[$i]=$pos[1];$posz[$i]=$pos[2];}select -cl;group -em -n "L_Hand_GRP";xform -ws -piv $posx[5] $posy[5] $posz[5] L_Hand_GRP;select -cl;for ($i=0;$i<size($nm);$i++){if ($i==1){joint -p $posx[$i+1] $posy[$i+1] $posz[$i+1];}else{joint -p $posx[$i] $posy[$i] $posz[$i];}rename joint1 ("L_"+$nm[$i]+"_SK_JNT");}select -cl;for ($i=0;$i<size($nm);$i++){if ($i==1){joint -p $posx[$i+1] $posy[$i+1] $posz[$i+1];}else{joint -p $posx[$i] $posy[$i] $posz[$i];}rename joint1 ("L_"+$nm[$i]+"_BN_JNT");}select -cl;for ($i=2;$i<(size($nm)-1);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("L_"+$nm[$i]+"_IK_JNT");}select -cl;for ($i=2;$i<(size($nm)-1);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("L_"+$nm[$i]+"_FK_JNT");}select -cl;for ($i=2;$i<(size($nm)-1);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("L_"+$nm[$i]+"_CLV_JNT");}select -cl;for ($i=0;$i<2;$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("L_"+$nm[$i]+"_ACLV_JNT");}select -cl;}progressWindow -e -st ("Progress : "+(40*100/41)+" %") -pr (40*100/41);refresh;$nm={"Clavicle_B","Clavicle_E","Shoulder","Elbow","Forearm","Wrist"};if (`objExists R_Clavicle_B_Crv`){if (`objExists R_Hand_Middle_B_Lc_TMP`){int $sz=size($nm);$nm[$sz]="Hand_Middle_B";}for ($i=0;$i<size($nm);$i++){$pos=`xform -q -ws -piv ("R_"+$nm[$i]+"_Lc_TMP")`;$posx[$i]=$pos[0];$posy[$i]=$pos[1];$posz[$i]=$pos[2];}select -cl;group -em -n "R_Hand_GRP";xform -ws -piv $posx[5] $posy[5] $posz[5] R_Hand_GRP;select -cl;for ($i=0;$i<size($nm);$i++){if ($i==1){joint -p $posx[$i+1] $posy[$i+1] $posz[$i+1];}else{joint -p $posx[$i] $posy[$i] $posz[$i];}rename joint1 ("R_"+$nm[$i]+"_SK_JNT");}select -cl;for ($i=0;$i<size($nm);$i++){if ($i==1){joint -p $posx[$i+1] $posy[$i+1] $posz[$i+1];}else{joint -p $posx[$i] $posy[$i] $posz[$i];}rename joint1 ("R_"+$nm[$i]+"_BN_JNT");}select -cl;for ($i=2;$i<(size($nm)-1);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("R_"+$nm[$i]+"_IK_JNT");}select -cl;for ($i=2;$i<(size($nm)-1);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("R_"+$nm[$i]+"_FK_JNT");}select -cl;for ($i=2;$i<(size($nm)-1);$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("R_"+$nm[$i]+"_CLV_JNT");}select -cl;for ($i=0;$i<2;$i++){joint -p $posx[$i] $posy[$i] $posz[$i];rename joint1 ("R_"+$nm[$i]+"_ACLV_JNT");}progressWindow -e -st ("Progress : "+(41*100/41)+" %") -pr (41*100/41);refresh;select -cl;}progressWindow -endProgress;group -em -n"BN_JNT_GRP";$nm={"Root_R","Tail_1","L_W_B_1","R_W_B_1","L_W_M_1","R_W_M_1","L_W_T_1","R_W_T_1","L_Sen_1","R_Sen_1","L_Ear_1","R_Ear_1","Vac_1","L_Eye_1","R_Eye_1","Jaw_1","Neck_B","L_H_T_1","R_H_T_1","L_H_I_1","R_H_I_1","L_H_M_1","R_H_M_1","L_H_R_1","R_H_R_1","L_H_P_1","R_H_P_1"	,"L_F_T_1","R_F_T_1","L_F_I_1","R_F_I_1","L_F_M_1","R_F_M_1","L_F_R_1","R_F_R_1","L_F_P_1","R_F_P_1","L_Hip","R_Hip","L_Clavicle_B","R_Clavicle_B"};string $name;for ($i=0;$i<size($nm);$i++){if (`objExists ($nm[$i]+"_BN_JNT")`) parent ($nm[$i]+"_BN_JNT") BN_JNT_GRP;}select -cl;}//*************************************************************************************************************//*********************************************  Joint Cont Win  **********************************************//*************************************************************************************************************global proc css_adset_jnt_cntr (){if (`window -exists ADSET_CNTR`) deleteUI ADSET_CNTR;int $t;window -t"body part counter" ADSET_CNTR;columnLayout -adj 1;intSliderGrp -l"HN FN" -min 2 -max 7 -field 1 -fmn 2 -fmx 7 -v 4 -cw 2 30 -cw 1 50 adset_hnfn_cntr;intSliderGrp -l"LG FN" -min 2 -max 7 -field 1 -fmn 2 -fmx 7 -v 4 -cw 2 30 -cw 1 50 adset_lgfn_cntr;intSliderGrp -l"Ear" -min 4 -max 15 -field 1 -fmn 4 -fmx 15 -v 4 -cw 2 30 -cw 1 50 adset_ear_cntr;intSliderGrp -l"Tail" -min 4 -max 15 -field 1 -fmn 4 -fmx 15 -v 4 -cw 2 30 -cw 1 50 adset_tail_cntr;intSliderGrp -l"Wing 1" -min 4 -max 15 -field 1 -fmn 4 -fmx 15 -v 4 -cw 2 30 -cw 1 50 adset_wn1_cntr;intSliderGrp -l"Wing 2" -min 4 -max 15 -field 1 -fmn 4 -fmx 15 -v 4 -cw 2 30 -cw 1 50 adset_wn2_cntr;intSliderGrp -l"Wing 3" -min 4 -max 15 -field 1 -fmn 4 -fmx 15 -v 4 -cw 2 30 -cw 1 50 adset_wn3_cntr;intSliderGrp -l"Sensor" -min 4 -max 15 -field 1 -fmn 4 -fmx 15 -v 4 -cw 2 30 -cw 1 50 adset_sens_cntr;intSliderGrp -l"Vacum" -min 4 -max 15 -field 1 -fmn 4 -fmx 15 -v 4 -cw 2 30 -cw 1 50 adset_vac_cntr;button -l"Create Joints" -c"css_adset_jnt_crt";button -l"Create Orientation Helpers" -c"css_adset_jnt_ori";button -l"Finalize Orientation" -c"css_adset_fin_ori";showWindow ADSET_CNTR;window -e -wh 245 300 ADSET_CNTR;int $ch1=`checkBox -q -v adset_ffing_bx`;int $ch2=`intSliderGrp -q -v adset_fin_num`;int $ch3=`checkBox -q -v adset_ear_bx`;int $ch4=`checkBox -q -v adset_sens_bx`;int $ch5=`checkBox -q -v adset_vac_bx`;int $ch6=`checkBox -q -v adset_tail_bx`;int $ch7=`checkBox -q -v adset_wing_bx`;if ($ch2==0) intSliderGrp -e -en 0 -vis 0 adset_hnfn_cntr;intSliderGrp -e -en $ch1 -vis $ch1 adset_lgfn_cntr;intSliderGrp -e -en $ch3 -vis $ch3 adset_ear_cntr;intSliderGrp -e -en $ch6 -vis $ch6 adset_tail_cntr;intSliderGrp -e -en $ch7 -vis $ch7 adset_wn1_cntr;intSliderGrp -e -en $ch7 -vis $ch7 adset_wn2_cntr;intSliderGrp -e -en $ch7 -vis $ch7 adset_wn3_cntr;intSliderGrp -e -en $ch4 -vis $ch4 adset_sens_cntr;intSliderGrp -e -en $ch5 -vis $ch5 adset_vac_cntr;if ($ch2==0){$t=`window -q -h ADSET_CNTR`;window -e -wh 245 ($t-22) ADSET_CNTR;}if (!`checkBox -q -v adset_ffing_bx`){$t=`window -q -h ADSET_CNTR`;window -e -wh 245 ($t-22) ADSET_CNTR;}if (!`checkBox -q -v adset_wing_bx`){$t=`window -q -h ADSET_CNTR`;window -e -wh 245 ($t-66) ADSET_CNTR;}if (!`checkBox -q -v adset_tail_bx`){$t=`window -q -h ADSET_CNTR`;window -e -wh 245 ($t-22) ADSET_CNTR;}if (!`checkBox -q -v adset_vac_bx`){$t=`window -q -h ADSET_CNTR`;window -e -wh 245 ($t-22) ADSET_CNTR;}if (!`checkBox -q -v adset_sens_bx`){$t=`window -q -h ADSET_CNTR`;window -e -wh 245 ($t-22) ADSET_CNTR;}if (!`checkBox -q -v adset_ear_bx`){$t=`window -q -h ADSET_CNTR`;window -e -wh 245 ($t-22) ADSET_CNTR;}}//*************************************************************************************************************//*********************************************Mirror Right To Left********************************************//*************************************************************************************************************global proc adset_mir_r_2_l (){string $tmp[];$tmp=`ls -sl`;if (size($tmp)==0){if (`objExists "R_*_Lc_TMP"`) select "R_*_Lc_TMP";$tmp=`ls -sl`;}select -cl;string $wrd;if (size($tmp)>0){for ($i=0;$i<size($tmp);$i++){if (startString($tmp[$i], 2)!="R_") break;$wrd=endString ($tmp[$i],(size($tmp[$i]))-1);setAttr ("L"+$wrd+".tx") (-1*`getAttr ("R"+$wrd+".tx")`);setAttr ("L"+$wrd+".ty") (`getAttr ("R"+$wrd+".ty")`);setAttr ("L"+$wrd+".tz") (`getAttr ("R"+$wrd+".tz")`);setAttr ("L"+$wrd+".rx") (`getAttr ("R"+$wrd+".rx")`);setAttr ("L"+$wrd+".ry") (-1*`getAttr ("R"+$wrd+".ry")`);setAttr ("L"+$wrd+".rz") (-1*`getAttr ("R"+$wrd+".rz")`);refresh;}}}//*************************************************************************************************************//*********************************************Mirror Left to Right********************************************//*************************************************************************************************************global proc adset_mir_l_2_r (){string $tmp[];$tmp=`ls -sl`;if (size($tmp)==0){if (`objExists "L_*_Lc_TMP"`) select "L_*_Lc_TMP";$tmp=`ls -sl`;}select -cl;string $wrd;if (size($tmp)>0){for ($i=0;$i<size($tmp);$i++){if (startString($tmp[$i],2)!="L_") break;$wrd=endString ($tmp[$i],(size($tmp[$i]))-1);setAttr ("R"+$wrd+".tx") (-1*`getAttr ("L"+$wrd+".tx")`);setAttr ("R"+$wrd+".ty") (`getAttr ("L"+$wrd+".ty")`);setAttr ("R"+$wrd+".tz") (`getAttr ("L"+$wrd+".tz")`);setAttr ("R"+$wrd+".rx") (`getAttr ("L"+$wrd+".rx")`);setAttr ("R"+$wrd+".ry") (-1*`getAttr ("L"+$wrd+".ry")`);setAttr ("R"+$wrd+".rz") (-1*`getAttr ("L"+$wrd+".rz")`);refresh;}}}//*************************************************************************************************************//*********************************************Create Locator system*******************************************//*************************************************************************************************************global proc css_adset_lc_crt(){setObjectPickMask "Other" true;int $ftv,$hnv,$hdv,$erv,$snv,$vcv,$tlv,$wnv,$hfv,$ffv,$fn;$ftv=`checkBox -q -v adset_foot_bx`;$hnv=`checkBox -q -v adset_hand_bx`;$hdv=`checkBox -q -v adset_head_bx`;$erv=`checkBox -q -v adset_ear_bx`;$snv=`checkBox -q -v adset_sens_bx`;$vcv=`checkBox -q -v adset_vac_bx`;$tlv=`checkBox -q -v adset_tail_bx`;$wnv=`checkBox -q -v adset_wing_bx`;$hfv=`checkBox -q -v adset_hfing_bx`;$ffv=`checkBox -q -v adset_ffing_bx`;$fn=`intSliderGrp -q -v adset_fin_num`;float $bpy[];string $nm[],$tmp[],$tp;$bpy={8.3,9.8,11.1,12.1,13.4,14.5};$nm={"Root_T","Root_R","Spine_1","Spine_2","Spine_3","Clav_B"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move 0 $bpy[$i] 0 $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ($nm[$i]+"_Lc_TMP");if ($i>0) parent ($nm[$i]+"_Lc_TMP") ($nm[$i-1]+"_Lc_TMP");}$tp=`curve -d 5 -p 0 8.3 0 -p 0 9.54 0 -p 0 10.78 0 -p 0 12.02 0 -p 0 13.26 0 -p 0 14.5 0 -k 0 -k 0 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 1 -k 1`;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ($nm[$i]+"_Cls_TMP_#")`;parent ($nm[$i]+"_Cls_TMP_*Handle") ($nm[$i]+"_Lc_TMP");}rename $tp ("Body_Crv");hide "*_Cls_TMP*";showHidden "*_Crv";refresh;if ($hnv){float $lpx[],$lpz[];string $nm[],$tmp[],$tp,$cp;$lpx={.4,1.43,2.08,4.51,6.03,7.13};$lpz={.3,.11,-.5,-.6,-.6,-.6};$nm={"Clavicle_B","Clavicle_E","Shoulder","Elbow","Forearm","Wrist"};for ($i=0;$i<size($lpx);$i++){$tmp=`spaceLocator `;move $lpx[$i] 14 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_"+$nm[$i]+"_Lc_TMP");if ($i>0) parent ("L_"+$nm[$i]+"_Lc_TMP") ("L_"+$nm[$i-1]+"_Lc_TMP");if ($i==0) parent ("L_"+$nm[$i]+"_Lc_TMP") ("Clav_B_Lc_TMP");if ($i>0){$tp=`curve -d 1 -p $lpx[$i-1] 14 $lpz[$i-1] -p $lpx[$i] 14 $lpz[$i] -k 0 -k 1`;select -r ($tp+".cv[0]");$tmp=`cluster -n ("L_"+$nm[$i-1]+"_Cls_TMP_#")` ;select -r ($tp+".cv[1]");$tmp=`cluster -n ("L_"+$nm[$i]+"_Cls_TMP_#")`;parent ("L_"+$nm[$i-1]+"_Cls_TMP_1*Handle") ("L_"+$nm[$i-1]+"_Lc_TMP");if (`objExists ("L_"+$nm[$i]+"_Cls_TMP_2*")`)parent ("L_"+$nm[$i]+"_Cls_TMP_2*Handle") ("L_"+$nm[$i]+"_Lc_TMP");if (`objExists ("L_"+$nm[$i-1]+"_Cls_TMP_2*")`)parent ("L_"+$nm[$i-1]+"_Cls_TMP_2*Handle") ("L_"+$nm[$i-1]+"_Lc_TMP");rename $tp ("L_"+$nm[$i-1]+"_Crv");hide "*_Cls_TMP*";showHidden "*_Crv";refresh;}}for ($i=0;$i<size($lpx);$i++){$tmp=`spaceLocator `;move (-1*$lpx[$i]) 14 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_"+$nm[$i]+"_Lc_TMP");if ($i>0) parent ("R_"+$nm[$i]+"_Lc_TMP") ("R_"+$nm[$i-1]+"_Lc_TMP");if ($i==0) parent ("R_"+$nm[$i]+"_Lc_TMP") ("Clav_B_Lc_TMP");if ($i>0){$tp=`curve -d 1 -p (-1*$lpx[$i-1]) 14 $lpz[$i-1] -p (-1*$lpx[$i]) 14 $lpz[$i] -k 0 -k 1`;select -r ($tp+".cv[0]");$tmp=`cluster -n ("R_"+$nm[$i-1]+"_Cls_TMP_#")` ;select -r ($tp+".cv[1]");$tmp=`cluster -n ("R_"+$nm[$i]+"_Cls_TMP_#")`;parent ("R_"+$nm[$i-1]+"_Cls_TMP_1*Handle") ("R_"+$nm[$i-1]+"_Lc_TMP");if (`objExists ("R_"+$nm[$i]+"_Cls_TMP_2*")`)parent ("R_"+$nm[$i]+"_Cls_TMP_2*Handle") ("R_"+$nm[$i]+"_Lc_TMP");if (`objExists ("R_"+$nm[$i-1]+"_Cls_TMP_2*")`)parent ("R_"+$nm[$i-1]+"_Cls_TMP_2*Handle") ("R_"+$nm[$i-1]+"_Lc_TMP");rename $tp ("R_"+$nm[$i-1]+"_Crv");hide "*_Cls_TMP*";showHidden "*_Crv";refresh;}}parent "L_Wrist_Cls_TMP_1Handle" "L_Wrist_Lc_TMP";parent "R_Wrist_Cls_TMP_1Handle" "R_Wrist_Lc_TMP";}if ($hdv){float $lpx[],$lpy[],$lpz[];string $nm[],$tmp[],$tp,$cp;$lpy={15.0,15.4,16.0,17.0,17.8};$nm={"Neck_B","Neck_M","Head_B","Head_M","Head_T"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move 0 $lpy[$i] -0.4 $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ($nm[$i]+"_Lc_TMP");if ($i>0) parent ($nm[$i]+"_Lc_TMP") ($nm[$i-1]+"_Lc_TMP");}$tp=`curve -d 1 -p 0 15 -0.4 -p 0 15.402154 -0.4 -p 0 16 -0.4 -p 0 17 -0.4 -p 0 17.8 -0.4 -k 0 -k 1 -k 2 -k 3 -k 4`;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ($nm[$i]+"_Cls_TMP_#")`;parent ($nm[$i]+"_Cls_TMP_*Handle") ($nm[$i]+"_Lc_TMP");}rename $tp ("Head_Crv");parent "Neck_B_Lc_TMP" "Clav_B_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;$lpy={16.36,15.73};$lpz={0.06,.85};$nm={"Jaw_B","Jaw_E"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move 0 $lpy[$i] $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ($nm[$i]+"_Lc_TMP");if ($i>0) parent ($nm[$i]+"_Lc_TMP") ($nm[$i-1]+"_Lc_TMP");}$tp=`curve -d 1 -p 0 16.36 0.06 -p 0 15.73 .85 -k 0 -k 1 `;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ($nm[$i]+"_Cls_TMP_#")`;parent ($nm[$i]+"_Cls_TMP_*Handle") ($nm[$i]+"_Lc_TMP");}rename $tp ("Jaw_Crv");parent "Jaw_B_Lc_TMP" "Head_M_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;$lpz={0.57,.76};$nm={"Eye_B","Eye_E"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move 0.26 17 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_"+$nm[$i]+"_Lc_TMP");if ($i>0) parent ("L_"+$nm[$i]+"_Lc_TMP") ("L_"+$nm[$i-1]+"_Lc_TMP");}$tp=`curve -d 1 -p 0.26 17 0.57 -p 0.26 17 .76 -k 0 -k 1 `;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("L_"+$nm[$i]+"_Cls_TMP_#")`;parent ("L_"+$nm[$i]+"_Cls_TMP_*Handle") ("L_"+$nm[$i]+"_Lc_TMP");}rename $tp "L_Eye_Crv";parent "L_Eye_B_Lc_TMP" "Head_M_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move -0.26 17 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_"+$nm[$i]+"_Lc_TMP");if ($i>0) parent ("R_"+$nm[$i]+"_Lc_TMP") ("R_"+$nm[$i-1]+"_Lc_TMP");}$tp=`curve -d 1 -p -0.26 17 0.57 -p -0.26 17 .76 -k 0 -k 1 `;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("R_"+$nm[$i]+"_Cls_TMP_#")`;parent ("R_"+$nm[$i]+"_Cls_TMP_*Handle") ("R_"+$nm[$i]+"_Lc_TMP");}rename $tp "R_Eye_Crv";parent "R_Eye_B_Lc_TMP" "Head_M_Lc_TMP";}hide "*_Cls_TMP*";showHidden "*_Crv";refresh;if ($erv){float $lpx[],$lpy[];string $nm[],$tmp[],$tp,$cp;$lpx={.88,1.38,1.88,2.38};$lpy={17.88,18.38,18.88,19.38};$nm={"Ear_1","Ear_2","Ear_3","Ear_4"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move $lpx[$i] $lpy[$i] -0.6 $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_"+$nm[$i]+"_Lc_TMP");if ($i>0) parent ("L_"+$nm[$i]+"_Lc_TMP") ("L_"+$nm[$i-1]+"_Lc_TMP");}hide "*_Cls_TMP*";showHidden "*_Crv";refresh;for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move (-1*$lpx[$i]) $lpy[$i] -0.6 $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_"+$nm[$i]+"_Lc_TMP");if ($i>0) parent ("R_"+$nm[$i]+"_Lc_TMP") ("R_"+$nm[$i-1]+"_Lc_TMP");}$tp=`curve -d 3 -p 0.885543 17.881062 -0.6 -p 1.385543 18.381062 -0.6 -p 1.885543 18.881062 -0.6 -p 2.385543 19.381062 -0.6 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("L_"+$nm[$i]+"_Cls_TMP_#")`;parent ("L_"+$nm[$i]+"_Cls_TMP_*Handle") ("L_"+$nm[$i]+"_Lc_TMP");}rename $tp ("L_Ear_Crv");hide "*_Cls_TMP*";showHidden "*_Crv";refresh;$tp=`curve -d 3 -p -0.885543 17.881062 -0.6 -p -1.385543 18.381062 -0.6 -p -1.885543 18.881062 -0.6 -p -2.385543 19.381062 -0.6 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("R_"+$nm[$i]+"_Cls_TMP_#")`;parent ("R_"+$nm[$i]+"_Cls_TMP_*Handle") ("R_"+$nm[$i]+"_Lc_TMP");}rename $tp ("R_Ear_Crv");parent "L_Ear_1_Lc_TMP" "Head_T_Lc_TMP";parent "R_Ear_1_Lc_TMP" "Head_T_Lc_TMP";}hide "*_Cls_TMP*";showHidden "*_Crv";refresh;if ($snv){float $lpy[];string $nm[],$tmp[],$tp,$cp;$lpy={18.4,19.6,20.8,22};$nm={"Sen_1","Sen_2","Sen_3","Sen_4"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move .5 $lpy[$i] .3 $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_"+$nm[$i]+"_Lc_TMP");if ($i>0) parent ("L_"+$nm[$i]+"_Lc_TMP") ("L_"+$nm[$i-1]+"_Lc_TMP");}hide "*_Cls_TMP*";showHidden "*_Crv";refresh;for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move -.5 $lpy[$i] .3 $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_"+$nm[$i]+"_Lc_TMP");if ($i>0) parent ("R_"+$nm[$i]+"_Lc_TMP") ("R_"+$nm[$i-1]+"_Lc_TMP");}$tp=`curve -d 3 -p 0.5 18.406185 0.3 -p 0.5 19.604443 0.3 -p 0.5 20.802701 0.3 -p 0.5 22.000959 0.3 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("L_"+$nm[$i]+"_Cls_TMP_#")`;parent ("L_"+$nm[$i]+"_Cls_TMP_*Handle") ("L_"+$nm[$i]+"_Lc_TMP");}rename $tp ("L_Sen_Crv");hide "*_Cls_TMP*";showHidden "*_Crv";refresh;$tp=`curve -d 3 -p -0.5 18.406185 0.3 -p -0.5 19.604443 0.3 -p -0.5 20.802701 0.3 -p -0.5 22.000959 0.3 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("R_"+$nm[$i]+"_Cls_TMP_#")`;parent ("R_"+$nm[$i]+"_Cls_TMP_*Handle") ("R_"+$nm[$i]+"_Lc_TMP");}rename $tp ("R_Sen_Crv");parent "L_Sen_1_Lc_TMP" "Head_T_Lc_TMP";parent "R_Sen_1_Lc_TMP" "Head_T_Lc_TMP";}hide "*_Cls_TMP*";showHidden "*_Crv";refresh;if ($vcv){float $lpz[];string $nm[],$tmp[],$tp,$cp;$lpz={1.55,2.95,4.35,5.76};$nm={"Vac_1","Vac_2","Vac_3","Vac_4"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move 0 15.7 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ($nm[$i]+"_Lc_TMP");if ($i>0) parent ($nm[$i]+"_Lc_TMP") ($nm[$i-1]+"_Lc_TMP");}$tp=`curve -d 3 -p 2.31217e-006 15.7 1.549307 -p 2.31217e-006 15.7 2.952395 -p 2.31217e-006 15.7 4.355484 -p 2.31217e-006 15.7 5.758572 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ($nm[$i]+"_Cls_TMP_#")`;parent ($nm[$i]+"_Cls_TMP_*Handle") ($nm[$i]+"_Lc_TMP");}rename $tp ("Vac_Crv");parent "Vac_1_Lc_TMP" "Jaw_E_Lc_TMP";}hide "*_Cls_TMP*";showHidden "*_Crv";refresh;if ($tlv){float $lpz[];string $nm[],$tmp[],$tp,$cp;$lpz={-2.06,-5.98,-9.89,-13.82};$nm={"Tail_1","Tail_2","Tail_3","Tail_4"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move 0 8.87 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ($nm[$i]+"_Lc_TMP");if ($i>0) parent ($nm[$i]+"_Lc_TMP") ($nm[$i-1]+"_Lc_TMP");}$tp=`curve -d 3 -p 2.31217e-006 8.867632 -2.063093 -p 2.31217e-006 8.867632 -5.980747 -p 2.31217e-006 8.867632 -9.898401 -p 2.31217e-006 8.867632 -13.816055 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($nm);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ($nm[$i]+"_Cls_TMP_#")`;parent ($nm[$i]+"_Cls_TMP_*Handle") ($nm[$i]+"_Lc_TMP");}rename $tp ("Tail_Crv");parent "Tail_1_Lc_TMP" "Root_R_Lc_TMP";}hide "*_Cls_TMP*";showHidden "*_Crv";refresh;if ($wnv){float $lpx[],$lpz[];string $nm[],$tmp[],$tp,$cp;$lpx={.96,3,5.2,7.3};$lpz={-1.7,-3.8,-5.9,-8};for ($i=0;$i<size($lpx);$i++){$tmp=`spaceLocator`;move $lpx[$i] 15 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_Wing_T_"+($i+1)+"_Lc_TMP");if ($i>0) parent ("L_Wing_T_"+($i+1)+"_Lc_TMP") ("L_Wing_T_"+$i+"_Lc_TMP");}$tp=`curve -d 3 -p 0.961561 15 -1.705021 -p 3.075893 15 -3.819353 -p 5.190225 15 -5.933685 -p 7.304557 15 -8.048017 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($lpx);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("L_Wing_T_"+($i+1)+"_Cls_TMP_#")`;parent ("L_Wing_T_"+($i+1)+"_Cls_TMP_*Handle") ("L_Wing_T_"+($i+1)+"_Lc_TMP");}rename $tp ("L_Wing_T_Crv");parent "L_Wing_T_1_Lc_TMP" "Clav_B_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;for ($i=0;$i<size($lpx);$i++){$tmp=`spaceLocator`;move (-1*$lpx[$i]) 15 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_Wing_T_"+($i+1)+"_Lc_TMP");if ($i>0) parent ("R_Wing_T_"+($i+1)+"_Lc_TMP") ("R_Wing_T_"+$i+"_Lc_TMP");}$tp=`curve -d 3 -p -0.961561 15 -1.705021 -p -3.075893 15 -3.819353 -p -5.190225 15 -5.933685 -p -7.304557 15 -8.048017 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($lpx);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("R_Wing_T_"+($i+1)+"_Cls_TMP_#")`;parent ("R_Wing_T_"+($i+1)+"_Cls_TMP_*Handle") ("R_Wing_T_"+($i+1)+"_Lc_TMP");}rename $tp ("R_Wing_T_Crv");parent "R_Wing_T_1_Lc_TMP" "Clav_B_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;float $lpx[],$lpz[];string $nm[],$tmp[],$tp,$cp;$lpx={.96,3,5.2,7.3};$lpz={-1.7,-3.8,-5.9,-8};for ($i=0;$i<size($lpx);$i++){$tmp=`spaceLocator`;move $lpx[$i] 12 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_Wing_M_"+($i+1)+"_Lc_TMP");if ($i>0) parent ("L_Wing_M_"+($i+1)+"_Lc_TMP") ("L_Wing_M_"+$i+"_Lc_TMP");}$tp=`curve -d 3 -p 0.961561 12 -1.705021 -p 3.075893 12 -3.819353 -p 5.190225 12 -5.933685 -p 7.304557 12 -8.048017 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($lpx);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("L_Wing_M_"+($i+1)+"_Cls_TMP_#")`;parent ("L_Wing_M_"+($i+1)+"_Cls_TMP_*Handle") ("L_Wing_M_"+($i+1)+"_Lc_TMP");}rename $tp ("L_Wing_M_Crv");parent "L_Wing_M_1_Lc_TMP" "Spine_2_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;for ($i=0;$i<size($lpx);$i++){$tmp=`spaceLocator`;move (-1*$lpx[$i]) 12 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_Wing_M_"+($i+1)+"_Lc_TMP");if ($i>0) parent ("R_Wing_M_"+($i+1)+"_Lc_TMP") ("R_Wing_M_"+$i+"_Lc_TMP");}$tp=`curve -d 3 -p -0.961561 12 -1.705021 -p -3.075893 12 -3.819353 -p -5.190225 12 -5.933685 -p -7.304557 12 -8.048017 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($lpx);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("R_Wing_M_"+($i+1)+"_Cls_TMP_#")`;parent ("R_Wing_M_"+($i+1)+"_Cls_TMP_*Handle") ("R_Wing_M_"+($i+1)+"_Lc_TMP");}rename $tp ("R_Wing_M_Crv");parent "R_Wing_M_1_Lc_TMP" "Spine_2_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;float $lpx[],$lpz[];string $nm[],$tmp[],$tp,$cp;$lpx={.96,3,5.2,7.3};$lpz={-1.7,-3.8,-5.9,-8};for ($i=0;$i<size($lpx);$i++){$tmp=`spaceLocator`;move $lpx[$i] 10 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_Wing_B_"+($i+1)+"_Lc_TMP");if ($i>0) parent ("L_Wing_B_"+($i+1)+"_Lc_TMP") ("L_Wing_B_"+$i+"_Lc_TMP");}$tp=`curve -d 3 -p 0.961561 10 -1.705021 -p 3.075893 10 -3.819353 -p 5.190225 10 -5.933685 -p 7.304557 10 -8.048017 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($lpx);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("L_Wing_B_"+($i+1)+"_Cls_TMP_#")`;parent ("L_Wing_B_"+($i+1)+"_Cls_TMP_*Handle") ("L_Wing_B_"+($i+1)+"_Lc_TMP");}rename $tp ("L_Wing_B_Crv");parent "L_Wing_B_1_Lc_TMP" "Spine_1_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;for ($i=0;$i<size($lpx);$i++){$tmp=`spaceLocator`;move (-1*$lpx[$i]) 10 $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_Wing_B_"+($i+1)+"_Lc_TMP");if ($i>0) parent ("R_Wing_B_"+($i+1)+"_Lc_TMP") ("R_Wing_B_"+$i+"_Lc_TMP");}$tp=`curve -d 3 -p -0.961561 10 -1.705021 -p -3.075893 10 -3.819353 -p -5.190225 10 -5.933685 -p -7.304557 10 -8.048017 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1`;for ($i=0;$i<size($lpx);$i++){select -r ($tp+".cv["+$i+"]");$tmp=`cluster -n ("R_Wing_B_"+($i+1)+"_Cls_TMP_#")`;parent ("R_Wing_B_"+($i+1)+"_Cls_TMP_*Handle") ("R_Wing_B_"+($i+1)+"_Lc_TMP");}rename $tp ("R_Wing_B_Crv");parent "R_Wing_B_1_Lc_TMP" "Spine_1_Lc_TMP";}hide "*_Cls_TMP*";showHidden "*_Crv";refresh;if ($hfv){float $fpx[],$fpz[];string $nm[],$tmp[],$tp;$fpx={7.88,8.17,8.46,8.2,8.63,9.05,8.2,8.67,9.13,8.2,8.6,9.0,8.2,8.5,8.8};$fpz={-.06,.03,.12,-.28,-.34,-.39,-.6,-.61,-.62,-.8,-.8,-.8,-.96,-.98,-1.0};$nm={"Thumb_B","Thumb_M","Thumb_E","Index_B","Index_M","Index_E","Middle_B","Middle_M","Middle_E","Ring_B","Ring_M","Ring_E","Pinky_B","Pinky_M","Pinky_E"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move $fpx[$i] 14 $fpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_Hand_"+$nm[$i]+"_Lc_TMP");}for ($i=1;$i<size($nm);$i+=3){$tp=`curve -d 2 -p $fpx[$i-1] 14 $fpz[$i-1] -p $fpx[$i] 14 $fpz[$i] -p $fpx[$i+1] 14 $fpz[$i+1] -k 0 -k 0 -k 1 -k 1`;select -r ($tp+".cv[0]");$tmp=`cluster -n ("L_Hand_"+$nm[$i-1]+"_Cls_TMP")`;parent ("L_Hand_"+$nm[$i-1]+"_Cls_TMPHandle") ("L_Hand_"+$nm[$i-1]+"_Lc_TMP");select -r ($tp+".cv[1]");$tmp=`cluster -n ("L_Hand_"+$nm[$i]+"_Cls_TMP")`;parent ("L_Hand_"+$nm[$i]+"_Cls_TMPHandle") ("L_Hand_"+$nm[$i]+"_Lc_TMP");select -r ($tp+".cv[2]");$tmp=`cluster -n ("L_Hand_"+$nm[$i+1]+"_Cls_TMP")`;parent ("L_Hand_"+$nm[$i+1]+"_Cls_TMPHandle") ("L_Hand_"+$nm[$i+1]+"_Lc_TMP");rename $tp ("L_Hand_"+$nm[$i-1]+"_Crv");parent ("L_Hand_"+$nm[$i]+"_Lc_TMP") ("L_Hand_"+$nm[$i-1]+"_Lc_TMP");parent ("L_Hand_"+$nm[$i+1]+"_Lc_TMP") ("L_Hand_"+$nm[$i]+"_Lc_TMP");parent ("L_Hand_"+$nm[$i-1]+"_Lc_TMP") "L_Wrist_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;}for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move ($fpx[$i]*-1) 14 $fpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_Hand_"+$nm[$i]+"_Lc_TMP");}for ($i=1;$i<size($nm);$i+=3){$tp=`curve -d 2 -p ($fpx[$i-1]*-1) 14 $fpz[$i-1] -p ($fpx[$i]*-1) 14 $fpz[$i] -p ($fpx[$i+1]*-1) 14 $fpz[$i+1] -k 0 -k 0 -k 1 -k 1`;select -r ($tp+".cv[0]");$tmp=`cluster -n ("R_Hand_"+$nm[$i-1]+"_Cls_TMP")`;parent ("R_Hand_"+$nm[$i-1]+"_Cls_TMPHandle") ("R_Hand_"+$nm[$i-1]+"_Lc_TMP");select -r ($tp+".cv[1]");$tmp=`cluster -n ("R_Hand_"+$nm[$i]+"_Cls_TMP")`;parent ("R_Hand_"+$nm[$i]+"_Cls_TMPHandle") ("R_Hand_"+$nm[$i]+"_Lc_TMP");select -r ($tp+".cv[2]");$tmp=`cluster -n ("R_Hand_"+$nm[$i+1]+"_Cls_TMP")`;parent ("R_Hand_"+$nm[$i+1]+"_Cls_TMPHandle") ("R_Hand_"+$nm[$i+1]+"_Lc_TMP");rename $tp ("R_Hand_"+$nm[$i-1]+"_Crv");parent ("R_Hand_"+$nm[$i]+"_Lc_TMP") ("R_Hand_"+$nm[$i-1]+"_Lc_TMP");parent ("R_Hand_"+$nm[$i+1]+"_Lc_TMP") ("R_Hand_"+$nm[$i]+"_Lc_TMP");parent ("R_Hand_"+$nm[$i-1]+"_Lc_TMP") "R_Wrist_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;}}if ($ftv){float $lpy[],$lpz[];string $nm[],$tmp[],$tp,$cp;$lpy={9.5,4.6,1.3,.5,.3,0};$lpz={-.7,-.4,-.7,0,1.3,-1.25};$nm={"Hip","Knee","Ball","Toe","Toe_end","Heel"};for ($i=0;$i<size($lpy);$i++){$tmp=`spaceLocator `;move 1 $lpy[$i] $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_"+$nm[$i]+"_Lc_TMP");if ($nm[$i]!="Heel" && $i>0) parent ("L_"+$nm[$i]+"_Lc_TMP") ("L_"+$nm[$i-1]+"_Lc_TMP");if ($nm[$i]=="Heel" && $i>0) parent ("L_"+$nm[$i]+"_Lc_TMP") ("L_"+$nm[2]+"_Lc_TMP");if ($i>0){$tp=`curve -d 1 -p 1 $lpy[$i-1] $lpz[$i-1] -p 1 $lpy[$i] $lpz[$i] -k 0 -k 1`;select -r ($tp+".cv[0]");$tmp=`cluster -n ("L_"+$nm[$i-1]+"_Cls_TMP_#")` ;select -r ($tp+".cv[1]");$tmp=`cluster -n ("L_"+$nm[$i]+"_Cls_TMP_#")`;parent ("L_"+$nm[$i-1]+"_Cls_TMP_1*Handle") ("L_"+$nm[$i-1]+"_Lc_TMP");if (`objExists ("L_"+$nm[$i]+"_Cls_TMP_2*")`)parent ("L_"+$nm[$i]+"_Cls_TMP_2*Handle") ("L_"+$nm[$i]+"_Lc_TMP");if (`objExists ("L_"+$nm[$i-1]+"_Cls_TMP_2*")`)parent ("L_"+$nm[$i-1]+"_Cls_TMP_2*Handle") ("L_"+$nm[$i-1]+"_Lc_TMP");rename $tp ("L_"+$nm[$i-1]+"_Crv");hide "*_Cls_TMP*";showHidden "*_Crv";refresh;}}parent "L_Heel_Cls_TMP_1Handle" "L_Heel_Lc_TMP";for ($i=0;$i<size($lpy);$i++){$tmp=`spaceLocator `;move -1 $lpy[$i] $lpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_"+$nm[$i]+"_Lc_TMP");if ($nm[$i]!="Heel" && $i>0) parent ("R_"+$nm[$i]+"_Lc_TMP") ("R_"+$nm[$i-1]+"_Lc_TMP");if ($nm[$i]=="Heel" && $i>0) parent ("R_"+$nm[$i]+"_Lc_TMP") ("R_"+$nm[2]+"_Lc_TMP");if ($i>0){$tp=`curve -d 1 -p -1 $lpy[$i-1] $lpz[$i-1] -p -1 $lpy[$i] $lpz[$i] -k 0 -k 1`;select -r ($tp+".cv[0]");$tmp=`cluster -n ("R_"+$nm[$i-1]+"_Cls_TMP_#")` ;select -r ($tp+".cv[1]");$tmp=`cluster -n ("R_"+$nm[$i]+"_Cls_TMP_#")`;parent ("R_"+$nm[$i-1]+"_Cls_TMP_1*Handle") ("R_"+$nm[$i-1]+"_Lc_TMP");if (`objExists ("R_"+$nm[$i]+"_Cls_TMP_2*")`)parent ("R_"+$nm[$i]+"_Cls_TMP_2*Handle") ("R_"+$nm[$i]+"_Lc_TMP");if (`objExists ("R_"+$nm[$i-1]+"_Cls_TMP_2*")`)parent ("R_"+$nm[$i-1]+"_Cls_TMP_2*Handle") ("R_"+$nm[$i-1]+"_Lc_TMP");rename $tp ("R_"+$nm[$i-1]+"_Crv");hide "*_Cls_TMP*";showHidden "*_Crv";refresh;}}parent "R_Heel_Cls_TMP_1Handle" "R_Heel_Lc_TMP";parent "L_Hip_Lc_TMP" "Root_R_Lc_TMP";parent "R_Hip_Lc_TMP" "Root_R_Lc_TMP";}if ($ffv){float $fpx[],$fpz[];string $nm[],$tmp[],$tp;$fpx={1.8,1.8,2.15,2.15,2.45,2.45,2.69,2.69,2.92,2.92};$fpz={0.0,1.50,0.0,1.40,0.0,1.30,0.0,1.20,0.0,1.10};$nm={"Thumb_B","Thumb_E","Index_B","Index_E","Middle_B","Middle_E","Ring_B","Ring_E","Pinky_B","Pinky_E"};for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move $fpx[$i] .5 $fpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("L_Foot_"+$nm[$i]+"_Lc_TMP");}for ($i=1;$i<size($nm);$i+=2){$tp=`curve -d 1 -p $fpx[$i-1] .5 $fpz[$i-1] -p $fpx[$i] .5 $fpz[$i] -k 0 -k 1`;select -r ($tp+".cv[0]");$tmp=`cluster -n ("L_Foot_"+$nm[$i-1]+"_Cls_TMP")`;parent ("L_Foot_"+$nm[$i-1]+"_Cls_TMPHandle") ("L_Foot_"+$nm[$i-1]+"_Lc_TMP");select -r ($tp+".cv[1]");$tmp=`cluster -n ("L_Foot_"+$nm[$i]+"_Cls_TMP")`;parent ("L_Foot_"+$nm[$i]+"_Cls_TMPHandle") ("L_Foot_"+$nm[$i]+"_Lc_TMP");rename $tp ("L_Foot_"+$nm[$i-1]+"_Crv");parent ("L_Foot_"+$nm[$i]+"_Lc_TMP") ("L_Foot_"+$nm[$i-1]+"_Lc_TMP");parent ("L_Foot_"+$nm[$i-1]+"_Lc_TMP") "L_Heel_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;}for ($i=0;$i<size($nm);$i++){$tmp=`spaceLocator`;move ($fpx[$i]*-1) .5 $fpz[$i] $tmp[0];scale .3 .3 .3 $tmp[0];rename $tmp[0] ("R_Foot_"+$nm[$i]+"_Lc_TMP");}for ($i=1;$i<size($nm);$i+=2){$tp=`curve -d 1 -p ($fpx[$i-1]*-1) .5 $fpz[$i-1] -p ($fpx[$i]*-1) .5 $fpz[$i] -k 0 -k 1`;select -r ($tp+".cv[0]");$tmp=`cluster -n ("R_Foot_"+$nm[$i-1]+"_Cls_TMP")`;parent ("R_Foot_"+$nm[$i-1]+"_Cls_TMPHandle") ("R_Foot_"+$nm[$i-1]+"_Lc_TMP");select -r ($tp+".cv[1]");$tmp=`cluster -n ("R_Foot_"+$nm[$i]+"_Cls_TMP")`;parent ("R_Foot_"+$nm[$i]+"_Cls_TMPHandle") ("R_Foot_"+$nm[$i]+"_Lc_TMP");rename $tp ("R_Foot_"+$nm[$i-1]+"_Crv");parent ("R_Foot_"+$nm[$i]+"_Lc_TMP") ("R_Foot_"+$nm[$i-1]+"_Lc_TMP");parent ("R_Foot_"+$nm[$i-1]+"_Lc_TMP") "R_Heel_Lc_TMP";hide "*_Cls_TMP*";showHidden "*_Crv";refresh;}}select -r "*_Crv";$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){css_TD_LockUnlock ($tmp[$i],0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1 );select -cl;}select "*_Lc_TMP";$tmp=`ls -sl`;for ($i=0;$i<size($tmp);$i++){makeIdentity -a 1 -t 1 -r 1 -s 0 $tmp[$i];css_TD_LockUnlock ($tmp[$i],1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1 );select -cl;}group -em -n "HLP_TMP";parent "Root_T_Lc_TMP" "HLP_TMP";select -cl;group -em -n "Curve_TMP";parent "*_Crv" "Curve_TMP";group -em -n "Grp_TMP";parent "HLP_TMP" "Grp_TMP";parent "Curve_TMP" "Grp_TMP";css_TD_LockUnlock ("Curve_TMP",0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1 );css_TD_LockUnlock ("Grp_TMP",0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1 );css_adset_hlp 20;rename Circle_Arrow_Hlp_1 "Character_HLP";parentConstraint -mo Character_HLP HLP_TMP;scaleConstraint -mo Character_HLP HLP_TMP;select -cl;if ($hnv){clear $nm;if ($fn==1){$nm={"L_Hand_Index_B_Crv","L_Hand_Middle_B_Crv","L_Hand_Pinky_B_Crv","L_Hand_Ring_B_Crv",	"R_Hand_Index_B_Crv","R_Hand_Middle_B_Crv","R_Hand_Pinky_B_Crv","R_Hand_Ring_B_Crv",	"L_Hand_Index_B_Lc_TMP","L_Hand_Middle_B_Lc_TMP","L_Hand_Ring_B_Lc_TMP","L_Hand_Pinky_B_Lc_TMP",	"R_Hand_Index_B_Lc_TMP","R_Hand_Middle_B_Lc_TMP","R_Hand_Ring_B_Lc_TMP","R_Hand_Pinky_B_Lc_TMP"};}if ($fn==2){$nm={"L_Hand_Middle_B_Crv","L_Hand_Pinky_B_Crv","L_Hand_Ring_B_Crv",	"R_Hand_Middle_B_Crv","R_Hand_Pinky_B_Crv","R_Hand_Ring_B_Crv",	"L_Hand_Middle_B_Lc_TMP","L_Hand_Ring_B_Lc_TMP","L_Hand_Pinky_B_Lc_TMP",	"R_Hand_Middle_B_Lc_TMP","R_Hand_Ring_B_Lc_TMP","R_Hand_Pinky_B_Lc_TMP"};}if ($fn==3){$nm={"L_Hand_Pinky_B_Crv","L_Hand_Ring_B_Crv",	"R_Hand_Pinky_B_Crv","R_Hand_Ring_B_Crv",	"L_Hand_Ring_B_Lc_TMP","L_Hand_Pinky_B_Lc_TMP",	"R_Hand_Ring_B_Lc_TMP","R_Hand_Pinky_B_Lc_TMP"};}if ($fn==4){$nm={"L_Hand_Pinky_B_Crv",	"R_Hand_Pinky_B_Crv",	"L_Hand_Pinky_B_Lc_TMP",	"R_Hand_Pinky_B_Lc_TMP"};}if ($fn==0){$nm={"L_Hand_Thumb_B_Crv","L_Hand_Index_B_Crv","L_Hand_Middle_B_Crv","L_Hand_Pinky_B_Crv","L_Hand_Ring_B_Crv",	"R_Hand_Thumb_B_Crv","R_Hand_Index_B_Crv","R_Hand_Middle_B_Crv","R_Hand_Pinky_B_Crv","R_Hand_Ring_B_Crv",	"L_Hand_Thumb_B_Lc_TMP","L_Hand_Index_B_Lc_TMP","L_Hand_Middle_B_Lc_TMP","L_Hand_Ring_B_Lc_TMP","L_Hand_Pinky_B_Lc_TMP",	"R_Hand_Thumb_B_Lc_TMP","R_Hand_Index_B_Lc_TMP","R_Hand_Middle_B_Lc_TMP","R_Hand_Ring_B_Lc_TMP","R_Hand_Pinky_B_Lc_TMP"};}for ($i=0;$i<size($nm);$i++){if (`objExists $nm[$i]`) delete $nm[$i];}}css_adset_setup 21;}//*************************************************************************************************************//*********************************************   Colorization   **********************************************//*************************************************************************************************************global proc adset_colorize (){string $tmp[];select -cl;if (`objExists "L_*_Lc_TMP"`) select -add "L_*_Lc_TMP";if (`objExists "L_*_Crv"`) select -add "L_*_Crv";if (`objExists "L_*_JNT"`) select -add "L_*_JNT";if (`objExists "L_*_HLP"`) select -add "L_*_HLP";$tmp=`ls -sl`;int $v;$v=`colorIndexSliderGrp -q -value adset_l_int_sld`-1;for ($i=0;$i<size($tmp);$i++){setAttr ($tmp[$i]+".overrideEnabled") 1;setAttr ($tmp[$i]+".overrideColor") $v;}select -cl;if (`objExists "R_*_Lc_TMP"`) select -add "R_*_Lc_TMP";if (`objExists "R_*_Crv"`) select -add "R_*_Crv";if (`objExists "R_*_JNT"`) select -add "R_*_JNT";if (`objExists "R_*_HLP"`) select -add "R_*_HLP";$tmp=`ls -sl`;int $v;$v=`colorIndexSliderGrp -q -value adset_r_int_sld`-1;for ($i=0;$i<size($tmp);$i++){setAttr ($tmp[$i]+".overrideEnabled") 1;setAttr ($tmp[$i]+".overrideColor") $v;}select -cl;if (`objExists "*_Lc_TMP"`) select -add "*_Lc_TMP";if (`objExists "*_Crv"`) select -add "*_Crv";if (`objExists "*_JNT"`) select -add "*_JNT";if (`objExists "*_HLP"`) select -add "*_HLP";if (`objExists "L_*"`) select -d "L_*";if (`objExists "R_*"`) select -d "R_*";$tmp=`ls -sl`;int $v;$v=`colorIndexSliderGrp -q -value adset_c_int_sld`-1;for ($i=0;$i<size($tmp);$i++){setAttr ($tmp[$i]+".overrideEnabled") 1;setAttr ($tmp[$i]+".overrideColor") $v;}select -cl;}//*************************************************************************************************************//*********************************************Create Helper System********************************************//*************************************************************************************************************global proc string css_adset_hlp(int $n){string $tmp[],$tp,$tpp[],$ret;switch ($n){case 1:string $sel;$tmp=`ls -sl`;$sel=$tmp[0];$tpp[1]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[2]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[3]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[4]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[5]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[6]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;rotate 0 90 0 $tpp[2];rotate 0 180 0 $tpp[3];rotate 0 270 0 $tpp[4];rotate 0 0 90 $tpp[5];rotate 0 0 -90 $tpp[6];if (size($tmp)>0) {float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tpp[1];move $pos[0] $pos[1] $pos[2] $tpp[2];move $pos[0] $pos[1] $pos[2] $tpp[3];move $pos[0] $pos[1] $pos[2] $tpp[4];move $pos[0] $pos[1] $pos[2] $tpp[5];move $pos[0] $pos[1] $pos[2] $tpp[6];}makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[1];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[2];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[3];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[4];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[5];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[6];select $tpp[6];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[5];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[4];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[3];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[2];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];$tpp[7]=`rename $tpp[1] "Jack_6_Hlp_#"`;$ret=$tpp[7];select $tpp[7];$tmp=`pickWalk -d down`;select $tmp[0];rename ($tmp[0]) "Handle_1";$tmp=`pickWalk -d left`;rename ($tmp[0]) "Handle_2";$tmp=`pickWalk -d left`;rename ($tmp[0]) "Handle_3";$tmp=`pickWalk -d left`;rename ($tmp[0]) "Handle_4";$tmp=`pickWalk -d left`;rename ($tmp[0]) "Handle_5";$tmp=`pickWalk -d left`;rename ($tmp[0]) "Handle_6";delete $tpp[2];delete $tpp[3];delete $tpp[4];delete $tpp[5];delete $tpp[6];break;case 2:string $sel;$tmp=`ls -sl`;$sel=$tmp[0];$tpp[1]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[2]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[3]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[4]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[5]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;rotate 0 90 0 $tpp[2];rotate 0 180 0 $tpp[3];rotate 0 270 0 $tpp[4];rotate 0 0 90 $tpp[5];if (size($tmp)>0) {float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tpp[1];move $pos[0] $pos[1] $pos[2] $tpp[2];move $pos[0] $pos[1] $pos[2] $tpp[3];move $pos[0] $pos[1] $pos[2] $tpp[4];move $pos[0] $pos[1] $pos[2] $tpp[5];}makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[1];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[2];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[3];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[4];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[5];select $tpp[5];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[4];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[3];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[2];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];$tpp[6]=`rename $tpp[1] "Jack_5_Hlp_#"`;$ret=$tpp[6];select $tpp[6];$tmp=`pickWalk -d down`;select $tmp[0];rename ($tmp[0]) "Handle_1";$tmp=`pickWalk -d left`;rename ($tmp[0]) "Handle_2";$tmp=`pickWalk -d left`;rename ($tmp[0]) "Handle_3";$tmp=`pickWalk -d left`;rename ($tmp[0]) "Handle_4";$tmp=`pickWalk -d left`;rename ($tmp[0]) "Handle_5";delete $tpp[2];delete $tpp[3];delete $tpp[4];delete $tpp[5];break;case 3:string $sel;$tmp=`ls -sl`;$sel=$tmp[0];$tpp[1]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[2]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[3]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[4]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;rotate 0 90 0 $tpp[2];rotate 0 180 0 $tpp[3];rotate 0 270 0 $tpp[4];if (size($tmp)>0) {float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tpp[1];move $pos[0] $pos[1] $pos[2] $tpp[2];move $pos[0] $pos[1] $pos[2] $tpp[3];move $pos[0] $pos[1] $pos[2] $tpp[4];}makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[1];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[2];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[3];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[4];select $tpp[4];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[3];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[2];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];$tpp[5]=`rename $tpp[1] "Jack_4_Hlp_#"`;$ret=$tpp[5];select $tpp[5];$tmp=`pickWalk -d down`;select $tmp[0];rename ($tmp[0]) "Handle_1";$tmp=`pickWalk -d right`;rename ($tmp[0]) "Handle_2";$tmp=`pickWalk -d right`;rename ($tmp[0]) "Handle_3";$tmp=`pickWalk -d right`;rename ($tmp[0]) "Handle_4";delete $tpp[2];delete $tpp[3];delete $tpp[4];break;case 4:string $sel;$tmp=`ls -sl`;$sel=$tmp[0];$tpp[1]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[2]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[3]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;rotate 0 120 0 $tpp[2];rotate 0 240 0 $tpp[3];if (size($tmp)>0) {float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tpp[1];move $pos[0] $pos[1] $pos[2] $tpp[2];move $pos[0] $pos[1] $pos[2] $tpp[3];}makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[1];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[2];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[3];select $tpp[3];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];select $tpp[2];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];$tpp[4]=`rename $tpp[1] "Jack_3_Hlp_#"`;$ret=$tpp[4];select $tpp[4];$tmp=`pickWalk -d down`;select $tmp[0];rename ($tmp[0]) "Handle_1";$tmp=`pickWalk -d right`;rename ($tmp[0]) "Handle_2";$tmp=`pickWalk -d right`;rename ($tmp[0]) "Handle_3";delete $tpp[2];delete $tpp[3];break;case 5:string $sel;$tmp=`ls -sl`;$sel=$tmp[0];$tpp[1]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;$tpp[2]=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;rotate 0 180 0 $tpp[2];if (size($tmp)>0) {float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tpp[1];move $pos[0] $pos[1] $pos[2] $tpp[2];}makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[1];makeIdentity -t 1 -r 1 -s 1 -a 1 $tpp[2];select $tpp[2];$tmp=`pickWalk -d down`;parent -r -shape $tmp[0] $tpp[1];$tpp[3]=`rename $tpp[1] "Jack_2_Hlp_#"`;$ret=$tpp[3];select $tpp[3];$tmp=`pickWalk -d down`;select $tmp[0];rename ($tmp[0]) "Handle_1";$tmp=`pickWalk -d right`;rename ($tmp[0]) "Handle_2";delete $tpp[2];break;case 6:$tmp=`ls -sl`;$tp=`curve -d 1 -p 0 0 0 -p .75 0 0 -p 1 .25 0 -p 1.25 0 0 -p 1 -.25 0 -p .75 0 0 -p 1 0 .25 -p 1.25 0 0 -p 1 0 -.25 -p 1 .25 0 -p 1 0 .25 -p 1 -.25 0 -p 1 0 -.25 -p .75 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14`;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;}makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;$ret=`rename $tp "Jack_1_Hlp_#"`;break;case 7:$tmp=`ls -sl`;$tp=`curve -d 1 -p -1 0 1 -p -1 0 5 -p -2 0 5 -p 0 0 7 -p 2 0 5 -p 1 0 5 -p 1 0 1 -p 5 0 1 -p 5 0 2 -p 7 0 0 -p 5 0 -2 -p 5 0 -1 -p 1 0 -1 -p 1 0 -5 -p 2 0 -5 -p 0 0 -7 -p -2 0 -5 -p -1 0 -5 -p -1 0 -1 -p -5 0 -1 -p -5 0 -2 -p -7 0 0 -p -5 0 2 -p -5 0 1 -p -1 0 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 `;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}$ret=`rename $tp "Arrow_4_Hlp_#"`;break;case 8:$tmp=`ls -sl`;$tp=`curve -d 1 -p -1 0 5 -p -2 0 5 -p 0 0 7 -p 2 0 5 -p 1 0 5 -p 1 0 -5 -p 2 0 -5 -p 0 0 -7 -p -2 0 -5 -p -1 0 -5 -p -1 0 5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 `;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}$ret=`rename $tp "Arrow_2_Hlp_#"`;break;case 9:$tmp=`ls -sl`;$tp=`curve -d 1 -p 1 0 0 -p 1 0 5 -p 2 0 5 -p 0 0 7 -p -2 0 5 -p -1 0 5 -p -1 0 0 -p 1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 `;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}$ret=`rename $tp "Arrow_2_Hlp_#"`;break;case 10:$tmp=`ls -sl`;$tp=`curve -d 1 -p 0 1.05 0 -p -.52 .91 0 -p -.91 .52 0 -p -1.05 0 0 -p -.91 -.52 0 -p -.52 -.91 0-p 0 -1.05 0 -p .52 -.91 0 -p .91 -.52 0 -p 1.05 0 0 -p .91 .52 0 -p .52 .91 0 -p 0 1.05 0 -p 0 0 0 -p -1.05 0 0 -p -.91 0 .52 -p -.52 0 .91 -p 0 0 1.05 -p .52 0 .91 -p .91 0 .52 -p 1.05 0 0 -p .91 0 -.52 -p .52 0 -.91 -p 0 0 -1.05 -p -.52 0 -.91 -p -.91 0 -.52 -p -1.05 0 0-p 0 0 0 -p 0 0 -1.05 -p 0 .52 -.91 -p 0 .91 -.52 -p 0 1.05 0 -p 0 .91 .52 -p 0 .52 .91 -p 0 0 1.05-p 0 -.52 .91 -p 0 -.91 .52 -p 0 -1.05 0 -p 0 -.91 -.52 -p 0 -.52 -.91 -p 0 0 -1.05 -p 0 0 1.05 -p 0 0 0-p 0 -1.05 0 -p 0 0 0 -p 1.05 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12-k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45`;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}$ret=`rename $tp "Sphere_Hlp_#"`;break;case 11:$tmp=`ls -sl`;$tp=`curve -d 1 -p 0 0 0 -p 0 0 1 -p -1 0 1 -p -1 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4`;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}$ret=`rename $tp "Square_Hlp_#"`;break;case 12:$tmp=`ls -sl`;$tp=`curve -d 1 -p .5 .5 .5 -p .5 .5 -.5 -p -.5 .5 -.5 -p -.5 -.5 -.5 -p .5 -.5 -.5 -p .5 .5 -.5 -p -.5 .5 -.5-p -.5 .5 .5 -p .5 .5 .5 -p .5 -.5 .5 -p .5 -.5 -.5 -p -.5 -.5 -.5 -p -.5 -.5 .5 -p .5 -.5 .5 -p -.5 -.5 .5-p -.5 .5 .5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15`;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}$ret=`rename $tp "Cube_Hlp_#"`;break;case 13:$tmp=`ls -sl`;$tp=`curve -d 1 -p .52 0 0 -p .45 0 -.26 -p .26 0 -.45 -p 0 0 -.52 -p -.26 0 -.45 -p -.45 0 -.26 -p -.52 0 0 -p -.45 0 .26 -p -.26 0 .45 -p 0 0 .52 -p .26 0 .45 -p .45 0 .26 -p .52 0 0 -p -.52 0 0 -p 0 0 0 -p 0 0 -.52 -p 0 0 .52 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16`;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}$ret=`rename $tp "Circle_Hlp_#"`;break;case 14:$tmp=`ls -sl`;$tp=`curve -d 1 -p -1 0 0 -p 1 0 0 -p 0 0 2 -p -1 0 0 -p 0 1 0 -p 1 0 0 -p 0 1 0 -p 0 0 2 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7`;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}$ret=`rename $tp "Pyramid_Hlp_#"`;break;case 15:$tmp=`ls -sl`;string $boundry=`curve -d 1 -p -1 .05 0 -p 1 .05 0 -p 1 -.05 0 -p -1 -.05 0 -p -1 .05 0 -k 0 -k 1 -k 2 -k 3 -k 4 -n "Boundry_#"`;string $control=`curve -d 1 -p -.05 .25 0 -p .05 .25 0 -p .05 -.25 0 -p -.05 -.25 0 -p -.05 .25 0 -k 0 -k 1 -k 2 -k 3 -k 4 -n "Control_#"`;select -r $boundry;CenterPivot;FreezeTransformations;select -cl;select -r $control;CenterPivot;FreezeTransformations;select -cl;$tp=`group -n "H_Slider_Hlp_#" $boundry $control`;$ret=$tp;xform -os -piv 0 0 0;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}transformLimits -tx -1 1 -etx 1 1 $control;transformLimits -ty 0 0 -ety 1 1 $control;transformLimits -tz 0 0 -etz 1 1 $control;css_TD_LockUnlock ($boundry,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1 );css_TD_LockUnlock ($control,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1 );break;case 16:$tmp=`ls -sl`;string $boundry=`curve -d 1 -p -.05 1 0 -p .05 1 0 -p .05 -1 0 -p -.05 -1 0 -p -.05 1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -n "Boundry_#"`;string $control=`curve -d 1 -p -.25 .1 0 -p .25 .1 0 -p .25 -.1 0 -p -.25 -.1 0 -p -.25 .1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -n "Control_#"`;select -r $boundry;CenterPivot;FreezeTransformations;select -cl;select -r $control;CenterPivot;FreezeTransformations;select -cl;$tp=`group -n "V_Slider_hlp_#" $boundry $control`;$ret=$tp;xform -os -piv 0 0 0;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}transformLimits -tx 0 0 -etx 1 1 $control;transformLimits -ty -1 1 -ety 1 1 $control;transformLimits -tz 0 0 -etz 1 1 $control;css_TD_LockUnlock ($boundry,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1 );css_TD_LockUnlock ($control,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1 );break;case 17:$tmp=`ls -sl`;string $boundry=`curve -d 1 -p -1 1 0 -p 1 1 0 -p 1 -1 0 -p -1 -1 0 -p -1 1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -n "Boundry_#"`;string $control=`curve -d 1 -p -.1 .1 0 -p .1 .1 0 -p .1 -.1 0 -p -.1 -.1 0 -p -.1 .1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -n "Control_#"`;select -r $boundry;CenterPivot;FreezeTransformations;select -cl;select -r $control;CenterPivot;FreezeTransformations;select -cl;$tp=`group -n "S_Slider_hlp_#" $boundry $control`;$ret=$tp;xform -os -piv 0 0 0;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}transformLimits -tx -1 1 -etx 1 1 $control;transformLimits -ty -1 1 -ety 1 1 $control;transformLimits -tz 0 0 -etz 1 1 $control;css_TD_LockUnlock ($boundry,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1 );css_TD_LockUnlock ($control,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1 );break;case 18:$tmp=`ls -sl`;string $boundry=`curve -d 1 -p 1 1 1 -p 1 1 -1 -p -1 1 -1 -p -1 -1 -1 -p 1 -1 -1 -p 1 1 -1 -p -1 1 -1 -p -1 1 1 -p 1 1 1 -p 1 -1 1 -p 1 -1 -1 -p -1 -1 -1 -p -1 -1 1 -p 1 -1 1 -p -1 -1 1 -p -1 1 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -n "Boundry_#"`;string $control=`curve -d 1 -p .1 .1 .1 -p .1 .1 -.1 -p -.1 .1 -.1 -p -.1 -.1 -.1 -p .1 -.1 -.1 -p .1 .1 -.1 -p -.1 .1 -.1 -p -.1 .1 .1 -p .1 .1 .1 -p .1 -.1 .1 -p .1 -.1 -.1 -p -.1 -.1 -.1 -p -.1 -.1 .1 -p .1 -.1 .1 -p -.1 -.1 .1 -p -.1 .1 .1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -n "Control_#"`;select -r $boundry;CenterPivot;FreezeTransformations;select -cl;select -r $control;CenterPivot;FreezeTransformations;select -cl;$tp=`group -n "C_Slider_hlp_#" $boundry $control`;$ret=$tp;xform -os -piv 0 0 0;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}transformLimits -tx -1 1 -etx 1 1 $control;transformLimits -ty -1 1 -ety 1 1 $control;transformLimits -tz -1 1 -etz 1 1 $control;css_TD_LockUnlock ($boundry,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1 );css_TD_LockUnlock ($control,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1 );break;case 19:adset_cn_shp;break;case 20:$tmp=`ls -sl`;$tp=`curve -d 1 -p 0 0 -7 -p -3.466489 0 -5.999693 -p -5.999693 0 -3.466489 -p -6.932978 0 0 -p -5.999693 0 3.466489 -p -3.466489 0 5.999693 -p 0 0 6.932978 -p 3.466489 0 5.999693 -p 5.999693 0 3.466489 -p 6.932978 0 0 -p 5.999693 0 -3.466489 -p 3.466489 0 -5.999693 -p 0 0 -7 -p 0 0 6.932978 -p 0 0 0 -p 6.932978 0 0 -p -6.932978 0 0 -p -5 0 2 -p -5 0 1 -p -1 0 1 -p -1 0 5 -p -2 0 5 -p 0 0 6.932978 -p 2 0 5 -p 1 0 5 -p 1 0 1 -p 5 0 1 -p 5 0 2 -p 7 0 0 -p 5 0 -2 -p 5 0 -1 -p 1 0 -1 -p 1 0 -5 -p 2 0 -5 -p 0 0 -7 -p -2 0 -5 -p -1 0 -5 -p -1 0 -1 -p -5 0 -1 -p -5 0 -2 -p -6.932978 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40`;if (size($tmp)>0){float $pos[];$pos=`xform -q -piv -ws $tmp[0]`;move $pos[0] $pos[1] $pos[2] $tp;makeIdentity -t 1 -r 1 -s 1 -a 1 $tp;}$ret=`rename $tp "Circle_Arrow_Hlp_#"`;break;}return $ret;}//*************************************************************************************************************//*******************************************Hide Unhide Lock Unlock*******************************************//*************************************************************************************************************global proc css_TD_LockUnlock (string $obj,int $txv,int $tyv,int $tzv,int $rxv,int $ryv,int $rzv,int $sxv,int $syv,int $szv,	int $vv,int $txl,int $tyl,int $tzl,int $rxl,int $ryl,int $rzl,int $sxl,int $syl,int $szl,int $vl){setAttr ($obj+".tx") -k $txv -l $txl;setAttr ($obj+".ty") -k $tyv -l $tyl;setAttr ($obj+".tz") -k $tzv -l $tzl;setAttr ($obj+".rx") -k $rxv -l $rxl;setAttr ($obj+".ry") -k $ryv -l $ryl;setAttr ($obj+".rz") -k $rzv -l $rzl;setAttr ($obj+".sx") -k $sxv -l $sxl;setAttr ($obj+".sy") -k $syv -l $syl;setAttr ($obj+".sz") -k $szv -l $szl;setAttr ($obj+".v") -k $vv -l $vl;}//*************************************************************************************************************//*********************************************   bone on curve  **********************************************//*************************************************************************************************************global proc adset_bonesOnCurve( int $numBones, int $rebuildCurve,int $addSplineIK){string $curves[] = `ls -sl`;for ($curve in $curves){if ($rebuildCurve) rebuildCurve -ch 1 -replaceOriginal 1 -rebuildType 0 -endKnots 1 -keepRange 0 -keepControlPoints 0 -keepEndPoints 0 -keepTangents 0 -spans 0 -degree 2 -tolerance 0.01 $curve;select -cl;string $curveInfo = `pointOnCurve -constructionHistory 1 $curve`;setAttr ($curveInfo + ".turnOnPercentage") 1;int $i = 0;string $joints[];for ($i; $i<=$numBones; $i++){float $parameter = $i * (1.0/$numBones);setAttr ($curveInfo + ".parameter") $parameter;float $position[] = getAttr ($curveInfo + ".position");$joints[$i] = `joint -position $position[0] $position[1] $position[2]`;}delete $curveInfo;joint -edit -zso -oj xzy -sao yup $joints;if ($addSplineIK){select -replace $joints[0];select -toggle $joints[$numBones];select -toggle $curve;ikHandle -solver ikSplineSolver -createCurve false;}}}global proc setOptionVars (int	$forceFactorySettings){if ($forceFactorySettings || !`optionVar -exists "bonesOnCurveNumber"`)optionVar -intValue "bonesOnCurveNumber" 5;if ($forceFactorySettings || !`optionVar -exists "bonesOnCurveRebuildCurve"`)optionVar -intValue "bonesOnCurveRebuildCurve" 0;if ($forceFactorySettings || !`optionVar -exists "bonesOnCurveAddIK"`)optionVar -intValue "bonesOnCurveAddIK" 0;}global proc adset_bonesOnCurveSetup (string $parent, int $forceFactorySettings){setOptionVars($forceFactorySettings);setParent $parent;intSliderGrp-edit-value `optionVar -query bonesOnCurveNumber`bonesOnCurveNumber;checkBoxGrp-edit-value1 `optionVar -query bonesOnCurveRebuildCurve`bonesOnCurveRebuildCurve;checkBoxGrp-edit-value1 `optionVar -query bonesOnCurveAddIK`bonesOnCurveAddIK;}global proc adset_bonesOnCurveCallback (string $parent, int $doIt){	setParent $parent;optionVar -intValue "bonesOnCurveNumber"`intSliderGrp -query -value bonesOnCurveNumber`;optionVar -intValue "bonesOnCurveRebuildCurve"`checkBoxGrp -query -value1 bonesOnCurveRebuildCurve`;optionVar -intValue "bonesOnCurveAddIK"`checkBoxGrp -query -value1 bonesOnCurveAddIK`;if ($doIt) {performBonesOnCurve 0;string $tmpCmd = "performBonesOnCurve 0 ";addToRecentCommandQueue $tmpCmd "Bones On Curve";}}global proc bonesOnCurveOptions (){string $commandName = "bonesOnCurve";string $callback = ($commandName + "Callback");string $setup = ($commandName + "Setup");string $layout = getOptionBox();setParent $layout;setOptionBoxCommandName($commandName);setUITemplate -pushTemplate DefaultTemplate;waitCursor -state 1;string $parent = `columnLayout -adjustableColumn 1`;columnLayout;intSliderGrp -field on -label "Number of Bones" -minValue 1 -maxValue 15 -fieldMinValue 1 -fieldMaxValue 100 -value 5 bonesOnCurveNumber;checkBoxGrp -numberOfCheckBoxes 1 -label "Rebuild Curve" -value1 1 bonesOnCurveRebuildCurve;checkBoxGrp -numberOfCheckBoxes 1 -label "Add Spline IK" -value1 1 bonesOnCurveAddIK;setParent ..;setParent -menu ..;waitCursor -state 0;setUITemplate -popTemplate;string $applyBtn = getOptionBoxApplyBtn();button -edit -label "Apply" -command ($callback + " " + $parent + " " + 1) $applyBtn;string $applyAndCloseBtn = getOptionBoxApplyAndCloseBtn();button -edit -label "Create Bones" $applyAndCloseBtn;string $saveBtn = getOptionBoxSaveBtn();button -edit -command ($callback + " " + $parent + " " + 0 + " " +"; hideOptionBox") $saveBtn;string $resetBtn = getOptionBoxResetBtn();button -edit -command ($setup + " " + $parent + " " + 1) $resetBtn;setOptionBoxTitle("Bones On Curve Options");eval (($setup + " " + $parent + " " + 0));showOptionBox();}global proc string assembleCmd(){setOptionVars (false);int $doHistory = `constructionHistory -q -toggle`;string $cmd = "bonesOnCurve ";$cmd += `optionVar -query "bonesOnCurveNumber"`;$cmd += " ";$cmd += `optionVar -query "bonesOnCurveRebuildCurve"`;$cmd += " ";$cmd += `optionVar -query "bonesOnCurveAddIK"`;return $cmd;	}global proc string performadset_BonesOnCurve (int $option){string $cmd="";switch ($option) {case 0:$cmd = `assembleCmd`;eval($cmd);break;case 1:bonesOnCurveOptions;break;case 2:$cmd = `assembleCmd`;break;}return $cmd;}//*************************************************************************************************************//*********************************************template orientation********************************************//*************************************************************************************************************global proc templateSkeleton_createTemp_doIt(){string $sel[] = `ls -sl -type "joint"`;if(size($sel) < 1) error("templateSkeleton_createTemp_doIt -> Select one or more Joints");for($each in $sel) templateSkeleton_createTemp $each;select -cl;	}global proc templateSkeleton_reBuildChain_doIt(){string $sel[] = `ls -sl`;if(size($sel) < 1) error("templateSkeleton_reBuildChain_doIt -> Select at least one templateChain TopNode");select -cl;for($each in $sel)templateSkeleton_reBuildChain $each;select -cl;}global proc string templateSkeleton_createTemp(string $chainTopNode){cycleCheck -e off;int $color = 1;string $tempChainTop;if(!`objExists $chainTopNode`) error("templateSkeleton_createTemp -> "+$chainTopNode+" doesn't exist");if(!`objectType -i "joint" $chainTopNode`) error("templateSkeleton_createTemp -> "+$chainTopNode+" not of type \"joint\"");string $grpTopNode = `group -em -n "templateSkeletonN_#"`;string $jointTopNode = `group -em -n "jointsN_#"`;string $xtrasTopNode = `group -em -n "xtrasN_#"`;templateSkeleton_lockOff $grpTopNode;templateSkeleton_lockOff $jointTopNode;templateSkeleton_lockOff $xtrasTopNode;if(!`attributeExists "rotGuiScale" $grpTopNode`) {addAttr -ln "rotGuiScale" -at double -min 0 -dv 1.0 $grpTopNode;}setAttr -e -keyable true ($grpTopNode+".rotGuiScale");string $fullPathNames[] = `parent $jointTopNode $xtrasTopNode $grpTopNode`;string $topJoint[] = `parent $chainTopNode $fullPathNames[0]`;string $reListed[] = `templateSkeleton_reList $topJoint[0]`;for ($i = 0; $i < (size($reListed) - 1); $i++){if(!`attributeExists "rotGui" $reListed[$i]`) {addAttr -ln "rotGui" -at double -min -360 -max 360 $reListed[$i];}setAttr -e -keyable true ($reListed[$i]+".rotGui");string $rotGrp = `templateSkeleton_createRotGrp $reListed[$i] $reListed[($i+1)] $xtrasTopNode $color`;	connectAttr -f ($grpTopNode + ".rotGuiScale") ($rotGrp + ".sx");connectAttr -f ($grpTopNode + ".rotGuiScale") ($rotGrp + ".sy");connectAttr -f ($grpTopNode + ".rotGuiScale") ($rotGrp + ".sz");templateSkeleton_lockOff $rotGrp;$color++;if($color == 9)$color = 1;		}select $grpTopNode;print "Done creating Template Skeleton \n";$tempChainTop = $grpTopNode;return $tempChainTop; }global proc string templateSkeleton_reBuildChain(string $chainTopNode){string $rebuiltChain;string $newSkele[];clear($newSkele);if(!`objExists $chainTopNode`) error("templateSkeleton_reBuildChain -> "+$chainTopNode+" doesn't exist");string $joints[] = `ls -type joint -dag $chainTopNode`;string $nm[]=$joints;for($i = 0; $i < size($joints); $i++)$newSkele[$i] = `joint -p $i 0 0`;for($i = 0; $i < (size($joints)-1); $i++){float $xyzs[] =`xform -q -a -ws -t $joints[$i]`;xform -a -ws -t $xyzs[0] $xyzs[1] $xyzs[2] $newSkele[$i];string $aimObj = `templateSkeleton_getAimUpObj $joints[$i]`;string $aims[]=`aimConstraint -aim 1 0 0 -u 0 1 0 -wuo $aimObj -wut "objectrotation" $joints[$i+1] $newSkele[$i]`;float $rotss[]=`getAttr ($newSkele[$i]+".rotate")`;delete $aims;setAttr ($newSkele[$i]+".rotate") 0 0 0;setAttr ($newSkele[$i]+".jointOrient") $rotss[0] $rotss[1] $rotss[2];}float $trans[] =`xform -q -a -ws -t $joints[$i]`;xform -a -ws -t $trans[0] $trans[1] $trans[2] $newSkele[$i];for($each in $newSkele) setAttr ($each + ".rotateOrder") 3;	string $parentTest[] = `listRelatives -p -pa $newSkele[0]`;if(`objExists $parentTest[0]`){string $newParent[]=`parent -w $newSkele[0]`;$rebuiltChain = $newParent[0];}else $rebuiltChain = $newSkele[0];delete $chainTopNode;for ($i=0;$i<size($joints);$i++){rename $newSkele[$i] $nm[$i];}return $rebuiltChain; print "Done reBuilding chain\n";}global proc string templateSkeleton_getAimUpObj(string $joint){string $loc[] = `listConnections -s 0 -d 1 -scn 1 ($joint+".toUpLoc")`;if(!`objExists $loc[0]`) error("templateSkeleton_getAimUpObj -> "+$loc[0]+" doesn't exist");return $loc[0];}global proc templateSkeleton_lockOff(string $node){string $attrs[] = `listAttr -k $node`;	for($each in $attrs) setAttr -k 0 -l 1 ($node + "." + $each);}global proc string templateSkeleton_createRotGrp(string $fromJt, string $toJt, string $xtraGrp, int $color){string $rotGrpA = `group -em -name ($fromJt+"RotGrpAN_#")`;string $rotGrpB = `group -em -name ($fromJt+"RotGrpBN_#")`;string $rotGrpC = `group -em -name ($fromJt+"ManRotGrpCN_#")`;string $loc[] = `spaceLocator -p 0 1 0 -n ($fromJt + "UpLoc_#")`;select -r $loc[0];color -ud $color;if(!`attributeExists "toJoint" $loc[0]`) addAttr -dt "string" -ln "toJoint" $loc[0];if(!`attributeExists "toUpLoc" $fromJt`) addAttr -dt "string" -ln "toUpLoc" $fromJt;connectAttr -f ($fromJt+".toUpLoc")($loc[0]+".toJoint");connectAttr -f ($fromJt+".rotGui") ($rotGrpB +".rx");parent $loc[0] $rotGrpC;parent $rotGrpC $rotGrpB;parent $rotGrpB $rotGrpA;pointConstraint $fromJt $rotGrpA;aimConstraint -u 0 1 0 -wut "scene" $toJt $rotGrpA;templateSkeleton_lockOff $rotGrpC;setAttr -e -l 0 -k 1 ($rotGrpC +".rx");templateSkeleton_lockOff $rotGrpB;string $parent[] = `parent $rotGrpA $xtraGrp`;return $parent[0];}global proc string[] templateSkeleton_reList(string $topNode){string $relisted[];clear($relisted);$relisted = `ls -type joint -sl -dag`;return $relisted;}//*************************************************************************************************************//********************************************control circle creator*******************************************//*************************************************************************************************************global proc controlCircleCreator (string $sel[], float $x, float $y, float $z, float $r){string $joint;for ($joint in $sel){float $loc[] = `xform -q -ws -t $joint`;circle -fp $loc[0] $loc[1] $loc[2] -sw 360 -nr $x $y $z  -r $r -n ($joint + "_control");parent -r -shape ($joint + "_controlShape") $joint;setAttr ($joint + "_controlShape.overrideEnabled") 1;setAttr ($joint + ".overrideEnabled") 1;if(!`gmatch $joint "L_*"`&&!`gmatch $joint "R_*"`){setAttr ($joint + "_controlShape.overrideColor") 6;setAttr ($joint + ".overrideColor") 6;}else if(`gmatch $joint "L_*"`){setAttr ($joint + "_controlShape.overrideColor") 14;setAttr ($joint + ".overrideColor") 14;}else if(`gmatch $joint "R_*"`){setAttr ($joint + "_controlShape.overrideColor") 13;setAttr ($joint + ".overrideColor") 13;}else if(`gmatch $joint "EX_*"`){setAttr ($joint + "_controlShape.overrideColor") 17;setAttr ($joint + ".overrideColor") 17;}	delete ($joint + "_control");				}}//*************************************************************************************************************//********************************************make reference***************************************************//*************************************************************************************************************global proc makeReference(){string $sel[];$sel=`ls -sl`;string $obj;for($obj in $sel){setAttr ($obj + ".overrideEnabled") 1;setAttr ($obj + ".overrideDisplayType") 2;}}//*************************************************************************************************************//********************************************Stretchy IK Creator**********************************************//*************************************************************************************************************global proc stretchy_ik (string $char, string $controller, string $crv, string $chain[]){addAttr -k on -at double -min 0 -max 1 -dv 0 -ln stretching $controller;string $rev = `createNode reverse -n ($char + "_reverse")`;connectAttr ($controller + ".stretching") ($rev + ".inputX");string $tmp[];select -r $crv;$tmp=`duplicate $crv`;select -r $tmp[0];DeleteHistory;rename $tmp[0] ($crv+"_DUP");string $info = `createNode curveInfo -name ($char + "crv_info")`;connectAttr -f ($crv + ".worldSpace[0]") ($info + ".inputCurve");string $infoo = `createNode curveInfo -name ($char + "crv_info_dup")`;connectAttr -f (($crv+"_DUP") + ".worldSpace[0]") ($infoo + ".inputCurve");string $div = `createNode multiplyDivide -n ($char + "_divide")`;setAttr ($div + ".operation") 2;connectAttr ($info + ".arcLength") ($div + ".input1X");connectAttr ($infoo + ".arcLength") ($div + ".input2X");setAttr ($div + ".input1Y") 1;setAttr ($div + ".input2Y") 1;    string $bta = `createNode blendTwoAttr -n ($char + "_bta")`;connectAttr ($rev + ".outputX") ($bta + ".attributesBlender");connectAttr ($div + ".outputX") ($bta + ".input[0]");connectAttr ($div + ".outputY") ($bta + ".input[1]");    for ($c = 0; $c < size($chain); $c++){{addAttr -k on -at double -dv 1 -ln ($chain[$c] + "Squash") $controller;connectAttr  ($controller + "." + $chain[$c] + "Squash") ($chain[$c] + ".scaleZ");float $tx = `getAttr ($chain[$c] + ".scaleX")`;string $mlt = `createNode multiplyDivide -n ($chain[$c] + "_mult")`;    setAttr ($mlt + ".input1X") $tx;connectAttr ($bta + ".output") ($mlt + ".input2X");connectAttr ($mlt + ".outputX") ($chain[$c] + ".scaleX");}}}//*************************************************************************************************************//********************************************Volume Wire Creator**********************************************//*************************************************************************************************************global proc volumeWire (string $base, string $crv, string $name){wire -dds 0 50 -w $crv -name ($name + "_wire") $base;select ($crv + ".cv[*]");string $cvs[] = `ls -sl -fl`;for ($c in $cvs){float $xfs[] = `xform -q -ws -t $c`;select -cl;string $joint = `joint -position $xfs[0] $xfs[1] $xfs[2] -name ($name + "_j")`;string $clusters[] = `cluster -n ($name + "_cluster") $c`;string $cShape[] = `listConnections -s 1 ($clusters[0]+".clusterXforms")`;cluster -e -wn $joint $joint -bs 1 $cShape[0];select ($name + "_cluster*Handle");string $guesscs[] = `ls -sl`;for ($g in $guesscs){delete;setAttr ($g + "Shape.visibility") 0;}select $joint;controlCircleCreator `ls -sl` 0 1 0 3;}}//*************************************************************************************************************//********************************************Create Boundry Attr**********************************************//*************************************************************************************************************global proc HRRaddBoundToAll(){string $sel[] = `ls -type joint "*_BN_JNT"`;for ($i = 0; $i < size($sel); $i++){HRRaddBoundAttr $sel[$i];	}	}global proc HRRaddBoundAttr(string $object){string $parts[],$tp;tokenize ($object, "|", $parts);string $lastPart = $parts[(size($parts)-1)];if (!`attributeExists "hrrBound" $object`){addAttr -dt "string" -ln "hrrBound" $object;		}setAttr -l 0 ($object+".hrrBound");$tp=`substring $lastPart 1 (size($lastPart)-7)`;setAttr -type "string" ($object+".hrrBound") $tp;setAttr -l 1 ($object+".hrrBound");}//*************************************************************************************************************//********************************************Create Control Attr**********************************************//*************************************************************************************************************global proc HRRaddControlAttrTo(){string $sel[] = `ls -type joint "*_SK_JNT"`;for ($each in $sel){if((!`gmatch $each "*JCon*"`) && (!`gmatch $each "*JOri*"`))HRRaddControlAttrs $each $each;}}global proc HRRaddControlAttrs(string $driven, string $driver){string $tp;if (!`attributeExists "hrrControlled" $driver`){addAttr -ln "hrrControlled" -at "message" $driver;}if (!`attributeExists "hrrControl" $driver`){addAttr -dt "string" -ln "hrrControl" $driver;		$tp=`substring $driven 1 (size ($driven)-7)`;setAttr -e -l 0 ($driver+".hrrControl");setAttr -e -type "string" ($driver+".hrrControl") $tp;setAttr -e -l 1 ($driver+".hrrControl");}	}//*************************************************************************************************************//********************************************Connect Boundry *************************************************//*************************************************************************************************************global proc HRRconnectControlFromTo(){string $sel[] = `ls -sl`;HRRconnectControl $sel[0] $sel[1];	}global proc HRRconnectJts(string $from, string $to){pointConstraint -mo $from $to;orientConstraint -mo $from $to;	}global proc HRRconnectControl(string $from, string $to){select -r -hi $from;string $allSelFrom[] = `ls -sl`;string $allJointsFrom[] = `ls -sl -type joint`;string $controlJts[];clear($controlJts);int $cjt = 0;for ($joint in $allJointsFrom){string $attributes[0];$attributes = `listAttr -ud $joint`;for ($attr in $attributes){if ($attr == "hrrControl"){$controlJts[$cjt] = $joint;$cjt++;}}}select -r -hi $to;string $allSelTo[] = `ls -sl`;string $allJointsFrom[] = `ls -sl -type joint`;string $boundJts[];clear($boundJts);int $bjt = 0;for ($joint in $allJointsFrom){string $attributes[0];$attributes = `listAttr -ud $joint`;for ($attr in $attributes){if ($attr == "hrrBound"){$boundJts[$bjt] = $joint;$bjt++;	}}}for ($i = 0; $i < size($boundJts); $i++){string $toBound = `getAttr ($boundJts[$i]+".hrrBound")`;for ($x = 0; $x < size($controlJts); $x++){string $toJt = `getAttr ($controlJts[$x]+".hrrControl")`;if ($toJt == $toBound){HRRconnectJts $controlJts[$x] $boundJts[$i];break;}}}}//*************************************************************************************************************//*********************************************Clear Boundry Attr**********************************************//*************************************************************************************************************global proc HRRdeleteConnectionAttrsBoundry(){string $sel[] = `ls -type joint "*_BN_JNT"`;for($each in $sel){if (`attributeExists "hrrBound" $each`){setAttr -e -l 0 ($each + ".hrrBound");deleteAttr -at "hrrBound" $each;}if (`attributeExists "hrrControlled" $each`){setAttr -e -l 0 ($each + ".hrrControlled");deleteAttr -at "hrrControlled" $each;}if (`attributeExists "hrrControl" $each`){setAttr -e -l 0 ($each + ".hrrControl");deleteAttr -at "hrrControl" $each;}}}//*************************************************************************************************************//*********************************************Clear Control Attr**********************************************//*************************************************************************************************************global proc HRRdeleteConnectionAttrsControl(){string $sel[] = `ls -type joint "*_SK_JNT"`;for($each in $sel){if (`attributeExists "hrrBound" $each`){setAttr -e -l 0 ($each + ".hrrBound");deleteAttr -at "hrrBound" $each;}if (`attributeExists "hrrControlled" $each`){setAttr -e -l 0 ($each + ".hrrControlled");deleteAttr -at "hrrControlled" $each;}if (`attributeExists "hrrControl" $each`){setAttr -e -l 0 ($each + ".hrrControl");deleteAttr -at "hrrControl" $each;}}}//*************************************************************************************************************//*********************************************Create Low Rez Geo**********************************************//*************************************************************************************************************global proc createLoRez(){if(`window -exists createLoRez_ui`) deleteUI createLoRez_ui;window -t "Create LoRez Geo" createLoRez_ui;columnLayout -adj 1;string $divX = `intSliderGrp -label "Divisions X" -field true-minValue 1 -maxValue 10-fieldMinValue 1 -fieldMaxValue 100-value 6`;string $divY = `intSliderGrp -label "Divisions Y" -field true-minValue 1 -maxValue 10-fieldMinValue 1 -fieldMaxValue 100-value 4`;string $divZ = `intSliderGrp -label "Divisions Z" -field true-minValue 0 -maxValue 10-fieldMinValue 0 -fieldMaxValue 100-value 0`;button -l "Create Lo Rez By SkinCluster" -ann "Select at least one bound surface and run"-c ("createLoRez_bySkinCluster "+$divX+" "+$divY+" "+$divZ);button -l "Adjust For Closest Points"-ann "Select all the new Geo Surfaces THEN the single boundSkin surface to match and run"-c ("createLoRez_moveGeoAfter");showWindow createLoRez_ui;}global proc string createLoRez_createGeo(string $joint, int $subDivX, int $subDivY, int $subDivZ){string $loRezGeo;string $childJt[] = `listRelatives -c -pa -type "joint" $joint`;	if(`objExists $childJt[0]`){float $tx = `getAttr ($childJt[0] + ".tx")`;if(abs($tx) > 0.0){string $pc[] = `polyCylinder -ax 0 0 0 -sx $subDivX-sy $subDivY-sz $subDivZ-name ($joint+"loRezGeo_#")`;xform -a -ws -piv 0 -1 0 $pc[0];xform -a -ws -t 0 1 0 $pc[0];if($tx > 0)xform -a -ws -ro 0 0 -90 $pc[0];elsexform -a -ws -ro 0 0 90 $pc[0];makeIdentity -apply true -t 1 -r 1 -s 1 $pc[0];string $bb[] = `parent $pc[0] $joint`;setAttr ($bb[0] +".t") 0 0 0;setAttr ($bb[0] +".r") 0 0 0;setAttr ($bb[0] + ".sx") ((abs($tx))/2);makeIdentity -apply true -t 1 -r 1 -s 1 $bb[0];$loRezGeo = $bb[0];}}return $loRezGeo;}global proc createLoRez_moveGeo(string $loRez, string $skin){string $loc[] = `spaceLocator -p 0 0 0`;select -r ($loRez+".vtx[*]");string $points[] = `ls -sl -flatten`;for ($point in $points){float $xyzs[] = `xform -a -ws -q -t $point`;xform -a -ws -t $xyzs[0] $xyzs[1] $xyzs[2] $loc[0];string $geoCon[] = `geometryConstraint $skin $loc[0]`;float $to[] = `xform -a -ws -q -t $loc[0]`;xform -a -ws -t $to[0] $to[1] $to[2] $point;delete $geoCon[0];	flushUndo;}delete $loc;}global proc createLoRez_bySkinCluster(string $divX, string $divY, string $divZ){string $mesh=`textFieldGrp -q -tx hi_mesh_txt`;select $mesh;int $sx = `intSliderGrp -q -v $divX`;int $sy = `intSliderGrp -q -v $divY`;int $sz = `intSliderGrp -q -v $divZ`;string $loRezGeo[];clear($loRezGeo);int $cur = 0;string $selSurfs[] = `ls -sl`;if(`size($selSurfs)` < 1)error("createLoRez_bySkinCluster :: Select At least one bound surface");string $scJts[] = `ls -type joint "*_SK_JNT"`;for($joint in $scJts){string $geo = `createLoRez_createGeo $joint $sx $sy $sz`;if (`objExists $geo`){$loRezGeo[$cur]= $geo;$cur++;		}}select -cl;for ($each in $loRezGeo)select -add $each;adset_grp_lwrz;}	global proc createLoRez_moveGeoAfter(){string $geos[],$nm;$geos=`ls -sl`;for ($obj in $geos){DeleteHistory $obj;$nm=substring ($obj,1,(size($obj)-10));scaleConstraint -mo -n ($nm+"_Geo_Sc_CNT") $nm $obj;}string $mesh=`textFieldGrp -q -tx hi_mesh_txt`;select -add $mesh;global string $gMainProgressBar;string $sel[] = `ls -sl`;select -cl;progressBar -edit-beginProgress-isInterruptable true -status "Adjusting LoRez Geo..." -maxValue (size($sel)-1)$gMainProgressBar;for ($i = 0; $i < (size($sel)-1); $i++)	{if(`progressBar -query -isCancelled $gMainProgressBar`) break;progressBar -edit-step 1 $gMainProgressBar;createLoRez_moveGeo $sel[$i] $sel[(size($sel)-1)];}progressBar -edit-endProgress$gMainProgressBar;select -cl;}//*************************************************************************************************************//********************************************* attribute window **********************************************//*************************************************************************************************************global proc adset_cn_attr (){if (`window -ex cn_atr_win`) deleteUI cn_atr_win;window -t"CNTRL/BNDRY Attributes" cn_atr_win;columnLayout -adj 1;button -l"Create CNTRL/BNDRY Attr" -c"adset_attr_ad_bncn";button -l"Delete CNTRL/BNDRY Attr" -c"adset_attr_dl_bncn";separator;separator;separator;button -l"Connect BNDRY to CNTRL" -c"adset_ad_cn_bncn";showWindow cn_atr_win;window -e -wh 245 110 cn_atr_win;}//*************************************************************************************************************//*********************************************add attribute bn/cn*********************************************//*************************************************************************************************************global proc adset_attr_ad_bncn (){string $sel[] = `ls -type joint -sl`;for ($each in $sel){if((!`gmatch $each "*JCon*"`) && (!`gmatch $each "*JOri*"`))adsetaddControlAttrs $each $each;}}global proc adsetaddControlAttrs(string $driven, string $driver){if (!`attributeExists "Control" $driver`){addAttr -ln "Control" -dt "string" $driver;setAttr -e -l 1 ($driver+".Control");}if (!`attributeExists "jntName" $driver`){addAttr -dt "string" -ln "jntName" $driver;		setAttr -e -l 0 ($driver+".jntName");setAttr -e -type "string" ($driver+".jntName") $driven;setAttr -e -l 1 ($driver+".jntName");}}//*************************************************************************************************************//*********************************************delete attr bn/cn **********************************************//*************************************************************************************************************global proc adset_attr_dl_bncn (){string $sel[] = `ls -type joint -sl`;for($each in $sel){if (`attributeExists "jntName" $each`){setAttr -e -l 0 ($each + ".jntName");deleteAttr -at "jntName" $each;}if (`attributeExists "Control" $each`){setAttr -e -l 0 ($each + ".Control");deleteAttr -at "Control" $each;}}}//*************************************************************************************************************//*********************************************Connect system bn/cn********************************************//*************************************************************************************************************global proc adset_ad_cn_bncn (){string $sel[] = `ls -sl`;adsetconnectControl $sel[0] $sel[1];select -cl;}global proc adsetconnectJts(string $from, string $to){pointConstraint -mo $from $to;orientConstraint -mo $from $to;	setAttr -e -l 0 ($from+".Control");setAttr -e -type "string" ($from+".Control") "Driver";setAttr -e -l 1 ($from+".Control");setAttr -e -l 0 ($to+".Control");setAttr -e -type "string" ($to+".Control") "Driven";setAttr -e -l 1 ($to+".Control");}global proc adsetconnectControl(string $from, string $to){select -r -hi $from;string $allSelFrom[] = `ls -sl`;string $allJointsFrom[] = `ls -sl -type joint`;string $controlJts[];clear($controlJts);int $cjt = 0;for ($joint in $allJointsFrom){string $attributes[0];$attributes = `listAttr -ud $joint`;for ($attr in $attributes){if ($attr == "jntName"){$controlJts[$cjt] = $joint;$cjt++;}}}select -r -hi $to;string $allSelTo[] = `ls -sl`;string $allJointsFrom[] = `ls -sl -type joint`;string $boundJts[];clear($boundJts);int $bjt = 0;for ($joint in $allJointsFrom){string $attributes[0];$attributes = `listAttr -ud $joint`;for ($attr in $attributes){if ($attr == "jntName"){$boundJts[$bjt] = $joint;$bjt++;	}}}for ($i = 0; $i < size($boundJts); $i++){string $toBound = `getAttr ($boundJts[$i]+".jntName")`;for ($x = 0; $x < size($controlJts); $x++){string $toJt = `getAttr ($controlJts[$x]+".jntName")`;if ($toJt == $toBound){adsetconnectJts $controlJts[$x] $boundJts[$i];break;}}}}//*************************************************************************************************************//*********************************************    ADSET setup   **********************************************//*************************************************************************************************************global proc css_adset_setup(int $t){switch ($t){case 1:checkBox -e -en 1 -vis 1 adset_st_foot_bx;checkBox -e -en 1 -vis 1 adset_ffing_bx;checkBox -e -en 1 -vis 1 adset_aut_hip_bx;break;case 2:checkBox -e -v 0 -en 0 -vis 0 adset_st_foot_bx;checkBox -e -v 0 -en 0 -vis 0 adset_ffing_bx;checkBox -e -vis 0 -en 0 -v 0 adset_aut_hip_bx;break;case 3:checkBox -e -vis 1 -en 1 adset_st_hand_bx;checkBox -e -v 1 -vis 1 -en 1 adset_hfing_bx;checkBox -e -v 1 -vis 1 -en 1 adset_ikfk_bx;checkBox -e -v 1 -vis 1 -en 1 adset_shld_bx;intSliderGrp -e -en 1 adset_fin_num;break;case 4:checkBox -e -vis 0 -en 0 -v 0 adset_st_hand_bx;checkBox -e -vis 0 -en 0 -v 0 adset_hfing_bx;checkBox -e -vis 0 -en 0 -v 0 adset_ikfk_bx;checkBox -e -vis 0 -en 0 -v 0 adset_shld_bx;intSliderGrp -e -en 0 -v 0 adset_fin_num;break;case 5:checkBox -e -vis 1 -en 1 adset_ear_bx;checkBox -e -vis 1 -en 1 adset_sens_bx;checkBox -e -vis 1 -en 1 adset_vac_bx;checkBox -e -vis 1 -en 1 adset_st_head_bx;checkBox -e -vis 1 -en 1 adset_st_eye_bx;break;case 6:checkBox -e -vis 0 -en 0 -v 0 adset_st_head_bx;checkBox -e -vis 0 -en 0 -v 0 adset_st_eye_bx;checkBox -e -vis 0 -en 0 -v 0 adset_st_ear_bx;checkBox -e -vis 0 -en 0 -v 0 adset_st_sens_bx;checkBox -e -vis 0 -en 0 -v 0 adset_st_vac_bx;checkBox -e -vis 0 -en 0 -v 0 adset_ear_bx;checkBox -e -vis 0 -en 0 -v 0 adset_sens_bx;checkBox -e -vis 0 -en 0 -v 0 adset_vac_bx;break;case 7:checkBox -e -vis 1 -en 1 adset_ik_ear_bx;break;case 8:checkBox -e -vis 0 -en 0 -v 0 adset_st_ear_bx;checkBox -e -vis 0 -en 0 -v 0 adset_ik_ear_bx;break;case 9:checkBox -e -vis 1 -en 1 adset_ik_sen_bx;break;case 10:checkBox -e -vis 0 -en 0 -v 0 adset_st_sens_bx;checkBox -e -vis 0 -en 0 -v 0 adset_ik_sen_bx;break;case 11:checkBox -e -vis 1 -en 1 adset_ik_vac_bx;break;case 12:checkBox -e -vis 0 -en 0 -v 0 adset_st_vac_bx;checkBox -e -vis 0 -en 0 -v 0 adset_ik_vac_bx;break;case 13:checkBox -e -vis 1 -en 1 adset_ik_tail_bx;break;case 14:checkBox -e -vis 0 -en 0 -v 0 adset_ik_tail_bx;checkBox -e -vis 0 -en 0 -v 0 adset_st_tail_bx;break;case 15:checkBox -e -en 1 -vis 1 -v 1 adset_foot_bx;checkBox -e -en 1 -vis 1 -v 1 adset_hand_bx;checkBox -e -en 1 -vis 1 -v 1 adset_head_bx;checkBox -e -en 1 -vis 1 -v 0 adset_ear_bx;checkBox -e -en 1 -vis 1 -v 0 adset_sens_bx;checkBox -e -en 1 -vis 1 -v 0 adset_vac_bx;checkBox -e -en 1 -vis 1 -v 0 adset_tail_bx;checkBox -e -en 1 -vis 1 -v 0 adset_wing_bx;checkBox -e -en 1 -vis 1 -v 1 adset_hfing_bx;checkBox -e -en 1 -vis 1 -v 0 adset_ffing_bx;checkBox -e -en 1 -vis 1 -v 0 adset_st_body_bx;checkBox -e -en 1 -vis 1 -v 0 adset_st_neck_bx;checkBox -e -en 1 -vis 1 -v 0 adset_st_foot_bx;checkBox -e -en 1 -vis 1 -v 0 adset_st_hand_bx;checkBox -e -en 1 -vis 1 -v 0 adset_st_head_bx;checkBox -e -en 1 -vis 1 -v 0 adset_st_eye_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_ear_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_sens_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_vac_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_tail_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ik_spin_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_ear_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_sen_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_vac_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_tail_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_wing_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ikfk_bx;checkBox -e -en 1 -vis 1 -v 1 adset_shld_bx;checkBox -e -en 1 -vis 1 -v 0 adset_aut_hip_bx;intSliderGrp -e -en 1 -v 5 adset_fin_num;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Ears_bx;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Sensor_bx;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Vac_bx;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Tail_bx;break;case 16:checkBox -e -en 1 -vis 1 -v 1 adset_foot_bx;checkBox -e -en 1 -vis 1 -v 1 adset_hand_bx;checkBox -e -en 1 -vis 1 -v 1 adset_head_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ear_bx;checkBox -e -en 1 -vis 1 -v 1 adset_sens_bx;checkBox -e -en 1 -vis 1 -v 1 adset_vac_bx;checkBox -e -en 1 -vis 1 -v 1 adset_tail_bx;checkBox -e -en 1 -vis 1 -v 1 adset_wing_bx;checkBox -e -en 1 -vis 1 -v 1 adset_hfing_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ffing_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_body_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_neck_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_foot_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_hand_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_head_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_eye_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_ear_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_sens_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_vac_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_tail_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ik_spin_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ik_ear_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ik_sen_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ik_vac_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ik_tail_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ik_wing_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ikfk_bx;checkBox -e -en 1 -vis 1 -v 1 adset_shld_bx;checkBox -e -en 1 -vis 1 -v 1 adset_aut_hip_bx;intSliderGrp -e -en 1 -v 5 adset_fin_num;checkBox -e -vis 1 -en 1 -v 1 adset_Dyn_Ears_bx;checkBox -e -vis 1 -en 1 -v 1 adset_Dyn_Sensor_bx;checkBox -e -vis 1 -en 1 -v 1 adset_Dyn_Vac_bx;checkBox -e -vis 1 -en 1 -v 1 adset_Dyn_Tail_bx;break;case 17:checkBox -e -en 1 -vis 1 -v 0 adset_foot_bx;checkBox -e -en 1 -vis 1 -v 0 adset_hand_bx;checkBox -e -en 1 -vis 1 -v 0 adset_head_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ear_bx;checkBox -e -en 0 -vis 0 -v 0 adset_sens_bx;checkBox -e -en 0 -vis 0 -v 0 adset_vac_bx;checkBox -e -en 1 -vis 1 -v 0 adset_tail_bx;checkBox -e -en 1 -vis 1 -v 0 adset_wing_bx;checkBox -e -en 0 -vis 0 -v 0 adset_hfing_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ffing_bx;checkBox -e -en 1 -vis 0 -v 0 adset_st_body_bx;checkBox -e -en 1 -vis 0 -v 0 adset_st_neck_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_foot_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_hand_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_head_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_eye_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_ear_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_sens_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_vac_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_tail_bx;checkBox -e -en 1 -vis 1 -v 0 adset_ik_spin_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_ear_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_sen_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_vac_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_tail_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_wing_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ikfk_bx;checkBox -e -en 0 -vis 0 -v 0 adset_shld_bx;checkBox -e -en 0 -vis 0 -v 0 adset_aut_hip_bx;intSliderGrp -e -en 0 -v 0 adset_fin_num;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Ears_bx;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Sensor_bx;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Vac_bx;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Tail_bx;break;case 18:checkBox -e -en 1 -vis 1 -v 1 adset_foot_bx;checkBox -e -en 1 -vis 1 -v 1 adset_hand_bx;checkBox -e -en 1 -vis 1 -v 1 adset_head_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ear_bx;checkBox -e -en 1 -vis 1 -v 0 adset_sens_bx;checkBox -e -en 1 -vis 1 -v 0 adset_vac_bx;checkBox -e -en 1 -vis 1 -v 0 adset_tail_bx;checkBox -e -en 1 -vis 1 -v 0 adset_wing_bx;checkBox -e -en 1 -vis 1 -v 1 adset_hfing_bx;checkBox -e -en 1 -vis 1 -v 0 adset_ffing_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_body_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_neck_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_foot_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_hand_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_head_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_eye_bx;checkBox -e -en 1 -vis 1 -v 1 adset_st_ear_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_sens_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_vac_bx;checkBox -e -en 0 -vis 0 -v 0 adset_st_tail_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ik_spin_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ik_ear_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_sen_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_vac_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_tail_bx;checkBox -e -en 0 -vis 0 -v 0 adset_ik_wing_bx;checkBox -e -en 1 -vis 1 -v 1 adset_ikfk_bx;checkBox -e -en 1 -vis 1 -v 1 adset_shld_bx;checkBox -e -en 1 -vis 1 -v 0 adset_aut_hip_bx;intSliderGrp -e -en 1 -v 5 adset_fin_num;checkBox -e -vis 1 -en 1 -v 1 adset_Dyn_Ears_bx;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Sensor_bx;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Vac_bx;checkBox -e -vis 0 -en 0 -v 0 adset_Dyn_Tail_bx;break;case 19:int $tmp=`optionMenuGrp -q -sl adset_m_opm`-1;optionMenuGrp -e -sl 1 adset_m_opm;switch ($tmp){case 1:checkBox -e -en 0 adset_foot_bx;checkBox -e -en 0 adset_hand_bx;checkBox -e -en 0 adset_head_bx;checkBox -e -en 0 adset_ear_bx;checkBox -e -en 0 adset_sens_bx;checkBox -e -en 0 adset_vac_bx;checkBox -e -en 0 adset_tail_bx;checkBox -e -en 0 adset_wing_bx;checkBox -e -en 0 adset_hfing_bx;checkBox -e -en 0 adset_ffing_bx;checkBox -e -en 0 adset_st_body_bx;checkBox -e -en 0 adset_st_neck_bx;checkBox -e -en 0 adset_st_foot_bx;checkBox -e -en 0 adset_st_hand_bx;checkBox -e -en 0 adset_st_head_bx;checkBox -e -en 0 adset_st_eye_bx;checkBox -e -en 0 adset_st_ear_bx;checkBox -e -en 0 adset_st_sens_bx;checkBox -e -en 0 adset_st_vac_bx;checkBox -e -en 0 adset_st_tail_bx;checkBox -e -en 0 adset_ik_spin_bx;checkBox -e -en 0 adset_ik_ear_bx;checkBox -e -en 0 adset_ik_sen_bx;checkBox -e -en 0 adset_ik_vac_bx;checkBox -e -en 0 adset_ik_tail_bx;checkBox -e -en 0 adset_ik_wing_bx;checkBox -e -en 0 adset_ikfk_bx;checkBox -e -en 0 adset_shld_bx;checkBox -e -en 0 adset_aut_hip_bx;intSliderGrp -e -en 0 adset_fin_num;button -e -en 0 adset_set_dif_btn;button -e -en 0 adset_set_all_btn;button -e -en 0 adset_set_non_btn;button -e -en 0 adset_set_crt_btn;checkBox -e -en 0 adset_Dyn_Ears_bx;checkBox -e -en 0 adset_Dyn_Sensor_bx;checkBox -e -en 0 adset_Dyn_Vac_bx;checkBox -e -en 0 adset_Dyn_Tail_bx;css_adset_lc_crt;break;case 2:if (`window -exists adset_colorize_win`) deleteUI adset_colorize_win;css_adset_jnt_cntr;break;case 3:css_adset_fin_char;break;case 4:adset_bn_cn;break;case 5:HRRconnectControlFromTo;break;case 6:tglSkinHold;break;case 7:css_geo_eye_win;break;case 8:css_mb_con_win;break;}break;case 20:int $tmp=`optionMenuGrp -q -sl adset_h_opm`-1;optionMenuGrp -e -sl 1 adset_h_opm;css_adset_hlp $tmp;break;case 21:if (`window -exists adset_colorize_win`) deleteUI adset_colorize_win;window -t"Colorize" adset_colorize_win;columnLayout -adj 1;colorIndexSliderGrp -label "Select Center" -min 0 -max 31 -value 30 adset_c_int_sld;colorIndexSliderGrp -label "Select Left" -min 0 -max 31 -value 27 adset_l_int_sld;colorIndexSliderGrp -label "Select Right" -min 0 -max 31 -value 5 adset_r_int_sld;button -l"Colorize" -c"adset_colorize";showWindow adset_colorize_win;break;}}//*************************************************************************************************************//*********************************************toggle skin hold win********************************************//*************************************************************************************************************global proc tglSkinHold(){	if(`window -exists tglSkinHold_ui`)		deleteUI tglSkinHold_ui;			window -t "Toggle Skin Holds" tglSkinHold_ui;	columnLayout -adj 1;		button -l "Hold ON" -c ("tglSkinHold_tgl " + 1) -bgc 1 0 0;		button -l "Hold OFF" -c ("tglSkinHold_tgl " + 0) -bgc 0 1 0;	window -e -wh 216 80 tglSkinHold_ui;	showWindow tglSkinHold_ui;	}//*************************************************************************************************************//********************************************* toggle skin hold **********************************************//*************************************************************************************************************global proc tglSkinHold_tgl(int $onOff)	{	string $sel[] = `ls -sl`;	if(`size($sel)` < 1)		error("tglSkinHold_tgl :: Select a bound surface and run");			for ($each in $sel)	{		string $skinClus = `findRelatedSkinCluster $each`;		if(`size($sel)` < 1)		{				warning("tglSkinHold_tgl :: No skinCluster found on: "+$each);			continue;			}				string $infs[] = `skinCluster -q -inf $skinClus`;		for ($j = 0; $j < size($infs) ;$j++)		{			setAttr ($infs[$j]+".liw") $onOff;			ArtPaintSkinWeightsToolOptions;		}				}}//*************************************************************************************************************//*********************************************   Piston setup   **********************************************//*************************************************************************************************************global proc PistonSetup() {	string $tmp[],$tmp2[];	string $sel[] = `ls -sl`;	float $pos[],$pos2[];	$pos=`xform -q -ws -piv $sel[0]`;		$pos2=`xform -q -ws -piv $sel[1]`;	$tmp=`spaceLocator`;	move $pos[0] $pos[1] $pos[2] $tmp;	$tmp2=`spaceLocator`;	move $pos2[0] $pos2[1] $pos2[2] $tmp2;	parentConstraint -mo $tmp $sel[0];	parentConstraint -mo $tmp2 $sel[1];	select -r $tmp;	select -add $tmp2;	$sel=`ls -sl`;	aimConstraint -mo -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0 $sel[0] $sel[1];	aimConstraint -mo -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0 $sel[1] $sel[0];		float $ss_circle_1_Pos[] = `objectCenter -gl $sel[0]`;	float $ss_circle_2_Pos[] = `objectCenter -gl $sel[1]`;		string $ss_Circle_1[] = `circle -ch 0 -nr 0 1 0 -center $ss_circle_1_Pos[0] $ss_circle_1_Pos[1] $ss_circle_1_Pos[2]`;	CenterPivot;	scale -a 1.5 1.5 1.5;	string $ss_Circle_2[] = `circle -ch 0 -nr 0 1 0 -center $ss_circle_2_Pos[0] $ss_circle_2_Pos[1] $ss_circle_2_Pos[2]`;	CenterPivot;	scale -a 1.5 1.5 1.5;	makeIdentity -a 1 -r 1 -t 1 -s 1 $ss_Circle_1;	makeIdentity -a 1 -r 1 -t 1 -s 1 $ss_Circle_2; 	pointConstraint -mo -weight 1 $ss_Circle_1[0] $sel[0];	pointConstraint -mo -weight 1 $ss_Circle_2[0] $sel[1];		orientConstraint -mo -weight 1 $sel[0] $ss_Circle_1[0];	orientConstraint -mo -weight 1 $sel[1] $ss_Circle_2[0];}//*************************************************************************************************************//*********************************************   Spring setup   **********************************************//*************************************************************************************************************global proc SpringSetup () {	string $tmp[],$clss[],$clse[],$tp1,$tp2,$tp;$tmp=`ls -sl`;string $sel=$tmp[0];select -r $sel;$tmp=`lattice  -divisions 2 2 2 -cp  -objectCentered true  -ldv 2 2 2 -ol 1 -exclusive "Create new partition"`;hide $tmp;select -r ffd1Lattice.pt[0:1][1][0] ffd1Lattice.pt[0:1][1][1] ;$clss=`cluster -n"Spring_ltc_S_Cls"`;select -r ffd1Lattice.pt[0:1][0][0] ffd1Lattice.pt[0:1][0][1] ;$clse=`cluster -n"Spring_ltc_E_Cls"`;float $poss[];$poss=`xform -q -ws -piv $clss`;$tmp=`spaceLocator`;move $poss[0] $poss[1] $poss[2] $tmp;parent $clss $tmp[0];$tp1=`rename $tmp[0] "Spring_S_Lc"`;$poss=`xform -q -ws -piv $clse`;$tmp=`spaceLocator`;move $poss[0] $poss[1] $poss[2] $tmp;parent $clse $tmp[0];$tp2=`rename $tmp[0] "Spring_E_Lc"`;select -r $tp1;$tp=`css_adset_hlp 13`;parent $tp1 $tp;addAttr -ln "Base" -at "float" -k 1 -w 1 -r 1 $tp;addAttr -ln "Current" -at "float" -k 1 -w 1 -r 1 $tp;addAttr -ln "BaseDis" -at "float" -k 1 -w 1 -r 1 $tp;addAttr -ln "CurrentDis" -at "float" -k 1 -w 1 -r 1 $tp;string $dis=`createNode -n"Spring_Dis_NOD" distanceBetween`;connectAttr -f ($tp1+".worldMatrix[0]") ($dis+".inMatrix1");connectAttr -f ($tp2+".worldMatrix[0]") ($dis+".inMatrix2");string $div=`createNode -n"Spring_Div_NOD" multiplyDivide`;setAttr ($div+".operation") 2;connectAttr -f ($dis+".distance") ($tp+".CurrentDis");connectAttr -f ($tp+".CurrentDis") ($div+".input2X");setAttr ($tp+".BaseDis") (`getAttr ($tp+".CurrentDis")`);connectAttr -f ($tp+".BaseDis") ($div+".input1X");string $mt=`createNode -n"Spring_Mlt_NOD" multiplyDivide`;connectAttr -f ($div+".outputX") ($mt+".input2X");connectAttr -f ($tp+".Base") ($mt+".input1X");connectAttr -f ($mt+".outputX") ($tp+".Current");string $tpp=`rename $tp "Spring_S_HLP"`;select -r $tp2;$tp=`css_adset_hlp 13`;parent $tp2 $tp;string $tpe=`rename $tp "Spring_E_HLP"`;hide $tp1;hide $tp2;$tp=`group -em -n "Spring_H_GRP"`;parent $tpp $tp;parent $tpe $tp;CenterPivot $tp;}//*************************************************************************************************************//*********************************************       Rivet      **********************************************//*************************************************************************************************************global proc string rivet (){string $nameObject;string $namePOSI;string $parts[];string $list[] = `filterExpand -sm 32`;int $size = size($list);if ($size > 0){if ($size != 2)error("No two selected edges");tokenize($list[0],".",$parts);$nameObject = $parts[0];tokenize($list[0],"[]",$parts);float $e1 = $parts[1];tokenize($list[1],"[]",$parts);float $e2 = $parts[1];string $nameCFME1 = `createNode curveFromMeshEdge -n "rivetCurveFromMeshEdge1"`;setAttr ".ihi" 1;setAttr ".ei[0]"  $e1;string $nameCFME2 = `createNode curveFromMeshEdge -n "rivetCurveFromMeshEdge2"`;setAttr ".ihi" 1;setAttr ".ei[0]"  $e2;string $nameLoft = `createNode loft -n "rivetLoft1"`;setAttr -s 2 ".ic";setAttr ".u" yes;setAttr ".rsn" yes;$namePOSI = `createNode pointOnSurfaceInfo -n "rivetPointOnSurfaceInfo1"`;setAttr ".turnOnPercentage" 1;setAttr ".parameterU" 0.5;setAttr ".parameterV" 0.5;connectAttr -f ($nameLoft + ".os") ($namePOSI + ".is");connectAttr ($nameCFME1 + ".oc") ($nameLoft + ".ic[0]");connectAttr ($nameCFME2 + ".oc") ($nameLoft + ".ic[1]");connectAttr ($nameObject + ".w") ($nameCFME1 + ".im");connectAttr ($nameObject + ".w") ($nameCFME2 + ".im");}else{	$list = `filterExpand -sm 41`;$size = size($list);if ($size > 0){if ($size != 1)error("No one point selected");tokenize($list[0],".",$parts);$nameObject = $parts[0];tokenize($list[0],"[]",$parts);float $u = $parts[1];float $v = $parts[2];$namePOSI = `createNode pointOnSurfaceInfo -n "rivetPointOnSurfaceInfo1"`;setAttr ".turnOnPercentage" 0;setAttr ".parameterU" $u;setAttr ".parameterV" $v;connectAttr -f ($nameObject + ".ws") ($namePOSI + ".is");}elseerror("No edges or point selected");}string $nameLocator = `createNode transform -n "rivet1"`;createNode locator -n ($nameLocator + "Shape") -p $nameLocator;string $nameAC = `createNode aimConstraint -p $nameLocator -n ($nameLocator + "_rivetAimConstraint1")`;setAttr ".tg[0].tw" 1;setAttr ".a" -type "double3" 0 1 0;setAttr ".u" -type "double3" 0 0 1;setAttr -k off ".v";setAttr -k off ".tx";setAttr -k off ".ty";setAttr -k off ".tz";setAttr -k off ".rx";setAttr -k off ".ry";setAttr -k off ".rz";setAttr -k off ".sx";setAttr -k off ".sy";setAttr -k off ".sz";connectAttr ($namePOSI + ".position") ($nameLocator + ".translate");connectAttr ($namePOSI + ".n") ($nameAC + ".tg[0].tt");connectAttr ($namePOSI + ".tv") ($nameAC + ".wu");connectAttr ($nameAC + ".crx") ($nameLocator + ".rx");connectAttr ($nameAC + ".cry") ($nameLocator + ".ry");connectAttr ($nameAC + ".crz") ($nameLocator + ".rz");select -r $nameLocator;return ($nameLocator);}	