/* usage: nRB_deleteControlsUI()

   nRB_deleteControlsUI v.1.2
   CyberArts Script File
   Creation Date: 12/01/03
   Update: 8/31/06
   Author: Robert Rusick


   See "NURBS_RoundedBox_Notes.txt" for details
   ( or read HTML documentation )
   -----------------------------------------
   Related scripts:

     NURBS_RoundedBox.mel
       Create a rounded box.

     nRB_createUI.mel
       Create a UI box to set rounded box options.

     nRB_testHierarchy.mel
       Test the hierarchy of an group
       to see if it is an unaltered rounded box group.

     nRB_deleteControls.mel
       Selectively delete controls and history from a rounded box.

     nRB_deleteControlsUI.mel
       Create a UI box to set rounded box delete controls options.

     nRB_attachSurfaces.mel
       Attach rounded box surfaces.

     nRB_attachSurfacesUI.mel
       Create a UI box to set rounded box attach surfaces options.

   ---------------------------------------------
   History:

   v.1.1  -- 8/4/05
      use 'getHelpDocs' to find path for help files.

   v.1.2  -- 8/31/06
      disabled menu bar help to avoid problems with Maya 8
*/



/* =======================================================================================
                                  SET OPTION VARS
   =======================================================================================
   Description: Initialize the option values.
   Input Arguments: Whether to set the options to default values.
   Return Value: None.
*/

global proc nRB_deleteControls_SetOptionVars (int $useDefaults )
{
  // if these option vars don't exist (or "useDefaults" is set true),
  // create option vars and set default values

  if ($useDefaults || ! `optionVar -ex nRB_DeleteControls`) optionVar -iv nRB_DeleteControls 4; // any
}

/* =======================================================================================
                                  SETUP
   =======================================================================================
   Description: Update the state of the option box UI to reflect the option values.

   Input Arguments:
     parent               - Top level parent layout of the option box UI.
                            Required so that UI object names can be successfully resolved.

     $useDefaults - Whether the option values should be set to default values.

   Return Value: None.
*/

global proc nRB_deleteControls_Setup(string $parent, int $useDefaults)
{
  // Retrieve the option settings
  nRB_deleteControls_SetOptionVars($useDefaults);

  setParent $parent;

  // Query the optionVar's and set the values into the controls.

  // Delete mode
  int    $deleteSwitch;
  string $deleteMode;

  $deleteSwitch = `optionVar -q nRB_DeleteControls`;

  switch ($deleteSwitch)
  {
    case 1: $deleteMode = "historyOnly";        break;
    case 2: $deleteMode = "controlsOnly";       break;
    case 3: $deleteMode = "historyAndControls"; break;
    case 4: $deleteMode = "any";                break;

    default: $deleteMode = "any"; break;
  }

  radioCollection -e -sl $deleteMode nRB_DeleteModeCollection;


}

/* =======================================================================================
                                  CALLBACK
   =======================================================================================
   Description: Update the option values with the current state of the option box UI.

   Input Arguments:
      parent - Top level parent layout of the option box UI.  Required so
               that UI object names can be successfully resolved.

      doIt   - Whether the command should execute.

   Return Value: None.
*/

global proc nRB_deleteControls_Callback(string $parent, int $doIt)
{
  setParent $parent;

  // Set the optionVar's from the control values, and then perform the command.
  string $deleteSwitch;
  int    $deleteMode;

  $deleteSwitch = `radioCollection -q -sl nRB_DeleteModeCollection`;

  switch ($deleteSwitch)
  {
    case "historyOnly":        $deleteMode = 1; break;
    case "controlsOnly":       $deleteMode = 2; break;
    case "historyAndControls": $deleteMode = 3; break;
    case "any":                $deleteMode = 4; break;

    default: $deleteMode = 4; break;
  }

  optionVar -iv nRB_DeleteControls $deleteMode;

  if ($doIt) nRB_deleteControls ;
}

/* =======================================================================================
                                  OPTIONS
   =======================================================================================
   Description: Construct the option box UI.
     Involves accessing the standard option box and customizing the UI accordingly.

   Input Arguments: None.
   Return Value: None.

   8/4/04 ---
   Using 'getHelpDocLoc' (defined in 'getHelpDocs.mel')
   to create the 'help file' string.

*/

global proc nRB_deleteControls_Options()
{
  // Name of the command for this option box.
  string $commandName = "nRB_deleteControls_";

  // Build the option box actions.
  string $callback = ($commandName + "Callback");
  string $setup    = ($commandName + "Setup");

  // Set up 'help file' string
  if (! `exists getHelpDocLoc` ) source getHelpDocs.mel;

  string $helpFile = ("file://" + `getHelpDocLoc "nRB_createUI.mel" "RoundedBox/nRB_deleteControls.html"` );

  /* STEP 1:  Get the option box.
     ============================
     The value returned is the name of the layout to be used as
     the parent for the option box UI.
  */
  string $layout = getOptionBox();
  setParent $layout;

  /* STEP 2:  Pass the command name to the option box.
     =================================================
     Any default option box behaviour based on the command name is set up with this call.
     For example, updating the 'Help' menu item with the name of the command.
  */
  setOptionBoxCommandName($commandName);

  /* STEP 3:  Activate the default UI template.
     ==========================================
     Activate the default UI template so that the layout of this
     option box is consistent with the layout of the rest of the
     application.
  */
  setUITemplate -pushTemplate DefaultTemplate;

  // Turn on the wait cursor.
  waitCursor -state 1;

  /* STEP 4: Create option box contents.
     =================================== */
  tabLayout -scr true -tv false;
  string $parent = `columnLayout -adjustableColumn 1 nRB_deleteControls_UI`;

  // Delete Mode
  frameLayout
  -label "   Delete Mode"
  -labelAlign "center"
  -cll false
  // -w $uiWidth
  -lw 150
  -mh 5
  -mw 10
  -borderStyle "etchedIn"
  DeleteModeFrame;

    columnLayout;
    radioCollection nRB_DeleteModeCollection;
        text -l "";
        columnLayout;
          radioButton -l "History Only"           -al "left" historyOnly;
          radioButton -l "Controls Only"          -al "left" controlsOnly;
          radioButton -l "History and Controls"   -al "left" historyAndControls;
          radioButton -l "Any"                    -al "left" any;
        setParent ..;
    setParent ..;

  setParent $parent;

  // Turn off the wait cursor.
  waitCursor -state 0;

  /* Step 5: Deactivate the default UI template.
     =========================================== */
  setUITemplate -popTemplate;

  /* Step 6: Customize the buttons.
     ==============================
     Provide more descriptive labels for the buttons.
     Disable those buttons that are not applicable to the option box.
     Attach actions to those buttons that are applicable to the option box.
  */

  // 'Apply' button.
  string $applyBtn = getOptionBoxApplyBtn();
  button -e -l "Delete" -c ($callback + " " + $parent + " " + 1) $applyBtn;

  // 'Save' button.
  string $saveBtn = getOptionBoxSaveBtn();
  button -e -c ($callback + " " + $parent + " " + 0 + "; hideOptionBox") $saveBtn;

  // 'Reset' button.
  string $resetBtn = getOptionBoxResetBtn();
  button -e -c ($setup + " " + $parent + " " + 1) $resetBtn;

  /* Step 7: Set the option box title.
     ================================= */
  setOptionBoxTitle("NURBS Rounded Box Delete Controls Options");

	/*	Step 8: Customize the 'Help' menu item text.
	  	============================================ */
	// setOptionBoxHelpTag( "-absolute \"" + $helpFile + "\"" );
	setOptionBoxHelpTag( "" );

  /* Set the current values of the option box.
     ========================================= */
  eval (($setup + " " + $parent + " " + 0));

  /* Show the option box.
     ==================== */
  showOptionBox();

} // end proc nRB_deleteControls_Options

/* =======================================================================================
                               CREATE UI
   ======================================================================================= */

global proc nRB_deleteControlsUI() { nRB_deleteControls_Options; }

