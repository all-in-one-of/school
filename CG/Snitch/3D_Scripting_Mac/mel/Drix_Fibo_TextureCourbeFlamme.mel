global float $xKub;global float $yKub;global float $Xpos[];global float $Ypos[];global float $largeur[];global int $nbCaracterMax;global int $test;global int $test1;global int $decimal;global int $j;global string $assembleNombre;int $NbKub;float $Altitude;global float $xKub;global float $yKub;global float $Xpos[];global float $Ypos[];global float $largeur[];global int $nbCaracterMax;global int $test;global int $decimal;global int $NbKub;float $Altitude;int $Delay;int $intDelay;string $imFormat;string $mouvement;string $courbe;global proc Fibo_create_UI() {if(`window -exists drix_Fibo_Window`==1){	deleteUI drix_Fibo_Window;}window -resizeToFitChildren 1 drix_Fibo_Window;columnLayout;	text -al "center" -l "Largeur";	floatField -value 1 coteKub;	separator -height 20 -width 120;	text -al "center" -l "Hauteur";	floatField -value 1 hauteurKub;	separator -height 20 -width 120;	text -al "center" -l "Intervalle Temps";	intField -value 10 delayTemps;	separator -height 20 -width 120;       text -al "center" -l "Nombre";	intField -value 10 nombreCube;	separator -height 20 -width 120;	text -al "center" -l "Altitude de depart";	intField -value -20 altitudeDepart;	separator -height 20 -width 120;	optionMenu -label "Mouvement" anim;	     menuItem -label "Spirale";            menuItem -label "ZigZag";	separator -height 20 -width 120;	optionMenu -label "Type" imForm;            menuItem -label "Cube";            menuItem -label "Sphere";            menuItem -label "Cylindre";menuItem -label "Cone";	separator -height 20 -width 120;	text -al "left" -l " Cree les polygones et leur animation";	$execution_button=  `button		-label "Creation !"		-command "drix_Fibo();"`;	separator -height 20 -width 120;	text -al "left" -l " Cree une sphere enflammee ";	text -al "left" -l " qui suit les polygones ";	$execution_button=  `button		-label "Flamme !"		-command "drix_Fibo_create_Flamme();"`;	separator -height 20 -width 120;	text -al "left" -l " Cree la suite de Fibonacci";	$execution_button=  `button		-label "Texte !"		-command "creat_text()"`;	separator -height 20 -width 120;	text -al "left" -l " Cree le sol et l'eclairage";	$execution_button=  `button		-label "Ground and light !"		-command "decorsLight();"`;	separator -height 20 -width 120;	text -al "left" -l " Fait quelques reglages de rendu";	$execution_button=  `button		-label "Set Render !"		-command "mentalRaySetting();"`;	separator -height 20 -width 120;			showWindow;}global proc drix_Fibo() {$xKub = `floatField -q -v coteKub`;$yKub = `floatField -q -v hauteurKub`;$NbKub = `intField -q -v nombreCube`;$Delay = `intField -q -v delayTemps`;$Altitude = `intField -q -v altitudeDepart`;$imFormat= `optionMenu -q -v imForm`;$mouvement= `optionMenu -q -v anim`;int $i;float $Intermed1X;$intermed1X = 0.0;float $Intermed2X;$intermed2X = 0.0;$largeur[0] = $xKub;$largeur[1] = $xKub;	for ($i = 2; $i < $NbKub; $i++) {	$largeur[$i] = $largeur[$i-1]+$largeur[$i-2];	}$Xpos[0] = $largeur[0]/2;$Ypos[0] = $largeur[0]/2;$Xpos[1] = 3*$largeur[1]/2;$Ypos[1] = $largeur[1]/2;$Xpos[2] = $largeur[2]/2;$Ypos[2] = $largeur[2]/2+$largeur[1];$Xpos[3] = -$largeur[3]/2;$Ypos[3] = $largeur[3]/2;for ($i = 4; $i < $NbKub; $i++) {if (float($i/2)==float($i)/2.0) {$Xpos[$i] = ($Xpos[$i-1]+$Xpos[$i-4])/2;$Ypos[$i] = ($largeur[$i]+$largeur[$i-4])*cos(deg_to_rad(180+90*$i))/2 +  $Ypos[$i-4] ;}else{$Ypos[$i] = ($Ypos[$i-1]+$Ypos[$i-4])/2;$Xpos[$i] = ($largeur[$i]+$largeur[$i-4])*cos(deg_to_rad(-90+90*$i))/2 +  $Xpos[$i-4] ;}}if ($mouvement=="Spirale") {for ($i = 0; $i < $NbKub; $i++) {if ($imFormat=="Cube") {polyCube -width $largeur[$i] -height $yKub -depth $largeur[$i];}if ($imFormat=="Sphere") {polySphere  -r ($largeur[$i]/2) ;}if ($imFormat=="Cylindre") {polyCylinder  -r ($largeur[$i]/2) -h $yKub ;}if ($imFormat=="Cone") {polyCone  -r ($largeur[$i]/2) -h $yKub;}rename ($imFormat+$i);move -r ($Xpos[$i]) $Altitude ($Ypos[$i]) ;scale  0 0 0;}}if ($mouvement=="ZigZag") {for ($i = 0; $i < $NbKub; $i++) {$xKub = $xKub + $intermed2X;if ($imFormat=="Cube") {polyCube -width $xKub -height $yKub -depth $xKub;}if ($imFormat=="Sphere") {polySphere  -r ($xKub/2) ;}if ($imFormat=="Cylindre") {polyCylinder  -r ($xKub/2) -h $yKub ;}if ($imFormat=="Cone") {polyCone  -r ($xKub/2) -h $yKub;}rename ($imFormat+$i);$Xpos[$i] = (float($xKub)/2+abs($intermed1X*cos(deg_to_rad(90*$i))));$Ypos[$i] = (float($xKub)/2+abs($intermed1X*sin(deg_to_rad(90*$i))));move -r (float($xKub)/2+abs($intermed1X*cos(deg_to_rad(90*$i)))) $Altitude (float($xKub)/2+abs($intermed1X*sin(deg_to_rad(90*$i)))) ;scale  0 0 0;$intermed2X = $intermed1X;$intermed1X = $xKub;}}select -r ($imFormat+"0");currentTime 1;setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {""+$imFormat+"0"};currentTime $Delay;scale  1 1 1;move -y 0;setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {""+$imFormat+"0"};for ($i = 1; $i < $NbKub; $i++) {eval("select -r "+$imFormat+$i);$intDelay = $Delay*$i;currentTime $intDelay;setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {""+$imFormat+$i};$intDelay = $Delay*($i+1);currentTime $intDelay;scale  1 1 1;move -y 0;setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {""+$imFormat+$i};}for ($i = 0; $i < $NbKub; $i++) {eval("shadingNode -asShader blinn;");rename ($imFormat+"text"+$i);eval("sets -renderable true -noSurfaceShader true -empty -name "+$imFormat+"text"+$i+"SG");eval("connectAttr -f "+$imFormat+"text"+$i+".outColor "+$imFormat+"text"+$i+"SG.surfaceShader");setAttr ($imFormat+"text"+$i+".color") -type double3 (abs(cos(deg_to_rad($i*20)))) (abs(cos(deg_to_rad($i*25)))) (abs(sin(deg_to_rad($i*35)))) ;}for ($i = 0; $i < $NbKub; $i++) {eval("select -r "+$imFormat+$i);eval("sets -e -forceElement "+$imFormat+"text"+$i+"SG");}$courbe = "curve -d 3";for ($i = 0; $i < ($NbKub+2); $i++) {$courbe = $courbe+" -p 0 0 0";}$courbe =$courbe +" -k 0 -k 0";for ($i = 0; $i < ($NbKub); $i++) {$courbe = $courbe+" -k "+$i;}$courbe =$courbe +" -k "+($NbKub-1)+" -k "+($NbKub-1);eval(""+$courbe);rename "Courbe";for ($i = 0; $i < ($NbKub); $i++) {eval("select -r  Courbe.ep["+$i+"]");move -r ($Xpos[$i]) ($yKub/2) ($Ypos[$i]) ;}currentTime 1;}global proc drix_Fibo_create_Flamme() {polySphere -ch on -o on -r ((`floatField -q -v coteKub`)/2);rename sphereFlamme;select -r sphereFlamme Courbe;pathAnimation -fractionMode false -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU (`intField -q -v delayTemps`) -endTimeU ((`intField -q -v nombreCube`+2)*(`intField -q -v delayTemps`));select -r sphereFlamme;eval("sets -e -forceElement "+`optionMenu -q -v imForm`+"text0SG");Fire;select -r emitter1;rename flammeEmitter;select -r particle1;rename flammePart;currentTime (`intField -q -v delayTemps`);setAttr "flammePartShape.fireDensity" 0;setKeyframe "flammePartShape.fireDensity";currentTime (`intField -q -v delayTemps`+1);setAttr "flammePartShape.fireDensity" 10; setKeyframe "flammePartShape.fireDensity";currentTime ((`intField -q -v nombreCube`+2)*(`intField -q -v delayTemps`));setAttr "flammePartShape.fireDensity" ((`intField -q -v nombreCube`)*(`intField -q -v delayTemps`));setKeyframe "flammePartShape.fireDensity";currentTime 1;setAttr "flammePartShape.fireLifespan" (int(((`intField -q -v nombreCube`+2)*(`intField -q -v delayTemps`))/24)); }drix_Fibo_create_UI();int $Delay;int $intDelay;string $imFormat;string $mouvement;string $courbe;global proc drix_Fibo_create_UI() {if(`window -exists drix_Fibo_Window`==1){	deleteUI drix_Fibo_Window;}window -resizeToFitChildren 1 drix_Fibo_Window;columnLayout;	text -al "center" -l "Largeur";	floatField -value 1 coteKub;	separator -height 20 -width 120;	text -al "center" -l "Hauteur";	floatField -value 1 hauteurKub;	separator -height 20 -width 120;	text -al "center" -l "Intervalle Temps";	intField -value 10 delayTemps;	separator -height 20 -width 120;       text -al "center" -l "Nombre";	intField -value 10 nombreCube;	separator -height 20 -width 120;	text -al "center" -l "Altitude de depart";	intField -value -20 altitudeDepart;	separator -height 20 -width 120;	optionMenu -label "Mouvement" anim;	     menuItem -label "Spirale";            menuItem -label "ZigZag";	separator -height 20 -width 120;	optionMenu -label "Type" imForm;            menuItem -label "Cube";            menuItem -label "Sphere";            menuItem -label "Cylindre";menuItem -label "Cone";	separator -height 20 -width 120;	text -al "center" -l "Cr?e les polygones et leur animation";	$execution_button=  `button		-label "Creation !"		-command "drix_Fibo();"`;	separator -height 20 -width 120;	$execution_button=  `button		-label "Flamme !"		-command "drix_Fibo_create_Flamme();"`;	separator -height 20 -width 120;	$execution_button=  `button		-label "Text !"		-command "creat_text();"`;	separator -height 20 -width 120;		$execution_button=  `button		-label "Ground - Light !"		-command "creat_text();"`;	separator -height 20 -width 120;		showWindow;}global proc drix_Fibo() {$xKub = `floatField -q -v coteKub`;$yKub = `floatField -q -v hauteurKub`;$NbKub = `intField -q -v nombreCube`;$Delay = `intField -q -v delayTemps`;$Altitude = `intField -q -v altitudeDepart`;$imFormat= `optionMenu -q -v imForm`;$mouvement= `optionMenu -q -v anim`;int $i;float $Intermed1X;$intermed1X = 0.0;float $Intermed2X;$intermed2X = 0.0;$largeur[0] = $xKub;$largeur[1] = $xKub;	for ($i = 2; $i < $NbKub; $i++) {	$largeur[$i] = $largeur[$i-1]+$largeur[$i-2];	}$Xpos[0] = $largeur[0]/2;$Ypos[0] = $largeur[0]/2;$Xpos[1] = 3*$largeur[1]/2;$Ypos[1] = $largeur[1]/2;$Xpos[2] = $largeur[2]/2;$Ypos[2] = $largeur[2]/2+$largeur[1];$Xpos[3] = -$largeur[3]/2;$Ypos[3] = $largeur[3]/2;for ($i = 4; $i < $NbKub; $i++) {if (float($i/2)==float($i)/2.0) {$Xpos[$i] = ($Xpos[$i-1]+$Xpos[$i-4])/2;$Ypos[$i] = ($largeur[$i]+$largeur[$i-4])*cos(deg_to_rad(180+90*$i))/2 +  $Ypos[$i-4] ;}else{$Ypos[$i] = ($Ypos[$i-1]+$Ypos[$i-4])/2;$Xpos[$i] = ($largeur[$i]+$largeur[$i-4])*cos(deg_to_rad(-90+90*$i))/2 +  $Xpos[$i-4] ;}}if ($mouvement=="Spirale") {for ($i = 0; $i < $NbKub; $i++) {if ($imFormat=="Cube") {polyCube -width $largeur[$i] -height $yKub -depth $largeur[$i];}if ($imFormat=="Sphere") {polySphere  -r ($largeur[$i]/2) ;}if ($imFormat=="Cylindre") {polyCylinder  -r ($largeur[$i]/2) -h $yKub ;}if ($imFormat=="Cone") {polyCone  -r ($largeur[$i]/2) -h $yKub;}rename ($imFormat+$i);move -r ($Xpos[$i]) $Altitude ($Ypos[$i]) ;scale  0 0 0;}}if ($mouvement=="ZigZag") {for ($i = 0; $i < $NbKub; $i++) {$xKub = $xKub + $intermed2X;if ($imFormat=="Cube") {polyCube -width $xKub -height $yKub -depth $xKub;}if ($imFormat=="Sphere") {polySphere  -r ($xKub/2) ;}if ($imFormat=="Cylindre") {polyCylinder  -r ($xKub/2) -h $yKub ;}if ($imFormat=="Cone") {polyCone  -r ($xKub/2) -h $yKub;}rename ($imFormat+$i);$Xpos[$i] = (float($xKub)/2+abs($intermed1X*cos(deg_to_rad(90*$i))));$Ypos[$i] = (float($xKub)/2+abs($intermed1X*sin(deg_to_rad(90*$i))));move -r (float($xKub)/2+abs($intermed1X*cos(deg_to_rad(90*$i)))) $Altitude (float($xKub)/2+abs($intermed1X*sin(deg_to_rad(90*$i)))) ;scale  0 0 0;$intermed2X = $intermed1X;$intermed1X = $xKub;}}select -r ($imFormat+"0");currentTime 1;setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {""+$imFormat+"0"};currentTime $Delay;scale  1 1 1;move -y 0;setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {""+$imFormat+"0"};for ($i = 1; $i < $NbKub; $i++) {eval("select -r "+$imFormat+$i);$intDelay = $Delay*$i;currentTime $intDelay;setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {""+$imFormat+$i};$intDelay = $Delay*($i+1);currentTime $intDelay;scale  1 1 1;move -y 0;setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {""+$imFormat+$i};}for ($i = 0; $i < $NbKub; $i++) {eval("shadingNode -asShader blinn;");rename ($imFormat+"text"+$i);eval("sets -renderable true -noSurfaceShader true -empty -name "+$imFormat+"text"+$i+"SG");eval("connectAttr -f "+$imFormat+"text"+$i+".outColor "+$imFormat+"text"+$i+"SG.surfaceShader");setAttr ($imFormat+"text"+$i+".color") -type double3 (abs(cos(deg_to_rad($i*20)))) (abs(cos(deg_to_rad($i*25)))) (abs(sin(deg_to_rad($i*35)))) ;}for ($i = 0; $i < $NbKub; $i++) {eval("select -r "+$imFormat+$i);eval("sets -e -forceElement "+$imFormat+"text"+$i+"SG");}$courbe = "curve -d 3";for ($i = 0; $i < ($NbKub+2); $i++) {$courbe = $courbe+" -p 0 0 0";}$courbe =$courbe +" -k 0 -k 0";for ($i = 0; $i < ($NbKub); $i++) {$courbe = $courbe+" -k "+$i;}$courbe =$courbe +" -k "+($NbKub-1)+" -k "+($NbKub-1);eval(""+$courbe);rename "Courbe";for ($i = 0; $i < ($NbKub); $i++) {eval("select -r  Courbe.ep["+$i+"]");move -r ($Xpos[$i]) ($yKub/2) ($Ypos[$i]) ;}currentTime 1;}global proc drix_Fibo_create_Flamme() {polySphere -ch on -o on -r ((`floatField -q -v coteKub`)/2);rename sphereFlamme;select -r sphereFlamme Courbe;pathAnimation -fractionMode false -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU (`intField -q -v delayTemps`) -endTimeU ((`intField -q -v nombreCube`+2)*(`intField -q -v delayTemps`));select -r sphereFlamme;eval("sets -e -forceElement "+`optionMenu -q -v imForm`+"text0SG");Fire;select -r emitter1;rename flammeEmitter;select -r particle1;rename flammePart;setAttr "flammePartShape.fireSpeed" 2;currentTime (`intField -q -v delayTemps`);setAttr "flammePartShape.fireDensity" 0;setKeyframe "flammePartShape.fireDensity";currentTime (`intField -q -v delayTemps`+1);setAttr "flammePartShape.fireDensity" 10; setKeyframe "flammePartShape.fireDensity";currentTime ((`intField -q -v nombreCube`+2)*(`intField -q -v delayTemps`));setAttr "flammePartShape.fireDensity" ((`intField -q -v nombreCube`)*(`intField -q -v delayTemps`));setKeyframe "flammePartShape.fireDensity";currentTime 1;setAttr "flammePartShape.fireLifespan" (int(((`intField -q -v nombreCube`+2)*(`intField -q -v delayTemps`))/24)); defaultPointLight(1, 1,1,1, 0, 0, 0,0,0, 1);rename LumiereSphere;setAttr "LumiereSphereShape.intensity" 60;setAttr LumiereSphereShape.decayRate 2;setAttr "LumiereSphereShape.useRayTraceShadows" 1;setAttr "LumiereSphereShape.lightRadius" 5;setAttr "LumiereSphereShape.shadowRays" 6;setAttr "LumiereSphereShape.rayDepthLimit" 3;move -0.5 12 -0.5;select LumiereSphere sphereFlamme;parent;}global proc creat_text(){textCurves -ch 0 -f "Tekton Pro|h-17|w700|c0" -t "+";	planarSrf -name "Trim Char_x_1 #" -ch 1 -tol 0.01 -o on -po 1 Char_x_1;select Text_x_1;doDelete;select -r Trim_Char_x_1_1 ;rename textPlus;rotate -r -os -90 0 0 ;scale -r 0 0 0 ;textCurves -ch 0 -f "Tekton Pro|h-17|w700|c0" -t "=";	planarSrf -name "Trim Char_x_1 #" -ch 1 -tol 0.01 -o on -po 1 Char_x_1;select Text_x_1;doDelete;select -r Trim_Char_x_1_1 ;rename textEgal;	rotate -r -os -90 0 0 ;scale -r 0 0 0 ;$xKub = `floatField -q -v coteKub`;$NbKub = `intField -q -v nombreCube`;int $i;float $Intermed1X;$intermed1X = 0.0;float $Intermed2X;$intermed2X = 0.0;$largeur[0] = $xKub;$largeur[1] = $xKub;	for ($i = 2; $i < $NbKub; $i++) {		$largeur[$i] = $largeur[$i-1]+$largeur[$i-2];	}	for ($i = 0; $i < 10; $i++) {		textCurves -ch 0 -f "Tekton Pro|h-17|w700|c0" -t (""+$i);			planarSrf -name "Trim Char_x_1 #" -ch 1 -tol 0.01 -o on -po 1 Char_x_1;		select Text_x_1;		doDelete;		select -r Trim_Char_x_1_1 ;		rename ("text"+$i);					}int $nbCaractere[];matrix $deciMat[100][100];for($i = 0; $i < $NbKub; $i++) {	$nbCaractere[$i] = 0;	$assembleNombre = "";	$test = int($largeur[$i]);		while($test>0){		$test1 = $test;		$test = int($test/10);		$deciMat[$i][$nbCaractere[$i]] = $test1-$test*10;		$nbCaractere[$i]  = $nbCaractere[$i] + 1;		}		for($j = 0 ; $j < $nbCaractere[$i] ; $j++){	 	eval("select -r  text"+$deciMat[$i][$j]);		duplicate -rr;		rename ("Final"+$i+$j);		$assembleNombre = $assembleNombre + " Final"+$i+$j;		move (-$j*3) 0 0;		}		eval("select -r "+$assembleNombre);		group; xform -os -piv 0 0 0;		rename ("Gp"+$i);    	}$Delay = `intField -q -v delayTemps`;select -r textEgal;currentTime 1;scale 0 0 0;setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"textEgal"};currentTime $Delay;rotate -r -os 90 0 0;scale 1 1 1;select -r textPlus;	currentTime 1;	scale 0 0 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"textPlus"};	currentTime $Delay;	rotate -r -os 90 0 0;	scale 1 1 1;	move -8 0 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"textPlus"};select -r text0;	currentTime (2*$Delay);	scale 0 0 0;	rotate -r -os -90 0 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"text0"};	currentTime (3*$Delay);	rotate -r -os 90 0 0;	scale 1 1 1;	move -16 0 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"text0"};	currentTime (6*$Delay);	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"text0"};	currentTime (7*$Delay);	move  -r (-150) 0 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"text0"};$j = 9;for($i = 1; $i < $NbKub-1; $i++) {		select -r textPlus;	currentTime ($j*$Delay);	move (-5 - 2.5*float($nbCaractere[$i]+$nbCaractere[$i-1])) 0 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"textPlus"};	currentTime (($j+2)*$Delay);	move (-5 - 2.5*float($nbCaractere[$i]+$nbCaractere[$i-1])) 0 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"textPlus"};		$j = $j + 3;	}$j = 0;for($i = 0; $i < $NbKub; $i++) {		select -r ("Gp"+$i);	rotate -r -os -90 0 0 ;	scale  0 0 0;	currentTime ($j*$Delay);	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+1)*$Delay);	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+2)*$Delay);	scale 1 1 1;	rotate -r -os 90 0 0 ;	move -r (4+3*$nbCaractere[$i]) 0 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+3)*$Delay);	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+4)*$Delay);	move -r (-4-2*$nbCaractere[$i]) 4 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+5)*$Delay);	move  -r (-4-2*$nbCaractere[$i]) -4 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+6)*$Delay);	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+7)*$Delay);	move  -r (-4-2*$nbCaractere[$i]) 4 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+8)*$Delay);	move -r (-4-2*$nbCaractere[$i]) -4 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+9)*$Delay);	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};	currentTime (($j+10)*$Delay);	move  -r (-150) 0 0;	setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {"Gp"+$i};		$j = $j+3;	}for ($i = 1 ;$i < 10; $i++) {		select ("text"+$i);		doDelete;		}currentTime 1;	}global proc decorsLight(){polyPlane -ch on -o on -w 24 -h 24 -sw 1 -sh 1 -cuv 2 ;$yKub = `floatField -q -v hauteurKub`;move 0 (-$yKub/2) 0;scale 50 1 50;rename Ground;defaultDirectionalLight(2, 1,1,1, "0", 0.724 ,0.939 ,0.969, 0);rename AreaOne;setAttr "AreaOneShape.color" -type double3 0.724 0.939 0.969 ;setAttr "AreaOneShape.useRayTraceShadows" 1;setAttr "AreaOneShape.lightAngle" 50;setAttr "AreaOneShape.shadowRays" 40;setAttr "AreaOneShape.rayDepthLimit" 2;move -5 17.5 0;rotate -16.210 -42.549 0;defaultDirectionalLight(2, 1,1,1, "0", 1 ,0.790 ,0, 0);rename AreaTwo;setAttr "AreaTwoShape.color" -type double3 1 0.79 0.655 ;setAttr "AreaTwoShape.useRayTraceShadows" 1;setAttr "AreaTwoShape.lightAngle" 3;setAttr "AreaTwoShape.shadowRays" 40;setAttr "AreaTwoShape.rayDepthLimit" 2;move 5 10 0;rotate -20 45 0;}global proc mentalRaySetting(){setCurrentRenderer mentalRay;setAttr miDefaultOptions.filterWidth 0.75;setAttr miDefaultOptions.filterHeight 0.75;setAttr "miDefaultOptions.minSamples" 1;setAttr "miDefaultOptions.maxSamples" 2;setAttr miDefaultOptions.contrastR 0.02;setAttr miDefaultOptions.contrastG 0.02;setAttr miDefaultOptions.contrastB 0.02;setAttr miDefaultOptions.contrastA 0.02;setAttr miDefaultOptions.filter 1;setAttr "miDefaultOptions.jitter" 1;setAttr "miDefaultOptions.sampleLock" 1;setAttr "miDefaultOptions.finalGather" 1;setAttr "miDefaultOptions.finalGatherRays" 200;setAttr "miDefaultOptions.finalGatherPoints" 25;setAttr "miDefaultOptions.rayTracing" 1;setAttr "miDefaultOptions.maxReflectionRays" 10;setAttr "miDefaultOptions.maxRefractionRays" 10;setAttr "miDefaultOptions.maxRayDepth" 20;}Fibo_create_UI();