global proc sceneReport (){	// create a string naming the file. Place it in	// the user’s temp directory.	string $fileName = ( `internalVar -userTmpDir` + "sceneReport.txt" ) ;		// Open the file for writing and capture the file	// identifier for later use	int $fileID = `fopen $fileName "w"`;		// get a list of every polygonal object in the scene	string $meshes[] = `ls -type "mesh"`;		for ( $each in $meshes )		{			// Gather Data on each polygon object			// The parent object of any mesh node will be the			// transform node associated with the shape node			string $parents[] = `listRelatives -parent $each`;						for ( $item in $parents )				fprint $fileID ( $item + "\n" ); // Testing						fprint $fileID ( $each + "\n" ); // Testing						// find the component information			int $components[] = `polyEvaluate										-vertex										-face										-triangle										-edge										$each`										;						for ( $item in $components )				fprint $fileID ( $item + "\n" ); // Testing						// gather the shader information			string $connections[] = `listConnections $each`;			string $shaders[];						for ( $node in $connections )				if ( `nodeType $node` == "shadingEngine" )					$shaders[`size $shaders`] = $node;						$shaders = `stringArrayRemoveDuplicates $shaders`;						for ( $item in $shaders )				fprint $fileID ( $item + "\n" ); // Testing						clear $shaders;		}		// Get list of Image files	string $imageFiles[] = `ls -type "file"`;		for ( $iFile in $imageFiles )		{			string $actualFile = `getAttr ( $iFile + ".fileTextureName" )`;			int $xRes = `getAttr ( $iFile + ".outSizeX" )`;			int $yRes = `getAttr ( $iFile + ".outSizeY" )`;						fprint $fileID ( $actualFile + "\n" ); // Testing			fprint $fileID ( $xRes + " " ); // Testing			fprint $fileID ( $yRes + "\n" ); // Testing		}	fclose $fileID;}