global proc generateCubicReflectionMap ( int $resolution ){	// build selection list	string $selection[] = `ls -selection`;		// iterate through the selection list	for ( $eachItem in $selection )		{			// create the six cameras, and name them			string $camHold[], $refCams[];			for ( $i = 0; $i < 6 ; $i++ )				{					$camHold = `camera						-centerOfInterest 5						-focalLength 12.7						-lensSqueezeRatio 1						-cameraScale 1						-horizontalFilmAperture 1						-horizontalFilmOffset 0						-verticalFilmAperture 1						-verticalFilmOffset 0						-filmFit Horizontal						-overscan 1						-motionBlur 0						-shutterAngle 2.513274						-nearClipPlane 0.000001						-farClipPlane 100000 						-orthographic 0`						;										// declare string to append to camera name					string $direction[];					$direction[0] = "_right";					$direction[1] = "_top" ;					$direction[2] = "_front" ;					$direction[3] = "_left" ;					$direction[4] = "_bottom" ;					$direction[5] = "_back" ;					$refCams[$i] = `rename $camHold[0] ( $eachItem + $direction[$i] )`;				}						// Rotate the Cameras			string $angSettings = `currentUnit -query -angle`;						if ( $angSettings == "deg" )				{					setAttr ( $refCams[0] + ".RotateY" ) -90;					setAttr ( $refCams[1] + ".RotateX" ) 90;					setAttr ( $refCams[2] + ".RotateY" ) 180;					setAttr ( $refCams[3] + ".RotateY" ) 90;					setAttr ( $refCams[4] + ".RotateX" ) -90;				}						if ( $angSettings == "rad" )				{ 					setAttr ( $refCams[0] + ".RotateY" ) `deg_to_rad -90`;					setAttr ( $refCams[1] + ".RotateX" ) `deg_to_rad 90`;					setAttr ( $refCams[2] + ".RotateY" ) `deg_to_rad 180`;					setAttr ( $refCams[3] + ".RotateY" ) `deg_to_rad 90`;					setAttr ( $refCams[4] + ".RotateX" )`deg_to_rad -90`;				}						float $minB[] = `getAttr ( $eachItem + ".boundingBoxMin" )`;			float $maxB[] = `getAttr ( $eachItem + ".boundingBoxMax" )`;			float $objectPosition[]= { (($maxB[0] + $minB[0]) * 0.5 ), (($maxB[1] + $minB[1]) * 0.5 ), (($maxB[2] + $minB[2]) * 0.5 ) };						// create the group containing all 6 views			select -replace $refCams;			string $camGrouping = `group -name "cameraGroup"`;			xform -objectSpace -pivots 0 0 0 $camGrouping;						// move it to position			xform				-worldSpace				-transform				$objectPosition[0]				$objectPosition[1]				$objectPosition[2]				$camGrouping;						// set the rendering attributes			float $currWidth =`getAttr defaultResolution.width`;			float $currHeight =`getAttr defaultResolution.height`;			float $currAspect =`getAttr defaultResolution.deviceAspectRatio`;			string $currPrefix =`getAttr defaultRenderGlobals.imageFilePrefix`;						setAttr defaultResolution.width $resolution;			setAttr defaultResolution.height $resolution;			setAttr defaultResolution.deviceAspectRatio 1;			setAttr defaultRenderGlobals.imageFilePrefix -type "string" "";			setAttr ( $eachItem + ".visibility" ) off;						// Do renders			for ( $eachCam in $refCams )				{					string $renderedImage = `render $eachCam`;					string $tokenBuffer[];					tokenize $renderedImage "/" $tokenBuffer;							string $imageName = $tokenBuffer[(`size $tokenBuffer` - 1)];					$path = "";										for (   $i = 0; $i < (`size $tokenBuffer` - 1); $i++ )						$path = ( $path + $tokenBuffer[$i] + "\\" );										string $old = ( $path + $imageName );					tokenize $imageName "." $tokenBuffer;							string $extension = $tokenBuffer[1];					string $new = ( $path + $eachCam + "." + $extension ); $systemCmd = ( "move \"" + $old + "\" \"" + $new + "\"" );					system ( $systemCmd );				}		}}